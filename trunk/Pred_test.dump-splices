/home/agustin/Source/git/quickcheck-patterns/test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a3Z5x (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type) self_a3Z5z
      where
        Mk_Val_a3Z5y :: forall (v_a3Z2I :: GHC.Types.Type)
                               (a_a3Z2J :: GHC.Types.Type)
                               self_a3Z5z.
                        a_a3Z2J
                        -> Rep_Val_a3Z5x (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type) self_a3Z5z
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a3Z5x (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type)) (Exp v_a3Z2I a_a3Z2J) where
      alg (Mk_Val_a3Z5y v1) = Val v1
    instance (Arbitrary (v_a3Z2I :: GHC.Types.Type),
              Arbitrary (a_a3Z2J :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a3Z5x (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type)) (Exp v_a3Z2I a_a3Z2J) where
      liftFix gen_a3Z5A = ((<*>) (pure Mk_Val_a3Z5y)) arbitrary
    instance Branching (Rep_Val_a3Z5x (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a3Z5x
    data Rep_Var_a3Z5B (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type) self_a3Z5D
      where
        Mk_Var_a3Z5C :: forall (v_a3Z2I :: GHC.Types.Type)
                               (a_a3Z2J :: GHC.Types.Type)
                               self_a3Z5D.
                        v_a3Z2I
                        -> Rep_Var_a3Z5B (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type) self_a3Z5D
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a3Z5B (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type)) (Exp v_a3Z2I a_a3Z2J) where
      alg (Mk_Var_a3Z5C v1) = Var v1
    instance (Arbitrary (v_a3Z2I :: GHC.Types.Type),
              Arbitrary (a_a3Z2J :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a3Z5B (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type)) (Exp v_a3Z2I a_a3Z2J) where
      liftFix gen_a3Z5E = ((<*>) (pure Mk_Var_a3Z5C)) arbitrary
    instance Branching (Rep_Var_a3Z5B (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a3Z5B
    data Rep_Add_a3Z5F (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type) self_a3Z5H
      where
        Mk_Add_a3Z5G :: forall (v_a3Z2I :: GHC.Types.Type)
                               (a_a3Z2J :: GHC.Types.Type)
                               self_a3Z5H.
                        self_a3Z5H
                        -> self_a3Z5H
                           -> Rep_Add_a3Z5F (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type) self_a3Z5H
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a3Z5F (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type)) (Exp v_a3Z2I a_a3Z2J) where
      alg (Mk_Add_a3Z5G v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a3Z2I :: GHC.Types.Type),
              Arbitrary (a_a3Z2J :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a3Z5F (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type)) (Exp v_a3Z2I a_a3Z2J) where
      liftFix gen_a3Z5I
        = ((<*>) (((<*>) (pure Mk_Add_a3Z5G)) (smaller gen_a3Z5I)))
            (smaller gen_a3Z5I)
    instance Branching (Rep_Add_a3Z5F (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a3Z5F
/home/agustin/Source/git/quickcheck-patterns/test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621679961108_a3ZtP (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type) self_a3ZtW
      where
        Pat_foo_1_6989586621679961110_a3ZtR :: forall (v_a3Z2I :: GHC.Types.Type)
                                                      (a_a3Z2J :: GHC.Types.Type)
                                                      self_a3ZtW.
                                               self_a3ZtW
                                               -> self_a3ZtW
                                                  -> self_a3ZtW
                                                     -> Pat_foo_1_6989586621679961108_a3ZtP (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type) self_a3ZtW
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621679961108_a3ZtP v_a3Z2I a_a3Z2J) (Exp v_a3Z2I a_a3Z2J) where
      alg (Pat_foo_1_6989586621679961110_a3ZtR v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a3Z2I, Arbitrary a_a3Z2J) =>
             FixArbitrary (Pat_foo_1_6989586621679961108_a3ZtP v_a3Z2I a_a3Z2J) (Exp v_a3Z2I a_a3Z2J) where
      liftFix gen_6989586621679961112_a3ZtT
        = ((satisfy "foo#1")
             (\ pat_6989586621679961114_a3ZtV
                -> case step pat_6989586621679961114_a3ZtV of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621679961110_a3ZtR))
                       (smaller gen_6989586621679961112_a3ZtT)))
                   (smaller gen_6989586621679961112_a3ZtT)))
               (smaller gen_6989586621679961112_a3ZtT))
    instance Branching (Pat_foo_1_6989586621679961108_a3ZtP v_a3Z2I a_a3Z2J) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621679961108_a3ZtP
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621679961141_a3Zum (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type) self_a3Zut
      where
        Pat_foo_2_6989586621679961143_a3Zuo :: forall (v_a3Z2I :: GHC.Types.Type)
                                                      (a_a3Z2J :: GHC.Types.Type)
                                                      self_a3Zut.
                                               a_a3Z2J
                                               -> self_a3Zut
                                                  -> Pat_foo_2_6989586621679961141_a3Zum (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type) self_a3Zut
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621679961141_a3Zum v_a3Z2I a_a3Z2J) (Exp v_a3Z2I a_a3Z2J) where
      alg (Pat_foo_2_6989586621679961143_a3Zuo v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a3Z2I, Arbitrary a_a3Z2J) =>
             FixArbitrary (Pat_foo_2_6989586621679961141_a3Zum v_a3Z2I a_a3Z2J) (Exp v_a3Z2I a_a3Z2J) where
      liftFix gen_6989586621679961145_a3Zuq
        = ((satisfy "foo#2")
             (\ pat_6989586621679961147_a3Zus
                -> case step pat_6989586621679961147_a3Zus of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621679961143_a3Zuo)) arbitrary))
               (smaller gen_6989586621679961145_a3Zuq))
    instance Branching (Pat_foo_2_6989586621679961141_a3Zum v_a3Z2I a_a3Z2J) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621679961141_a3Zum
    type instance Hash "foo" 2 = "foo#2"
/home/agustin/Source/git/quickcheck-patterns/test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621679962355_a3ZNW (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type) self_a3ZO3
      where
        Pat_bar_1_6989586621679962357_a3ZNY :: forall (v_a3Z2I :: GHC.Types.Type)
                                                      (a_a3Z2J :: GHC.Types.Type)
                                                      self_a3ZO3.
                                               a_a3Z2J
                                               -> Pat_bar_1_6989586621679962355_a3ZNW (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type) self_a3ZO3
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621679962355_a3ZNW [Char] a_a3Z2J) (Exp [Char] a_a3Z2J) where
      alg (Pat_bar_1_6989586621679962357_a3ZNY v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a3Z2J =>
             FixArbitrary (Pat_bar_1_6989586621679962355_a3ZNW [Char] a_a3Z2J) (Exp [Char] a_a3Z2J) where
      liftFix gen_6989586621679962359_a3ZO0
        = ((satisfy "bar#1")
             (\ pat_6989586621679962361_a3ZO2
                -> case step pat_6989586621679962361_a3ZO2 of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621679962357_a3ZNY)) arbitrary)
    instance Branching (Pat_bar_1_6989586621679962355_a3ZNW [Char] a_a3Z2J) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621679962355_a3ZNW
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621679962400_a3ZOF (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type) self_a3ZOM
      where
        Pat_bar_2_6989586621679962402_a3ZOH :: forall (v_a3Z2I :: GHC.Types.Type)
                                                      (a_a3Z2J :: GHC.Types.Type)
                                                      self_a3ZOM.
                                               self_a3ZOM
                                               -> self_a3ZOM
                                                  -> Pat_bar_2_6989586621679962400_a3ZOF (v_a3Z2I :: GHC.Types.Type) (a_a3Z2J :: GHC.Types.Type) self_a3ZOM
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621679962400_a3ZOF [Char] a_a3Z2J) (Exp [Char] a_a3Z2J) where
      alg (Pat_bar_2_6989586621679962402_a3ZOH v1 v2) = (Add v1) v2
    instance Arbitrary a_a3Z2J =>
             FixArbitrary (Pat_bar_2_6989586621679962400_a3ZOF [Char] a_a3Z2J) (Exp [Char] a_a3Z2J) where
      liftFix gen_6989586621679962404_a3ZOJ
        = ((satisfy "bar#2")
             (\ pat_6989586621679962406_a3ZOL
                -> case step pat_6989586621679962406_a3ZOL of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621679962402_a3ZOH))
                   (smaller gen_6989586621679962404_a3ZOJ)))
               (smaller gen_6989586621679962404_a3ZOJ))
    instance Branching (Pat_bar_2_6989586621679962400_a3ZOF [Char] a_a3Z2J) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621679962400_a3ZOF
    type instance Hash "bar" 2 = "bar#2"
/home/agustin/Source/git/quickcheck-patterns/test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a40F7 (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type) self_a40F9
      where
        Mk_Val_a40F8 :: forall (v_a40Ci :: GHC.Types.Type)
                               (a_a40Cj :: GHC.Types.Type)
                               self_a40F9.
                        a_a40Cj
                        -> Rep_Val_a40F7 (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type) self_a40F9
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a40F7 (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type)) (Exp v_a40Ci a_a40Cj) where
      alg (Mk_Val_a40F8 v1) = Val v1
    instance (Arbitrary (v_a40Ci :: GHC.Types.Type),
              Arbitrary (a_a40Cj :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a40F7 (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type)) (Exp v_a40Ci a_a40Cj) where
      liftFix gen_a40Fa = ((<*>) (pure Mk_Val_a40F8)) arbitrary
    instance Branching (Rep_Val_a40F7 (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a40F7
    data Rep_Var_a40Fb (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type) self_a40Fd
      where
        Mk_Var_a40Fc :: forall (v_a40Ci :: GHC.Types.Type)
                               (a_a40Cj :: GHC.Types.Type)
                               self_a40Fd.
                        v_a40Ci
                        -> Rep_Var_a40Fb (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type) self_a40Fd
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a40Fb (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type)) (Exp v_a40Ci a_a40Cj) where
      alg (Mk_Var_a40Fc v1) = Var v1
    instance (Arbitrary (v_a40Ci :: GHC.Types.Type),
              Arbitrary (a_a40Cj :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a40Fb (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type)) (Exp v_a40Ci a_a40Cj) where
      liftFix gen_a40Fe = ((<*>) (pure Mk_Var_a40Fc)) arbitrary
    instance Branching (Rep_Var_a40Fb (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a40Fb
    data Rep_Add_a40Ff (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type) self_a40Fh
      where
        Mk_Add_a40Fg :: forall (v_a40Ci :: GHC.Types.Type)
                               (a_a40Cj :: GHC.Types.Type)
                               self_a40Fh.
                        self_a40Fh
                        -> self_a40Fh
                           -> Rep_Add_a40Ff (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type) self_a40Fh
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a40Ff (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type)) (Exp v_a40Ci a_a40Cj) where
      alg (Mk_Add_a40Fg v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a40Ci :: GHC.Types.Type),
              Arbitrary (a_a40Cj :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a40Ff (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type)) (Exp v_a40Ci a_a40Cj) where
      liftFix gen_a40Fi
        = ((<*>) (((<*>) (pure Mk_Add_a40Fg)) (smaller gen_a40Fi)))
            (smaller gen_a40Fi)
    instance Branching (Rep_Add_a40Ff (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a40Ff
/home/agustin/Source/git/quickcheck-patterns/test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621679967158_a413p (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type) self_a413w
      where
        Pat_foo_1_6989586621679967160_a413r :: forall (v_a40Ci :: GHC.Types.Type)
                                                      (a_a40Cj :: GHC.Types.Type)
                                                      self_a413w.
                                               self_a413w
                                               -> self_a413w
                                                  -> self_a413w
                                                     -> Pat_foo_1_6989586621679967158_a413p (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type) self_a413w
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621679967158_a413p v_a40Ci a_a40Cj) (Exp v_a40Ci a_a40Cj) where
      alg (Pat_foo_1_6989586621679967160_a413r v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a40Ci, Arbitrary a_a40Cj) =>
             FixArbitrary (Pat_foo_1_6989586621679967158_a413p v_a40Ci a_a40Cj) (Exp v_a40Ci a_a40Cj) where
      liftFix gen_6989586621679967162_a413t
        = ((satisfy "foo#1")
             (\ pat_6989586621679967164_a413v
                -> case step pat_6989586621679967164_a413v of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621679967160_a413r))
                       (smaller gen_6989586621679967162_a413t)))
                   (smaller gen_6989586621679967162_a413t)))
               (smaller gen_6989586621679967162_a413t))
    instance Branching (Pat_foo_1_6989586621679967158_a413p v_a40Ci a_a40Cj) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621679967158_a413p
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621679967191_a413W (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type) self_a4143
      where
        Pat_foo_2_6989586621679967193_a413Y :: forall (v_a40Ci :: GHC.Types.Type)
                                                      (a_a40Cj :: GHC.Types.Type)
                                                      self_a4143.
                                               a_a40Cj
                                               -> self_a4143
                                                  -> Pat_foo_2_6989586621679967191_a413W (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type) self_a4143
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621679967191_a413W v_a40Ci a_a40Cj) (Exp v_a40Ci a_a40Cj) where
      alg (Pat_foo_2_6989586621679967193_a413Y v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a40Ci, Arbitrary a_a40Cj) =>
             FixArbitrary (Pat_foo_2_6989586621679967191_a413W v_a40Ci a_a40Cj) (Exp v_a40Ci a_a40Cj) where
      liftFix gen_6989586621679967195_a4140
        = ((satisfy "foo#2")
             (\ pat_6989586621679967197_a4142
                -> case step pat_6989586621679967197_a4142 of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621679967193_a413Y)) arbitrary))
               (smaller gen_6989586621679967195_a4140))
    instance Branching (Pat_foo_2_6989586621679967191_a413W v_a40Ci a_a40Cj) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621679967191_a413W
    type instance Hash "foo" 2 = "foo#2"
/home/agustin/Source/git/quickcheck-patterns/test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621679968405_a41nw (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type) self_a41nD
      where
        Pat_bar_1_6989586621679968407_a41ny :: forall (v_a40Ci :: GHC.Types.Type)
                                                      (a_a40Cj :: GHC.Types.Type)
                                                      self_a41nD.
                                               a_a40Cj
                                               -> Pat_bar_1_6989586621679968405_a41nw (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type) self_a41nD
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621679968405_a41nw [Char] a_a40Cj) (Exp [Char] a_a40Cj) where
      alg (Pat_bar_1_6989586621679968407_a41ny v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a40Cj =>
             FixArbitrary (Pat_bar_1_6989586621679968405_a41nw [Char] a_a40Cj) (Exp [Char] a_a40Cj) where
      liftFix gen_6989586621679968409_a41nA
        = ((satisfy "bar#1")
             (\ pat_6989586621679968411_a41nC
                -> case step pat_6989586621679968411_a41nC of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621679968407_a41ny)) arbitrary)
    instance Branching (Pat_bar_1_6989586621679968405_a41nw [Char] a_a40Cj) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621679968405_a41nw
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621679968450_a41of (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type) self_a41om
      where
        Pat_bar_2_6989586621679968452_a41oh :: forall (v_a40Ci :: GHC.Types.Type)
                                                      (a_a40Cj :: GHC.Types.Type)
                                                      self_a41om.
                                               self_a41om
                                               -> self_a41om
                                                  -> Pat_bar_2_6989586621679968450_a41of (v_a40Ci :: GHC.Types.Type) (a_a40Cj :: GHC.Types.Type) self_a41om
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621679968450_a41of [Char] a_a40Cj) (Exp [Char] a_a40Cj) where
      alg (Pat_bar_2_6989586621679968452_a41oh v1 v2) = (Add v1) v2
    instance Arbitrary a_a40Cj =>
             FixArbitrary (Pat_bar_2_6989586621679968450_a41of [Char] a_a40Cj) (Exp [Char] a_a40Cj) where
      liftFix gen_6989586621679968454_a41oj
        = ((satisfy "bar#2")
             (\ pat_6989586621679968456_a41ol
                -> case step pat_6989586621679968456_a41ol of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621679968452_a41oh))
                   (smaller gen_6989586621679968454_a41oj)))
               (smaller gen_6989586621679968454_a41oj))
    instance Branching (Pat_bar_2_6989586621679968450_a41of [Char] a_a40Cj) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621679968450_a41of
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a45NR (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type) self_a45NT
      where
        Mk_Val_a45NS :: forall (v_a45L2 :: GHC.Types.Type)
                               (a_a45L3 :: GHC.Types.Type)
                               self_a45NT.
                        a_a45L3
                        -> Rep_Val_a45NR (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type) self_a45NT
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a45NR (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type)) (Exp v_a45L2 a_a45L3) where
      alg (Mk_Val_a45NS v1) = Val v1
    instance (Arbitrary (v_a45L2 :: GHC.Types.Type),
              Arbitrary (a_a45L3 :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a45NR (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type)) (Exp v_a45L2 a_a45L3) where
      liftFix gen_a45NU = ((<*>) (pure Mk_Val_a45NS)) arbitrary
    instance Branching (Rep_Val_a45NR (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a45NR
    data Rep_Var_a45NV (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type) self_a45NX
      where
        Mk_Var_a45NW :: forall (v_a45L2 :: GHC.Types.Type)
                               (a_a45L3 :: GHC.Types.Type)
                               self_a45NX.
                        v_a45L2
                        -> Rep_Var_a45NV (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type) self_a45NX
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a45NV (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type)) (Exp v_a45L2 a_a45L3) where
      alg (Mk_Var_a45NW v1) = Var v1
    instance (Arbitrary (v_a45L2 :: GHC.Types.Type),
              Arbitrary (a_a45L3 :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a45NV (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type)) (Exp v_a45L2 a_a45L3) where
      liftFix gen_a45NY = ((<*>) (pure Mk_Var_a45NW)) arbitrary
    instance Branching (Rep_Var_a45NV (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a45NV
    data Rep_Add_a45NZ (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type) self_a45O1
      where
        Mk_Add_a45O0 :: forall (v_a45L2 :: GHC.Types.Type)
                               (a_a45L3 :: GHC.Types.Type)
                               self_a45O1.
                        self_a45O1
                        -> self_a45O1
                           -> Rep_Add_a45NZ (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type) self_a45O1
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a45NZ (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type)) (Exp v_a45L2 a_a45L3) where
      alg (Mk_Add_a45O0 v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a45L2 :: GHC.Types.Type),
              Arbitrary (a_a45L3 :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a45NZ (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type)) (Exp v_a45L2 a_a45L3) where
      liftFix gen_a45O2
        = ((<*>) (((<*>) (pure Mk_Add_a45O0)) (smaller gen_a45O2)))
            (smaller gen_a45O2)
    instance Branching (Rep_Add_a45NZ (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a45NZ
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621679986920_a46c9 (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type) self_a46cg
      where
        Pat_foo_1_6989586621679986922_a46cb :: forall (v_a45L2 :: GHC.Types.Type)
                                                      (a_a45L3 :: GHC.Types.Type)
                                                      self_a46cg.
                                               self_a46cg
                                               -> self_a46cg
                                                  -> self_a46cg
                                                     -> Pat_foo_1_6989586621679986920_a46c9 (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type) self_a46cg
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621679986920_a46c9 v_a45L2 a_a45L3) (Exp v_a45L2 a_a45L3) where
      alg (Pat_foo_1_6989586621679986922_a46cb v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a45L2, Arbitrary a_a45L3) =>
             FixArbitrary (Pat_foo_1_6989586621679986920_a46c9 v_a45L2 a_a45L3) (Exp v_a45L2 a_a45L3) where
      liftFix gen_6989586621679986924_a46cd
        = ((satisfy "foo#1")
             (\ pat_6989586621679986926_a46cf
                -> case step pat_6989586621679986926_a46cf of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621679986922_a46cb))
                       (smaller gen_6989586621679986924_a46cd)))
                   (smaller gen_6989586621679986924_a46cd)))
               (smaller gen_6989586621679986924_a46cd))
    instance Branching (Pat_foo_1_6989586621679986920_a46c9 v_a45L2 a_a45L3) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621679986920_a46c9
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621679986953_a46cG (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type) self_a46cN
      where
        Pat_foo_2_6989586621679986955_a46cI :: forall (v_a45L2 :: GHC.Types.Type)
                                                      (a_a45L3 :: GHC.Types.Type)
                                                      self_a46cN.
                                               a_a45L3
                                               -> self_a46cN
                                                  -> Pat_foo_2_6989586621679986953_a46cG (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type) self_a46cN
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621679986953_a46cG v_a45L2 a_a45L3) (Exp v_a45L2 a_a45L3) where
      alg (Pat_foo_2_6989586621679986955_a46cI v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a45L2, Arbitrary a_a45L3) =>
             FixArbitrary (Pat_foo_2_6989586621679986953_a46cG v_a45L2 a_a45L3) (Exp v_a45L2 a_a45L3) where
      liftFix gen_6989586621679986957_a46cK
        = ((satisfy "foo#2")
             (\ pat_6989586621679986959_a46cM
                -> case step pat_6989586621679986959_a46cM of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621679986955_a46cI)) arbitrary))
               (smaller gen_6989586621679986957_a46cK))
    instance Branching (Pat_foo_2_6989586621679986953_a46cG v_a45L2 a_a45L3) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621679986953_a46cG
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621679988167_a46wg (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type) self_a46wn
      where
        Pat_bar_1_6989586621679988169_a46wi :: forall (v_a45L2 :: GHC.Types.Type)
                                                      (a_a45L3 :: GHC.Types.Type)
                                                      self_a46wn.
                                               a_a45L3
                                               -> Pat_bar_1_6989586621679988167_a46wg (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type) self_a46wn
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621679988167_a46wg [Char] a_a45L3) (Exp [Char] a_a45L3) where
      alg (Pat_bar_1_6989586621679988169_a46wi v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a45L3 =>
             FixArbitrary (Pat_bar_1_6989586621679988167_a46wg [Char] a_a45L3) (Exp [Char] a_a45L3) where
      liftFix gen_6989586621679988171_a46wk
        = ((satisfy "bar#1")
             (\ pat_6989586621679988173_a46wm
                -> case step pat_6989586621679988173_a46wm of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621679988169_a46wi)) arbitrary)
    instance Branching (Pat_bar_1_6989586621679988167_a46wg [Char] a_a45L3) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621679988167_a46wg
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621679988212_a46wZ (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type) self_a46x6
      where
        Pat_bar_2_6989586621679988214_a46x1 :: forall (v_a45L2 :: GHC.Types.Type)
                                                      (a_a45L3 :: GHC.Types.Type)
                                                      self_a46x6.
                                               self_a46x6
                                               -> self_a46x6
                                                  -> Pat_bar_2_6989586621679988212_a46wZ (v_a45L2 :: GHC.Types.Type) (a_a45L3 :: GHC.Types.Type) self_a46x6
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621679988212_a46wZ [Char] a_a45L3) (Exp [Char] a_a45L3) where
      alg (Pat_bar_2_6989586621679988214_a46x1 v1 v2) = (Add v1) v2
    instance Arbitrary a_a45L3 =>
             FixArbitrary (Pat_bar_2_6989586621679988212_a46wZ [Char] a_a45L3) (Exp [Char] a_a45L3) where
      liftFix gen_6989586621679988216_a46x3
        = ((satisfy "bar#2")
             (\ pat_6989586621679988218_a46x5
                -> case step pat_6989586621679988218_a46x5 of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621679988214_a46x1))
                   (smaller gen_6989586621679988216_a46x3)))
               (smaller gen_6989586621679988216_a46x3))
    instance Branching (Pat_bar_2_6989586621679988212_a46wZ [Char] a_a45L3) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621679988212_a46wZ
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a4auk (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type) self_a4aum
      where
        Mk_Val_a4aul :: forall (v_a4arv :: GHC.Types.Type)
                               (a_a4arw :: GHC.Types.Type)
                               self_a4aum.
                        a_a4arw
                        -> Rep_Val_a4auk (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type) self_a4aum
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a4auk (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type)) (Exp v_a4arv a_a4arw) where
      alg (Mk_Val_a4aul v1) = Val v1
    instance (Arbitrary (v_a4arv :: GHC.Types.Type),
              Arbitrary (a_a4arw :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a4auk (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type)) (Exp v_a4arv a_a4arw) where
      liftFix gen_a4aun = ((<*>) (pure Mk_Val_a4aul)) arbitrary
    instance Branching (Rep_Val_a4auk (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a4auk
    data Rep_Var_a4auo (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type) self_a4auq
      where
        Mk_Var_a4aup :: forall (v_a4arv :: GHC.Types.Type)
                               (a_a4arw :: GHC.Types.Type)
                               self_a4auq.
                        v_a4arv
                        -> Rep_Var_a4auo (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type) self_a4auq
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a4auo (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type)) (Exp v_a4arv a_a4arw) where
      alg (Mk_Var_a4aup v1) = Var v1
    instance (Arbitrary (v_a4arv :: GHC.Types.Type),
              Arbitrary (a_a4arw :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a4auo (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type)) (Exp v_a4arv a_a4arw) where
      liftFix gen_a4aur = ((<*>) (pure Mk_Var_a4aup)) arbitrary
    instance Branching (Rep_Var_a4auo (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a4auo
    data Rep_Add_a4aus (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type) self_a4auu
      where
        Mk_Add_a4aut :: forall (v_a4arv :: GHC.Types.Type)
                               (a_a4arw :: GHC.Types.Type)
                               self_a4auu.
                        self_a4auu
                        -> self_a4auu
                           -> Rep_Add_a4aus (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type) self_a4auu
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a4aus (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type)) (Exp v_a4arv a_a4arw) where
      alg (Mk_Add_a4aut v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a4arv :: GHC.Types.Type),
              Arbitrary (a_a4arw :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a4aus (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type)) (Exp v_a4arv a_a4arw) where
      liftFix gen_a4auv
        = ((<*>) (((<*>) (pure Mk_Add_a4aut)) (smaller gen_a4auv)))
            (smaller gen_a4auv)
    instance Branching (Rep_Add_a4aus (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a4aus
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680004929_a4aSC (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type) self_a4aSJ
      where
        Pat_foo_1_6989586621680004931_a4aSE :: forall (v_a4arv :: GHC.Types.Type)
                                                      (a_a4arw :: GHC.Types.Type)
                                                      self_a4aSJ.
                                               self_a4aSJ
                                               -> self_a4aSJ
                                                  -> self_a4aSJ
                                                     -> Pat_foo_1_6989586621680004929_a4aSC (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type) self_a4aSJ
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680004929_a4aSC v_a4arv a_a4arw) (Exp v_a4arv a_a4arw) where
      alg (Pat_foo_1_6989586621680004931_a4aSE v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a4arv, Arbitrary a_a4arw) =>
             FixArbitrary (Pat_foo_1_6989586621680004929_a4aSC v_a4arv a_a4arw) (Exp v_a4arv a_a4arw) where
      liftFix gen_6989586621680004933_a4aSG
        = ((satisfy "foo#1")
             (\ pat_6989586621680004935_a4aSI
                -> case step pat_6989586621680004935_a4aSI of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680004931_a4aSE))
                       (smaller gen_6989586621680004933_a4aSG)))
                   (smaller gen_6989586621680004933_a4aSG)))
               (smaller gen_6989586621680004933_a4aSG))
    instance Branching (Pat_foo_1_6989586621680004929_a4aSC v_a4arv a_a4arw) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680004929_a4aSC
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680004962_a4aT9 (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type) self_a4aTg
      where
        Pat_foo_2_6989586621680004964_a4aTb :: forall (v_a4arv :: GHC.Types.Type)
                                                      (a_a4arw :: GHC.Types.Type)
                                                      self_a4aTg.
                                               a_a4arw
                                               -> self_a4aTg
                                                  -> Pat_foo_2_6989586621680004962_a4aT9 (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type) self_a4aTg
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680004962_a4aT9 v_a4arv a_a4arw) (Exp v_a4arv a_a4arw) where
      alg (Pat_foo_2_6989586621680004964_a4aTb v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a4arv, Arbitrary a_a4arw) =>
             FixArbitrary (Pat_foo_2_6989586621680004962_a4aT9 v_a4arv a_a4arw) (Exp v_a4arv a_a4arw) where
      liftFix gen_6989586621680004966_a4aTd
        = ((satisfy "foo#2")
             (\ pat_6989586621680004968_a4aTf
                -> case step pat_6989586621680004968_a4aTf of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680004964_a4aTb)) arbitrary))
               (smaller gen_6989586621680004966_a4aTd))
    instance Branching (Pat_foo_2_6989586621680004962_a4aT9 v_a4arv a_a4arw) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680004962_a4aT9
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680006176_a4bcJ (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type) self_a4bcQ
      where
        Pat_bar_1_6989586621680006178_a4bcL :: forall (v_a4arv :: GHC.Types.Type)
                                                      (a_a4arw :: GHC.Types.Type)
                                                      self_a4bcQ.
                                               a_a4arw
                                               -> Pat_bar_1_6989586621680006176_a4bcJ (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type) self_a4bcQ
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680006176_a4bcJ [Char] a_a4arw) (Exp [Char] a_a4arw) where
      alg (Pat_bar_1_6989586621680006178_a4bcL v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a4arw =>
             FixArbitrary (Pat_bar_1_6989586621680006176_a4bcJ [Char] a_a4arw) (Exp [Char] a_a4arw) where
      liftFix gen_6989586621680006180_a4bcN
        = ((satisfy "bar#1")
             (\ pat_6989586621680006182_a4bcP
                -> case step pat_6989586621680006182_a4bcP of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680006178_a4bcL)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680006176_a4bcJ [Char] a_a4arw) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680006176_a4bcJ
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680006221_a4bds (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type) self_a4bdz
      where
        Pat_bar_2_6989586621680006223_a4bdu :: forall (v_a4arv :: GHC.Types.Type)
                                                      (a_a4arw :: GHC.Types.Type)
                                                      self_a4bdz.
                                               self_a4bdz
                                               -> self_a4bdz
                                                  -> Pat_bar_2_6989586621680006221_a4bds (v_a4arv :: GHC.Types.Type) (a_a4arw :: GHC.Types.Type) self_a4bdz
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680006221_a4bds [Char] a_a4arw) (Exp [Char] a_a4arw) where
      alg (Pat_bar_2_6989586621680006223_a4bdu v1 v2) = (Add v1) v2
    instance Arbitrary a_a4arw =>
             FixArbitrary (Pat_bar_2_6989586621680006221_a4bds [Char] a_a4arw) (Exp [Char] a_a4arw) where
      liftFix gen_6989586621680006225_a4bdw
        = ((satisfy "bar#2")
             (\ pat_6989586621680006227_a4bdy
                -> case step pat_6989586621680006227_a4bdy of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680006223_a4bdu))
                   (smaller gen_6989586621680006225_a4bdw)))
               (smaller gen_6989586621680006225_a4bdw))
    instance Branching (Pat_bar_2_6989586621680006221_a4bds [Char] a_a4arw) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680006221_a4bds
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a4eVq (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type) self_a4eVs
      where
        Mk_Val_a4eVr :: forall (v_a4eSB :: GHC.Types.Type)
                               (a_a4eSC :: GHC.Types.Type)
                               self_a4eVs.
                        a_a4eSC
                        -> Rep_Val_a4eVq (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type) self_a4eVs
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a4eVq (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type)) (Exp v_a4eSB a_a4eSC) where
      alg (Mk_Val_a4eVr v1) = Val v1
    instance (Arbitrary (v_a4eSB :: GHC.Types.Type),
              Arbitrary (a_a4eSC :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a4eVq (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type)) (Exp v_a4eSB a_a4eSC) where
      liftFix gen_a4eVt = ((<*>) (pure Mk_Val_a4eVr)) arbitrary
    instance Branching (Rep_Val_a4eVq (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a4eVq
    data Rep_Var_a4eVu (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type) self_a4eVw
      where
        Mk_Var_a4eVv :: forall (v_a4eSB :: GHC.Types.Type)
                               (a_a4eSC :: GHC.Types.Type)
                               self_a4eVw.
                        v_a4eSB
                        -> Rep_Var_a4eVu (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type) self_a4eVw
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a4eVu (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type)) (Exp v_a4eSB a_a4eSC) where
      alg (Mk_Var_a4eVv v1) = Var v1
    instance (Arbitrary (v_a4eSB :: GHC.Types.Type),
              Arbitrary (a_a4eSC :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a4eVu (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type)) (Exp v_a4eSB a_a4eSC) where
      liftFix gen_a4eVx = ((<*>) (pure Mk_Var_a4eVv)) arbitrary
    instance Branching (Rep_Var_a4eVu (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a4eVu
    data Rep_Add_a4eVy (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type) self_a4eVA
      where
        Mk_Add_a4eVz :: forall (v_a4eSB :: GHC.Types.Type)
                               (a_a4eSC :: GHC.Types.Type)
                               self_a4eVA.
                        self_a4eVA
                        -> self_a4eVA
                           -> Rep_Add_a4eVy (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type) self_a4eVA
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a4eVy (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type)) (Exp v_a4eSB a_a4eSC) where
      alg (Mk_Add_a4eVz v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a4eSB :: GHC.Types.Type),
              Arbitrary (a_a4eSC :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a4eVy (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type)) (Exp v_a4eSB a_a4eSC) where
      liftFix gen_a4eVB
        = ((<*>) (((<*>) (pure Mk_Add_a4eVz)) (smaller gen_a4eVB)))
            (smaller gen_a4eVB)
    instance Branching (Rep_Add_a4eVy (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a4eVy
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680021985_a4fjI (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type) self_a4fjP
      where
        Pat_foo_1_6989586621680021987_a4fjK :: forall (v_a4eSB :: GHC.Types.Type)
                                                      (a_a4eSC :: GHC.Types.Type)
                                                      self_a4fjP.
                                               self_a4fjP
                                               -> self_a4fjP
                                                  -> self_a4fjP
                                                     -> Pat_foo_1_6989586621680021985_a4fjI (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type) self_a4fjP
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680021985_a4fjI v_a4eSB a_a4eSC) (Exp v_a4eSB a_a4eSC) where
      alg (Pat_foo_1_6989586621680021987_a4fjK v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a4eSB, Arbitrary a_a4eSC) =>
             FixArbitrary (Pat_foo_1_6989586621680021985_a4fjI v_a4eSB a_a4eSC) (Exp v_a4eSB a_a4eSC) where
      liftFix gen_6989586621680021989_a4fjM
        = ((satisfy "foo#1")
             (\ pat_6989586621680021991_a4fjO
                -> case step pat_6989586621680021991_a4fjO of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680021987_a4fjK))
                       (smaller gen_6989586621680021989_a4fjM)))
                   (smaller gen_6989586621680021989_a4fjM)))
               (smaller gen_6989586621680021989_a4fjM))
    instance Branching (Pat_foo_1_6989586621680021985_a4fjI v_a4eSB a_a4eSC) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680021985_a4fjI
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680022018_a4fkf (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type) self_a4fkm
      where
        Pat_foo_2_6989586621680022020_a4fkh :: forall (v_a4eSB :: GHC.Types.Type)
                                                      (a_a4eSC :: GHC.Types.Type)
                                                      self_a4fkm.
                                               a_a4eSC
                                               -> self_a4fkm
                                                  -> Pat_foo_2_6989586621680022018_a4fkf (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type) self_a4fkm
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680022018_a4fkf v_a4eSB a_a4eSC) (Exp v_a4eSB a_a4eSC) where
      alg (Pat_foo_2_6989586621680022020_a4fkh v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a4eSB, Arbitrary a_a4eSC) =>
             FixArbitrary (Pat_foo_2_6989586621680022018_a4fkf v_a4eSB a_a4eSC) (Exp v_a4eSB a_a4eSC) where
      liftFix gen_6989586621680022022_a4fkj
        = ((satisfy "foo#2")
             (\ pat_6989586621680022024_a4fkl
                -> case step pat_6989586621680022024_a4fkl of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680022020_a4fkh)) arbitrary))
               (smaller gen_6989586621680022022_a4fkj))
    instance Branching (Pat_foo_2_6989586621680022018_a4fkf v_a4eSB a_a4eSC) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680022018_a4fkf
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680023232_a4fDP (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type) self_a4fDW
      where
        Pat_bar_1_6989586621680023234_a4fDR :: forall (v_a4eSB :: GHC.Types.Type)
                                                      (a_a4eSC :: GHC.Types.Type)
                                                      self_a4fDW.
                                               a_a4eSC
                                               -> Pat_bar_1_6989586621680023232_a4fDP (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type) self_a4fDW
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680023232_a4fDP [Char] a_a4eSC) (Exp [Char] a_a4eSC) where
      alg (Pat_bar_1_6989586621680023234_a4fDR v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a4eSC =>
             FixArbitrary (Pat_bar_1_6989586621680023232_a4fDP [Char] a_a4eSC) (Exp [Char] a_a4eSC) where
      liftFix gen_6989586621680023236_a4fDT
        = ((satisfy "bar#1")
             (\ pat_6989586621680023238_a4fDV
                -> case step pat_6989586621680023238_a4fDV of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680023234_a4fDR)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680023232_a4fDP [Char] a_a4eSC) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680023232_a4fDP
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680023277_a4fEy (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type) self_a4fEF
      where
        Pat_bar_2_6989586621680023279_a4fEA :: forall (v_a4eSB :: GHC.Types.Type)
                                                      (a_a4eSC :: GHC.Types.Type)
                                                      self_a4fEF.
                                               self_a4fEF
                                               -> self_a4fEF
                                                  -> Pat_bar_2_6989586621680023277_a4fEy (v_a4eSB :: GHC.Types.Type) (a_a4eSC :: GHC.Types.Type) self_a4fEF
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680023277_a4fEy [Char] a_a4eSC) (Exp [Char] a_a4eSC) where
      alg (Pat_bar_2_6989586621680023279_a4fEA v1 v2) = (Add v1) v2
    instance Arbitrary a_a4eSC =>
             FixArbitrary (Pat_bar_2_6989586621680023277_a4fEy [Char] a_a4eSC) (Exp [Char] a_a4eSC) where
      liftFix gen_6989586621680023281_a4fEC
        = ((satisfy "bar#2")
             (\ pat_6989586621680023283_a4fEE
                -> case step pat_6989586621680023283_a4fEE of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680023279_a4fEA))
                   (smaller gen_6989586621680023281_a4fEC)))
               (smaller gen_6989586621680023281_a4fEC))
    instance Branching (Pat_bar_2_6989586621680023277_a4fEy [Char] a_a4eSC) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680023277_a4fEy
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a4jDj (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type) self_a4jDl
      where
        Mk_Val_a4jDk :: forall (v_a4jAu :: GHC.Types.Type)
                               (a_a4jAv :: GHC.Types.Type)
                               self_a4jDl.
                        a_a4jAv
                        -> Rep_Val_a4jDj (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type) self_a4jDl
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a4jDj (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type)) (Exp v_a4jAu a_a4jAv) where
      alg (Mk_Val_a4jDk v1) = Val v1
    instance (Arbitrary (v_a4jAu :: GHC.Types.Type),
              Arbitrary (a_a4jAv :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a4jDj (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type)) (Exp v_a4jAu a_a4jAv) where
      liftFix gen_a4jDm = ((<*>) (pure Mk_Val_a4jDk)) arbitrary
    instance Branching (Rep_Val_a4jDj (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a4jDj
    data Rep_Var_a4jDn (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type) self_a4jDp
      where
        Mk_Var_a4jDo :: forall (v_a4jAu :: GHC.Types.Type)
                               (a_a4jAv :: GHC.Types.Type)
                               self_a4jDp.
                        v_a4jAu
                        -> Rep_Var_a4jDn (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type) self_a4jDp
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a4jDn (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type)) (Exp v_a4jAu a_a4jAv) where
      alg (Mk_Var_a4jDo v1) = Var v1
    instance (Arbitrary (v_a4jAu :: GHC.Types.Type),
              Arbitrary (a_a4jAv :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a4jDn (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type)) (Exp v_a4jAu a_a4jAv) where
      liftFix gen_a4jDq = ((<*>) (pure Mk_Var_a4jDo)) arbitrary
    instance Branching (Rep_Var_a4jDn (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a4jDn
    data Rep_Add_a4jDr (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type) self_a4jDt
      where
        Mk_Add_a4jDs :: forall (v_a4jAu :: GHC.Types.Type)
                               (a_a4jAv :: GHC.Types.Type)
                               self_a4jDt.
                        self_a4jDt
                        -> self_a4jDt
                           -> Rep_Add_a4jDr (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type) self_a4jDt
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a4jDr (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type)) (Exp v_a4jAu a_a4jAv) where
      alg (Mk_Add_a4jDs v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a4jAu :: GHC.Types.Type),
              Arbitrary (a_a4jAv :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a4jDr (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type)) (Exp v_a4jAu a_a4jAv) where
      liftFix gen_a4jDu
        = ((<*>) (((<*>) (pure Mk_Add_a4jDs)) (smaller gen_a4jDu)))
            (smaller gen_a4jDu)
    instance Branching (Rep_Add_a4jDr (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a4jDr
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680040082_a4k1B (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type) self_a4k1I
      where
        Pat_foo_1_6989586621680040084_a4k1D :: forall (v_a4jAu :: GHC.Types.Type)
                                                      (a_a4jAv :: GHC.Types.Type)
                                                      self_a4k1I.
                                               self_a4k1I
                                               -> self_a4k1I
                                                  -> self_a4k1I
                                                     -> Pat_foo_1_6989586621680040082_a4k1B (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type) self_a4k1I
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680040082_a4k1B v_a4jAu a_a4jAv) (Exp v_a4jAu a_a4jAv) where
      alg (Pat_foo_1_6989586621680040084_a4k1D v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a4jAu, Arbitrary a_a4jAv) =>
             FixArbitrary (Pat_foo_1_6989586621680040082_a4k1B v_a4jAu a_a4jAv) (Exp v_a4jAu a_a4jAv) where
      liftFix gen_6989586621680040086_a4k1F
        = ((satisfy "foo#1")
             (\ pat_6989586621680040088_a4k1H
                -> case step pat_6989586621680040088_a4k1H of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680040084_a4k1D))
                       (smaller gen_6989586621680040086_a4k1F)))
                   (smaller gen_6989586621680040086_a4k1F)))
               (smaller gen_6989586621680040086_a4k1F))
    instance Branching (Pat_foo_1_6989586621680040082_a4k1B v_a4jAu a_a4jAv) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680040082_a4k1B
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680040115_a4k28 (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type) self_a4k2f
      where
        Pat_foo_2_6989586621680040117_a4k2a :: forall (v_a4jAu :: GHC.Types.Type)
                                                      (a_a4jAv :: GHC.Types.Type)
                                                      self_a4k2f.
                                               a_a4jAv
                                               -> self_a4k2f
                                                  -> Pat_foo_2_6989586621680040115_a4k28 (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type) self_a4k2f
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680040115_a4k28 v_a4jAu a_a4jAv) (Exp v_a4jAu a_a4jAv) where
      alg (Pat_foo_2_6989586621680040117_a4k2a v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a4jAu, Arbitrary a_a4jAv) =>
             FixArbitrary (Pat_foo_2_6989586621680040115_a4k28 v_a4jAu a_a4jAv) (Exp v_a4jAu a_a4jAv) where
      liftFix gen_6989586621680040119_a4k2c
        = ((satisfy "foo#2")
             (\ pat_6989586621680040121_a4k2e
                -> case step pat_6989586621680040121_a4k2e of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680040117_a4k2a)) arbitrary))
               (smaller gen_6989586621680040119_a4k2c))
    instance Branching (Pat_foo_2_6989586621680040115_a4k28 v_a4jAu a_a4jAv) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680040115_a4k28
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680041329_a4klI (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type) self_a4klP
      where
        Pat_bar_1_6989586621680041331_a4klK :: forall (v_a4jAu :: GHC.Types.Type)
                                                      (a_a4jAv :: GHC.Types.Type)
                                                      self_a4klP.
                                               a_a4jAv
                                               -> Pat_bar_1_6989586621680041329_a4klI (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type) self_a4klP
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680041329_a4klI [Char] a_a4jAv) (Exp [Char] a_a4jAv) where
      alg (Pat_bar_1_6989586621680041331_a4klK v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a4jAv =>
             FixArbitrary (Pat_bar_1_6989586621680041329_a4klI [Char] a_a4jAv) (Exp [Char] a_a4jAv) where
      liftFix gen_6989586621680041333_a4klM
        = ((satisfy "bar#1")
             (\ pat_6989586621680041335_a4klO
                -> case step pat_6989586621680041335_a4klO of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680041331_a4klK)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680041329_a4klI [Char] a_a4jAv) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680041329_a4klI
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680041374_a4kmr (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type) self_a4kmy
      where
        Pat_bar_2_6989586621680041376_a4kmt :: forall (v_a4jAu :: GHC.Types.Type)
                                                      (a_a4jAv :: GHC.Types.Type)
                                                      self_a4kmy.
                                               self_a4kmy
                                               -> self_a4kmy
                                                  -> Pat_bar_2_6989586621680041374_a4kmr (v_a4jAu :: GHC.Types.Type) (a_a4jAv :: GHC.Types.Type) self_a4kmy
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680041374_a4kmr [Char] a_a4jAv) (Exp [Char] a_a4jAv) where
      alg (Pat_bar_2_6989586621680041376_a4kmt v1 v2) = (Add v1) v2
    instance Arbitrary a_a4jAv =>
             FixArbitrary (Pat_bar_2_6989586621680041374_a4kmr [Char] a_a4jAv) (Exp [Char] a_a4jAv) where
      liftFix gen_6989586621680041378_a4kmv
        = ((satisfy "bar#2")
             (\ pat_6989586621680041380_a4kmx
                -> case step pat_6989586621680041380_a4kmx of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680041376_a4kmt))
                   (smaller gen_6989586621680041378_a4kmv)))
               (smaller gen_6989586621680041378_a4kmv))
    instance Branching (Pat_bar_2_6989586621680041374_a4kmr [Char] a_a4jAv) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680041374_a4kmr
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a4ojT (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type) self_a4ojV
      where
        Mk_Val_a4ojU :: forall (v_a4oh4 :: GHC.Types.Type)
                               (a_a4oh5 :: GHC.Types.Type)
                               self_a4ojV.
                        a_a4oh5
                        -> Rep_Val_a4ojT (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type) self_a4ojV
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a4ojT (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type)) (Exp v_a4oh4 a_a4oh5) where
      alg (Mk_Val_a4ojU v1) = Val v1
    instance (Arbitrary (v_a4oh4 :: GHC.Types.Type),
              Arbitrary (a_a4oh5 :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a4ojT (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type)) (Exp v_a4oh4 a_a4oh5) where
      liftFix gen_a4ojW = ((<*>) (pure Mk_Val_a4ojU)) arbitrary
    instance Branching (Rep_Val_a4ojT (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a4ojT
    data Rep_Var_a4ojX (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type) self_a4ojZ
      where
        Mk_Var_a4ojY :: forall (v_a4oh4 :: GHC.Types.Type)
                               (a_a4oh5 :: GHC.Types.Type)
                               self_a4ojZ.
                        v_a4oh4
                        -> Rep_Var_a4ojX (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type) self_a4ojZ
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a4ojX (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type)) (Exp v_a4oh4 a_a4oh5) where
      alg (Mk_Var_a4ojY v1) = Var v1
    instance (Arbitrary (v_a4oh4 :: GHC.Types.Type),
              Arbitrary (a_a4oh5 :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a4ojX (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type)) (Exp v_a4oh4 a_a4oh5) where
      liftFix gen_a4ok0 = ((<*>) (pure Mk_Var_a4ojY)) arbitrary
    instance Branching (Rep_Var_a4ojX (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a4ojX
    data Rep_Add_a4ok1 (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type) self_a4ok3
      where
        Mk_Add_a4ok2 :: forall (v_a4oh4 :: GHC.Types.Type)
                               (a_a4oh5 :: GHC.Types.Type)
                               self_a4ok3.
                        self_a4ok3
                        -> self_a4ok3
                           -> Rep_Add_a4ok1 (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type) self_a4ok3
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a4ok1 (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type)) (Exp v_a4oh4 a_a4oh5) where
      alg (Mk_Add_a4ok2 v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a4oh4 :: GHC.Types.Type),
              Arbitrary (a_a4oh5 :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a4ok1 (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type)) (Exp v_a4oh4 a_a4oh5) where
      liftFix gen_a4ok4
        = ((<*>) (((<*>) (pure Mk_Add_a4ok2)) (smaller gen_a4ok4)))
            (smaller gen_a4ok4)
    instance Branching (Rep_Add_a4ok1 (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a4ok1
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680058098_a4oIb (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type) self_a4oIi
      where
        Pat_foo_1_6989586621680058100_a4oId :: forall (v_a4oh4 :: GHC.Types.Type)
                                                      (a_a4oh5 :: GHC.Types.Type)
                                                      self_a4oIi.
                                               self_a4oIi
                                               -> self_a4oIi
                                                  -> self_a4oIi
                                                     -> Pat_foo_1_6989586621680058098_a4oIb (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type) self_a4oIi
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680058098_a4oIb v_a4oh4 a_a4oh5) (Exp v_a4oh4 a_a4oh5) where
      alg (Pat_foo_1_6989586621680058100_a4oId v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a4oh4, Arbitrary a_a4oh5) =>
             FixArbitrary (Pat_foo_1_6989586621680058098_a4oIb v_a4oh4 a_a4oh5) (Exp v_a4oh4 a_a4oh5) where
      liftFix gen_6989586621680058102_a4oIf
        = ((satisfy "foo#1")
             (\ pat_6989586621680058104_a4oIh
                -> case step pat_6989586621680058104_a4oIh of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680058100_a4oId))
                       (smaller gen_6989586621680058102_a4oIf)))
                   (smaller gen_6989586621680058102_a4oIf)))
               (smaller gen_6989586621680058102_a4oIf))
    instance Branching (Pat_foo_1_6989586621680058098_a4oIb v_a4oh4 a_a4oh5) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680058098_a4oIb
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680058131_a4oII (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type) self_a4oIP
      where
        Pat_foo_2_6989586621680058133_a4oIK :: forall (v_a4oh4 :: GHC.Types.Type)
                                                      (a_a4oh5 :: GHC.Types.Type)
                                                      self_a4oIP.
                                               a_a4oh5
                                               -> self_a4oIP
                                                  -> Pat_foo_2_6989586621680058131_a4oII (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type) self_a4oIP
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680058131_a4oII v_a4oh4 a_a4oh5) (Exp v_a4oh4 a_a4oh5) where
      alg (Pat_foo_2_6989586621680058133_a4oIK v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a4oh4, Arbitrary a_a4oh5) =>
             FixArbitrary (Pat_foo_2_6989586621680058131_a4oII v_a4oh4 a_a4oh5) (Exp v_a4oh4 a_a4oh5) where
      liftFix gen_6989586621680058135_a4oIM
        = ((satisfy "foo#2")
             (\ pat_6989586621680058137_a4oIO
                -> case step pat_6989586621680058137_a4oIO of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680058133_a4oIK)) arbitrary))
               (smaller gen_6989586621680058135_a4oIM))
    instance Branching (Pat_foo_2_6989586621680058131_a4oII v_a4oh4 a_a4oh5) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680058131_a4oII
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680059345_a4p2i (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type) self_a4p2p
      where
        Pat_bar_1_6989586621680059347_a4p2k :: forall (v_a4oh4 :: GHC.Types.Type)
                                                      (a_a4oh5 :: GHC.Types.Type)
                                                      self_a4p2p.
                                               a_a4oh5
                                               -> Pat_bar_1_6989586621680059345_a4p2i (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type) self_a4p2p
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680059345_a4p2i [Char] a_a4oh5) (Exp [Char] a_a4oh5) where
      alg (Pat_bar_1_6989586621680059347_a4p2k v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a4oh5 =>
             FixArbitrary (Pat_bar_1_6989586621680059345_a4p2i [Char] a_a4oh5) (Exp [Char] a_a4oh5) where
      liftFix gen_6989586621680059349_a4p2m
        = ((satisfy "bar#1")
             (\ pat_6989586621680059351_a4p2o
                -> case step pat_6989586621680059351_a4p2o of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680059347_a4p2k)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680059345_a4p2i [Char] a_a4oh5) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680059345_a4p2i
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680059390_a4p31 (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type) self_a4p38
      where
        Pat_bar_2_6989586621680059392_a4p33 :: forall (v_a4oh4 :: GHC.Types.Type)
                                                      (a_a4oh5 :: GHC.Types.Type)
                                                      self_a4p38.
                                               self_a4p38
                                               -> self_a4p38
                                                  -> Pat_bar_2_6989586621680059390_a4p31 (v_a4oh4 :: GHC.Types.Type) (a_a4oh5 :: GHC.Types.Type) self_a4p38
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680059390_a4p31 [Char] a_a4oh5) (Exp [Char] a_a4oh5) where
      alg (Pat_bar_2_6989586621680059392_a4p33 v1 v2) = (Add v1) v2
    instance Arbitrary a_a4oh5 =>
             FixArbitrary (Pat_bar_2_6989586621680059390_a4p31 [Char] a_a4oh5) (Exp [Char] a_a4oh5) where
      liftFix gen_6989586621680059394_a4p35
        = ((satisfy "bar#2")
             (\ pat_6989586621680059396_a4p37
                -> case step pat_6989586621680059396_a4p37 of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680059392_a4p33))
                   (smaller gen_6989586621680059394_a4p35)))
               (smaller gen_6989586621680059394_a4p35))
    instance Branching (Pat_bar_2_6989586621680059390_a4p31 [Char] a_a4oh5) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680059390_a4p31
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a4t2v (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type) self_a4t2x
      where
        Mk_Val_a4t2w :: forall (v_a4sZG :: GHC.Types.Type)
                               (a_a4sZH :: GHC.Types.Type)
                               self_a4t2x.
                        a_a4sZH
                        -> Rep_Val_a4t2v (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type) self_a4t2x
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a4t2v (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type)) (Exp v_a4sZG a_a4sZH) where
      alg (Mk_Val_a4t2w v1) = Val v1
    instance (Arbitrary (v_a4sZG :: GHC.Types.Type),
              Arbitrary (a_a4sZH :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a4t2v (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type)) (Exp v_a4sZG a_a4sZH) where
      liftFix gen_a4t2y = ((<*>) (pure Mk_Val_a4t2w)) arbitrary
    instance Branching (Rep_Val_a4t2v (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a4t2v
    data Rep_Var_a4t2z (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type) self_a4t2B
      where
        Mk_Var_a4t2A :: forall (v_a4sZG :: GHC.Types.Type)
                               (a_a4sZH :: GHC.Types.Type)
                               self_a4t2B.
                        v_a4sZG
                        -> Rep_Var_a4t2z (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type) self_a4t2B
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a4t2z (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type)) (Exp v_a4sZG a_a4sZH) where
      alg (Mk_Var_a4t2A v1) = Var v1
    instance (Arbitrary (v_a4sZG :: GHC.Types.Type),
              Arbitrary (a_a4sZH :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a4t2z (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type)) (Exp v_a4sZG a_a4sZH) where
      liftFix gen_a4t2C = ((<*>) (pure Mk_Var_a4t2A)) arbitrary
    instance Branching (Rep_Var_a4t2z (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a4t2z
    data Rep_Add_a4t2D (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type) self_a4t2F
      where
        Mk_Add_a4t2E :: forall (v_a4sZG :: GHC.Types.Type)
                               (a_a4sZH :: GHC.Types.Type)
                               self_a4t2F.
                        self_a4t2F
                        -> self_a4t2F
                           -> Rep_Add_a4t2D (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type) self_a4t2F
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a4t2D (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type)) (Exp v_a4sZG a_a4sZH) where
      alg (Mk_Add_a4t2E v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a4sZG :: GHC.Types.Type),
              Arbitrary (a_a4sZH :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a4t2D (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type)) (Exp v_a4sZG a_a4sZH) where
      liftFix gen_a4t2G
        = ((<*>) (((<*>) (pure Mk_Add_a4t2E)) (smaller gen_a4t2G)))
            (smaller gen_a4t2G)
    instance Branching (Rep_Add_a4t2D (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a4t2D
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680076240_a4tqN (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type) self_a4tqU
      where
        Pat_foo_1_6989586621680076242_a4tqP :: forall (v_a4sZG :: GHC.Types.Type)
                                                      (a_a4sZH :: GHC.Types.Type)
                                                      self_a4tqU.
                                               self_a4tqU
                                               -> self_a4tqU
                                                  -> self_a4tqU
                                                     -> Pat_foo_1_6989586621680076240_a4tqN (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type) self_a4tqU
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680076240_a4tqN v_a4sZG a_a4sZH) (Exp v_a4sZG a_a4sZH) where
      alg (Pat_foo_1_6989586621680076242_a4tqP v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a4sZG, Arbitrary a_a4sZH) =>
             FixArbitrary (Pat_foo_1_6989586621680076240_a4tqN v_a4sZG a_a4sZH) (Exp v_a4sZG a_a4sZH) where
      liftFix gen_6989586621680076244_a4tqR
        = ((satisfy "foo#1")
             (\ pat_6989586621680076246_a4tqT
                -> case step pat_6989586621680076246_a4tqT of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680076242_a4tqP))
                       (smaller gen_6989586621680076244_a4tqR)))
                   (smaller gen_6989586621680076244_a4tqR)))
               (smaller gen_6989586621680076244_a4tqR))
    instance Branching (Pat_foo_1_6989586621680076240_a4tqN v_a4sZG a_a4sZH) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680076240_a4tqN
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680076273_a4trk (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type) self_a4trr
      where
        Pat_foo_2_6989586621680076275_a4trm :: forall (v_a4sZG :: GHC.Types.Type)
                                                      (a_a4sZH :: GHC.Types.Type)
                                                      self_a4trr.
                                               a_a4sZH
                                               -> self_a4trr
                                                  -> Pat_foo_2_6989586621680076273_a4trk (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type) self_a4trr
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680076273_a4trk v_a4sZG a_a4sZH) (Exp v_a4sZG a_a4sZH) where
      alg (Pat_foo_2_6989586621680076275_a4trm v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a4sZG, Arbitrary a_a4sZH) =>
             FixArbitrary (Pat_foo_2_6989586621680076273_a4trk v_a4sZG a_a4sZH) (Exp v_a4sZG a_a4sZH) where
      liftFix gen_6989586621680076277_a4tro
        = ((satisfy "foo#2")
             (\ pat_6989586621680076279_a4trq
                -> case step pat_6989586621680076279_a4trq of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680076275_a4trm)) arbitrary))
               (smaller gen_6989586621680076277_a4tro))
    instance Branching (Pat_foo_2_6989586621680076273_a4trk v_a4sZG a_a4sZH) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680076273_a4trk
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680077487_a4tKU (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type) self_a4tL1
      where
        Pat_bar_1_6989586621680077489_a4tKW :: forall (v_a4sZG :: GHC.Types.Type)
                                                      (a_a4sZH :: GHC.Types.Type)
                                                      self_a4tL1.
                                               a_a4sZH
                                               -> Pat_bar_1_6989586621680077487_a4tKU (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type) self_a4tL1
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680077487_a4tKU [Char] a_a4sZH) (Exp [Char] a_a4sZH) where
      alg (Pat_bar_1_6989586621680077489_a4tKW v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a4sZH =>
             FixArbitrary (Pat_bar_1_6989586621680077487_a4tKU [Char] a_a4sZH) (Exp [Char] a_a4sZH) where
      liftFix gen_6989586621680077491_a4tKY
        = ((satisfy "bar#1")
             (\ pat_6989586621680077493_a4tL0
                -> case step pat_6989586621680077493_a4tL0 of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680077489_a4tKW)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680077487_a4tKU [Char] a_a4sZH) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680077487_a4tKU
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680077532_a4tLD (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type) self_a4tLK
      where
        Pat_bar_2_6989586621680077534_a4tLF :: forall (v_a4sZG :: GHC.Types.Type)
                                                      (a_a4sZH :: GHC.Types.Type)
                                                      self_a4tLK.
                                               self_a4tLK
                                               -> self_a4tLK
                                                  -> Pat_bar_2_6989586621680077532_a4tLD (v_a4sZG :: GHC.Types.Type) (a_a4sZH :: GHC.Types.Type) self_a4tLK
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680077532_a4tLD [Char] a_a4sZH) (Exp [Char] a_a4sZH) where
      alg (Pat_bar_2_6989586621680077534_a4tLF v1 v2) = (Add v1) v2
    instance Arbitrary a_a4sZH =>
             FixArbitrary (Pat_bar_2_6989586621680077532_a4tLD [Char] a_a4sZH) (Exp [Char] a_a4sZH) where
      liftFix gen_6989586621680077536_a4tLH
        = ((satisfy "bar#2")
             (\ pat_6989586621680077538_a4tLJ
                -> case step pat_6989586621680077538_a4tLJ of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680077534_a4tLF))
                   (smaller gen_6989586621680077536_a4tLH)))
               (smaller gen_6989586621680077536_a4tLH))
    instance Branching (Pat_bar_2_6989586621680077532_a4tLD [Char] a_a4sZH) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680077532_a4tLD
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a4uCm (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type) self_a4uCo
      where
        Mk_Val_a4uCn :: forall (v_a4uzx :: GHC.Types.Type)
                               (a_a4uzy :: GHC.Types.Type)
                               self_a4uCo.
                        a_a4uzy
                        -> Rep_Val_a4uCm (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type) self_a4uCo
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a4uCm (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type)) (Exp v_a4uzx a_a4uzy) where
      alg (Mk_Val_a4uCn v1) = Val v1
    instance (Arbitrary (v_a4uzx :: GHC.Types.Type),
              Arbitrary (a_a4uzy :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a4uCm (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type)) (Exp v_a4uzx a_a4uzy) where
      liftFix gen_a4uCp = ((<*>) (pure Mk_Val_a4uCn)) arbitrary
    instance Branching (Rep_Val_a4uCm (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a4uCm
    data Rep_Var_a4uCq (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type) self_a4uCs
      where
        Mk_Var_a4uCr :: forall (v_a4uzx :: GHC.Types.Type)
                               (a_a4uzy :: GHC.Types.Type)
                               self_a4uCs.
                        v_a4uzx
                        -> Rep_Var_a4uCq (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type) self_a4uCs
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a4uCq (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type)) (Exp v_a4uzx a_a4uzy) where
      alg (Mk_Var_a4uCr v1) = Var v1
    instance (Arbitrary (v_a4uzx :: GHC.Types.Type),
              Arbitrary (a_a4uzy :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a4uCq (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type)) (Exp v_a4uzx a_a4uzy) where
      liftFix gen_a4uCt = ((<*>) (pure Mk_Var_a4uCr)) arbitrary
    instance Branching (Rep_Var_a4uCq (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a4uCq
    data Rep_Add_a4uCu (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type) self_a4uCw
      where
        Mk_Add_a4uCv :: forall (v_a4uzx :: GHC.Types.Type)
                               (a_a4uzy :: GHC.Types.Type)
                               self_a4uCw.
                        self_a4uCw
                        -> self_a4uCw
                           -> Rep_Add_a4uCu (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type) self_a4uCw
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a4uCu (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type)) (Exp v_a4uzx a_a4uzy) where
      alg (Mk_Add_a4uCv v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a4uzx :: GHC.Types.Type),
              Arbitrary (a_a4uzy :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a4uCu (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type)) (Exp v_a4uzx a_a4uzy) where
      liftFix gen_a4uCx
        = ((<*>) (((<*>) (pure Mk_Add_a4uCv)) (smaller gen_a4uCx)))
            (smaller gen_a4uCx)
    instance Branching (Rep_Add_a4uCu (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a4uCu
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680082307_a4v0E (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type) self_a4v0L
      where
        Pat_foo_1_6989586621680082309_a4v0G :: forall (v_a4uzx :: GHC.Types.Type)
                                                      (a_a4uzy :: GHC.Types.Type)
                                                      self_a4v0L.
                                               self_a4v0L
                                               -> self_a4v0L
                                                  -> self_a4v0L
                                                     -> Pat_foo_1_6989586621680082307_a4v0E (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type) self_a4v0L
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680082307_a4v0E v_a4uzx a_a4uzy) (Exp v_a4uzx a_a4uzy) where
      alg (Pat_foo_1_6989586621680082309_a4v0G v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a4uzx, Arbitrary a_a4uzy) =>
             FixArbitrary (Pat_foo_1_6989586621680082307_a4v0E v_a4uzx a_a4uzy) (Exp v_a4uzx a_a4uzy) where
      liftFix gen_6989586621680082311_a4v0I
        = ((satisfy "foo#1")
             (\ pat_6989586621680082313_a4v0K
                -> case step pat_6989586621680082313_a4v0K of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680082309_a4v0G))
                       (smaller gen_6989586621680082311_a4v0I)))
                   (smaller gen_6989586621680082311_a4v0I)))
               (smaller gen_6989586621680082311_a4v0I))
    instance Branching (Pat_foo_1_6989586621680082307_a4v0E v_a4uzx a_a4uzy) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680082307_a4v0E
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680082340_a4v1b (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type) self_a4v1i
      where
        Pat_foo_2_6989586621680082342_a4v1d :: forall (v_a4uzx :: GHC.Types.Type)
                                                      (a_a4uzy :: GHC.Types.Type)
                                                      self_a4v1i.
                                               a_a4uzy
                                               -> self_a4v1i
                                                  -> Pat_foo_2_6989586621680082340_a4v1b (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type) self_a4v1i
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680082340_a4v1b v_a4uzx a_a4uzy) (Exp v_a4uzx a_a4uzy) where
      alg (Pat_foo_2_6989586621680082342_a4v1d v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a4uzx, Arbitrary a_a4uzy) =>
             FixArbitrary (Pat_foo_2_6989586621680082340_a4v1b v_a4uzx a_a4uzy) (Exp v_a4uzx a_a4uzy) where
      liftFix gen_6989586621680082344_a4v1f
        = ((satisfy "foo#2")
             (\ pat_6989586621680082346_a4v1h
                -> case step pat_6989586621680082346_a4v1h of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680082342_a4v1d)) arbitrary))
               (smaller gen_6989586621680082344_a4v1f))
    instance Branching (Pat_foo_2_6989586621680082340_a4v1b v_a4uzx a_a4uzy) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680082340_a4v1b
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680083554_a4vkL (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type) self_a4vkS
      where
        Pat_bar_1_6989586621680083556_a4vkN :: forall (v_a4uzx :: GHC.Types.Type)
                                                      (a_a4uzy :: GHC.Types.Type)
                                                      self_a4vkS.
                                               a_a4uzy
                                               -> Pat_bar_1_6989586621680083554_a4vkL (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type) self_a4vkS
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680083554_a4vkL [Char] a_a4uzy) (Exp [Char] a_a4uzy) where
      alg (Pat_bar_1_6989586621680083556_a4vkN v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a4uzy =>
             FixArbitrary (Pat_bar_1_6989586621680083554_a4vkL [Char] a_a4uzy) (Exp [Char] a_a4uzy) where
      liftFix gen_6989586621680083558_a4vkP
        = ((satisfy "bar#1")
             (\ pat_6989586621680083560_a4vkR
                -> case step pat_6989586621680083560_a4vkR of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680083556_a4vkN)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680083554_a4vkL [Char] a_a4uzy) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680083554_a4vkL
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680083599_a4vlu (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type) self_a4vlB
      where
        Pat_bar_2_6989586621680083601_a4vlw :: forall (v_a4uzx :: GHC.Types.Type)
                                                      (a_a4uzy :: GHC.Types.Type)
                                                      self_a4vlB.
                                               self_a4vlB
                                               -> self_a4vlB
                                                  -> Pat_bar_2_6989586621680083599_a4vlu (v_a4uzx :: GHC.Types.Type) (a_a4uzy :: GHC.Types.Type) self_a4vlB
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680083599_a4vlu [Char] a_a4uzy) (Exp [Char] a_a4uzy) where
      alg (Pat_bar_2_6989586621680083601_a4vlw v1 v2) = (Add v1) v2
    instance Arbitrary a_a4uzy =>
             FixArbitrary (Pat_bar_2_6989586621680083599_a4vlu [Char] a_a4uzy) (Exp [Char] a_a4uzy) where
      liftFix gen_6989586621680083603_a4vly
        = ((satisfy "bar#2")
             (\ pat_6989586621680083605_a4vlA
                -> case step pat_6989586621680083605_a4vlA of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680083601_a4vlw))
                   (smaller gen_6989586621680083603_a4vly)))
               (smaller gen_6989586621680083603_a4vly))
    instance Branching (Pat_bar_2_6989586621680083599_a4vlu [Char] a_a4uzy) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680083599_a4vlu
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a4AF3 (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type) self_a4AF5
      where
        Mk_Val_a4AF4 :: forall (v_a4ACe :: GHC.Types.Type)
                               (a_a4ACf :: GHC.Types.Type)
                               self_a4AF5.
                        a_a4ACf
                        -> Rep_Val_a4AF3 (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type) self_a4AF5
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a4AF3 (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type)) (Exp v_a4ACe a_a4ACf) where
      alg (Mk_Val_a4AF4 v1) = Val v1
    instance (Arbitrary (v_a4ACe :: GHC.Types.Type),
              Arbitrary (a_a4ACf :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a4AF3 (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type)) (Exp v_a4ACe a_a4ACf) where
      liftFix gen_a4AF6 = ((<*>) (pure Mk_Val_a4AF4)) arbitrary
    instance Branching (Rep_Val_a4AF3 (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a4AF3
    data Rep_Var_a4AF7 (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type) self_a4AF9
      where
        Mk_Var_a4AF8 :: forall (v_a4ACe :: GHC.Types.Type)
                               (a_a4ACf :: GHC.Types.Type)
                               self_a4AF9.
                        v_a4ACe
                        -> Rep_Var_a4AF7 (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type) self_a4AF9
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a4AF7 (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type)) (Exp v_a4ACe a_a4ACf) where
      alg (Mk_Var_a4AF8 v1) = Var v1
    instance (Arbitrary (v_a4ACe :: GHC.Types.Type),
              Arbitrary (a_a4ACf :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a4AF7 (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type)) (Exp v_a4ACe a_a4ACf) where
      liftFix gen_a4AFa = ((<*>) (pure Mk_Var_a4AF8)) arbitrary
    instance Branching (Rep_Var_a4AF7 (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a4AF7
    data Rep_Add_a4AFb (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type) self_a4AFd
      where
        Mk_Add_a4AFc :: forall (v_a4ACe :: GHC.Types.Type)
                               (a_a4ACf :: GHC.Types.Type)
                               self_a4AFd.
                        self_a4AFd
                        -> self_a4AFd
                           -> Rep_Add_a4AFb (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type) self_a4AFd
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a4AFb (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type)) (Exp v_a4ACe a_a4ACf) where
      alg (Mk_Add_a4AFc v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a4ACe :: GHC.Types.Type),
              Arbitrary (a_a4ACf :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a4AFb (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type)) (Exp v_a4ACe a_a4ACf) where
      liftFix gen_a4AFe
        = ((<*>) (((<*>) (pure Mk_Add_a4AFc)) (smaller gen_a4AFe)))
            (smaller gen_a4AFe)
    instance Branching (Rep_Add_a4AFb (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a4AFb
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680105538_a4B3l (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type) self_a4B3s
      where
        Pat_foo_1_6989586621680105540_a4B3n :: forall (v_a4ACe :: GHC.Types.Type)
                                                      (a_a4ACf :: GHC.Types.Type)
                                                      self_a4B3s.
                                               self_a4B3s
                                               -> self_a4B3s
                                                  -> self_a4B3s
                                                     -> Pat_foo_1_6989586621680105538_a4B3l (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type) self_a4B3s
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680105538_a4B3l v_a4ACe a_a4ACf) (Exp v_a4ACe a_a4ACf) where
      alg (Pat_foo_1_6989586621680105540_a4B3n v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a4ACe, Arbitrary a_a4ACf) =>
             FixArbitrary (Pat_foo_1_6989586621680105538_a4B3l v_a4ACe a_a4ACf) (Exp v_a4ACe a_a4ACf) where
      liftFix gen_6989586621680105542_a4B3p
        = ((satisfy "foo#1")
             (\ pat_6989586621680105544_a4B3r
                -> case step pat_6989586621680105544_a4B3r of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680105540_a4B3n))
                       (smaller gen_6989586621680105542_a4B3p)))
                   (smaller gen_6989586621680105542_a4B3p)))
               (smaller gen_6989586621680105542_a4B3p))
    instance Branching (Pat_foo_1_6989586621680105538_a4B3l v_a4ACe a_a4ACf) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680105538_a4B3l
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680105571_a4B3S (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type) self_a4B3Z
      where
        Pat_foo_2_6989586621680105573_a4B3U :: forall (v_a4ACe :: GHC.Types.Type)
                                                      (a_a4ACf :: GHC.Types.Type)
                                                      self_a4B3Z.
                                               a_a4ACf
                                               -> self_a4B3Z
                                                  -> Pat_foo_2_6989586621680105571_a4B3S (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type) self_a4B3Z
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680105571_a4B3S v_a4ACe a_a4ACf) (Exp v_a4ACe a_a4ACf) where
      alg (Pat_foo_2_6989586621680105573_a4B3U v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a4ACe, Arbitrary a_a4ACf) =>
             FixArbitrary (Pat_foo_2_6989586621680105571_a4B3S v_a4ACe a_a4ACf) (Exp v_a4ACe a_a4ACf) where
      liftFix gen_6989586621680105575_a4B3W
        = ((satisfy "foo#2")
             (\ pat_6989586621680105577_a4B3Y
                -> case step pat_6989586621680105577_a4B3Y of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680105573_a4B3U)) arbitrary))
               (smaller gen_6989586621680105575_a4B3W))
    instance Branching (Pat_foo_2_6989586621680105571_a4B3S v_a4ACe a_a4ACf) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680105571_a4B3S
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680106785_a4Bns (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type) self_a4Bnz
      where
        Pat_bar_1_6989586621680106787_a4Bnu :: forall (v_a4ACe :: GHC.Types.Type)
                                                      (a_a4ACf :: GHC.Types.Type)
                                                      self_a4Bnz.
                                               a_a4ACf
                                               -> Pat_bar_1_6989586621680106785_a4Bns (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type) self_a4Bnz
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680106785_a4Bns [Char] a_a4ACf) (Exp [Char] a_a4ACf) where
      alg (Pat_bar_1_6989586621680106787_a4Bnu v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a4ACf =>
             FixArbitrary (Pat_bar_1_6989586621680106785_a4Bns [Char] a_a4ACf) (Exp [Char] a_a4ACf) where
      liftFix gen_6989586621680106789_a4Bnw
        = ((satisfy "bar#1")
             (\ pat_6989586621680106791_a4Bny
                -> case step pat_6989586621680106791_a4Bny of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680106787_a4Bnu)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680106785_a4Bns [Char] a_a4ACf) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680106785_a4Bns
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680106830_a4Bob (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type) self_a4Boi
      where
        Pat_bar_2_6989586621680106832_a4Bod :: forall (v_a4ACe :: GHC.Types.Type)
                                                      (a_a4ACf :: GHC.Types.Type)
                                                      self_a4Boi.
                                               self_a4Boi
                                               -> self_a4Boi
                                                  -> Pat_bar_2_6989586621680106830_a4Bob (v_a4ACe :: GHC.Types.Type) (a_a4ACf :: GHC.Types.Type) self_a4Boi
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680106830_a4Bob [Char] a_a4ACf) (Exp [Char] a_a4ACf) where
      alg (Pat_bar_2_6989586621680106832_a4Bod v1 v2) = (Add v1) v2
    instance Arbitrary a_a4ACf =>
             FixArbitrary (Pat_bar_2_6989586621680106830_a4Bob [Char] a_a4ACf) (Exp [Char] a_a4ACf) where
      liftFix gen_6989586621680106834_a4Bof
        = ((satisfy "bar#2")
             (\ pat_6989586621680106836_a4Boh
                -> case step pat_6989586621680106836_a4Boh of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680106832_a4Bod))
                   (smaller gen_6989586621680106834_a4Bof)))
               (smaller gen_6989586621680106834_a4Bof))
    instance Branching (Pat_bar_2_6989586621680106830_a4Bob [Char] a_a4ACf) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680106830_a4Bob
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a4Fm3 (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type) self_a4Fm5
      where
        Mk_Val_a4Fm4 :: forall (v_a4Fje :: GHC.Types.Type)
                               (a_a4Fjf :: GHC.Types.Type)
                               self_a4Fm5.
                        a_a4Fjf
                        -> Rep_Val_a4Fm3 (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type) self_a4Fm5
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a4Fm3 (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type)) (Exp v_a4Fje a_a4Fjf) where
      alg (Mk_Val_a4Fm4 v1) = Val v1
    instance (Arbitrary (v_a4Fje :: GHC.Types.Type),
              Arbitrary (a_a4Fjf :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a4Fm3 (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type)) (Exp v_a4Fje a_a4Fjf) where
      liftFix gen_a4Fm6 = ((<*>) (pure Mk_Val_a4Fm4)) arbitrary
    instance Branching (Rep_Val_a4Fm3 (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a4Fm3
    data Rep_Var_a4Fm7 (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type) self_a4Fm9
      where
        Mk_Var_a4Fm8 :: forall (v_a4Fje :: GHC.Types.Type)
                               (a_a4Fjf :: GHC.Types.Type)
                               self_a4Fm9.
                        v_a4Fje
                        -> Rep_Var_a4Fm7 (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type) self_a4Fm9
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a4Fm7 (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type)) (Exp v_a4Fje a_a4Fjf) where
      alg (Mk_Var_a4Fm8 v1) = Var v1
    instance (Arbitrary (v_a4Fje :: GHC.Types.Type),
              Arbitrary (a_a4Fjf :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a4Fm7 (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type)) (Exp v_a4Fje a_a4Fjf) where
      liftFix gen_a4Fma = ((<*>) (pure Mk_Var_a4Fm8)) arbitrary
    instance Branching (Rep_Var_a4Fm7 (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a4Fm7
    data Rep_Add_a4Fmb (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type) self_a4Fmd
      where
        Mk_Add_a4Fmc :: forall (v_a4Fje :: GHC.Types.Type)
                               (a_a4Fjf :: GHC.Types.Type)
                               self_a4Fmd.
                        self_a4Fmd
                        -> self_a4Fmd
                           -> Rep_Add_a4Fmb (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type) self_a4Fmd
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a4Fmb (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type)) (Exp v_a4Fje a_a4Fjf) where
      alg (Mk_Add_a4Fmc v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a4Fje :: GHC.Types.Type),
              Arbitrary (a_a4Fjf :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a4Fmb (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type)) (Exp v_a4Fje a_a4Fjf) where
      liftFix gen_a4Fme
        = ((<*>) (((<*>) (pure Mk_Add_a4Fmc)) (smaller gen_a4Fme)))
            (smaller gen_a4Fme)
    instance Branching (Rep_Add_a4Fmb (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a4Fmb
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680123580_a4FKl (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type) self_a4FKs
      where
        Pat_foo_1_6989586621680123582_a4FKn :: forall (v_a4Fje :: GHC.Types.Type)
                                                      (a_a4Fjf :: GHC.Types.Type)
                                                      self_a4FKs.
                                               self_a4FKs
                                               -> self_a4FKs
                                                  -> self_a4FKs
                                                     -> Pat_foo_1_6989586621680123580_a4FKl (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type) self_a4FKs
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680123580_a4FKl v_a4Fje a_a4Fjf) (Exp v_a4Fje a_a4Fjf) where
      alg (Pat_foo_1_6989586621680123582_a4FKn v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a4Fje, Arbitrary a_a4Fjf) =>
             FixArbitrary (Pat_foo_1_6989586621680123580_a4FKl v_a4Fje a_a4Fjf) (Exp v_a4Fje a_a4Fjf) where
      liftFix gen_6989586621680123584_a4FKp
        = ((satisfy "foo#1")
             (\ pat_6989586621680123586_a4FKr
                -> case step pat_6989586621680123586_a4FKr of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680123582_a4FKn))
                       (smaller gen_6989586621680123584_a4FKp)))
                   (smaller gen_6989586621680123584_a4FKp)))
               (smaller gen_6989586621680123584_a4FKp))
    instance Branching (Pat_foo_1_6989586621680123580_a4FKl v_a4Fje a_a4Fjf) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680123580_a4FKl
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680123613_a4FKS (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type) self_a4FKZ
      where
        Pat_foo_2_6989586621680123615_a4FKU :: forall (v_a4Fje :: GHC.Types.Type)
                                                      (a_a4Fjf :: GHC.Types.Type)
                                                      self_a4FKZ.
                                               a_a4Fjf
                                               -> self_a4FKZ
                                                  -> Pat_foo_2_6989586621680123613_a4FKS (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type) self_a4FKZ
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680123613_a4FKS v_a4Fje a_a4Fjf) (Exp v_a4Fje a_a4Fjf) where
      alg (Pat_foo_2_6989586621680123615_a4FKU v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a4Fje, Arbitrary a_a4Fjf) =>
             FixArbitrary (Pat_foo_2_6989586621680123613_a4FKS v_a4Fje a_a4Fjf) (Exp v_a4Fje a_a4Fjf) where
      liftFix gen_6989586621680123617_a4FKW
        = ((satisfy "foo#2")
             (\ pat_6989586621680123619_a4FKY
                -> case step pat_6989586621680123619_a4FKY of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680123615_a4FKU)) arbitrary))
               (smaller gen_6989586621680123617_a4FKW))
    instance Branching (Pat_foo_2_6989586621680123613_a4FKS v_a4Fje a_a4Fjf) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680123613_a4FKS
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680124827_a4G4s (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type) self_a4G4z
      where
        Pat_bar_1_6989586621680124829_a4G4u :: forall (v_a4Fje :: GHC.Types.Type)
                                                      (a_a4Fjf :: GHC.Types.Type)
                                                      self_a4G4z.
                                               a_a4Fjf
                                               -> Pat_bar_1_6989586621680124827_a4G4s (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type) self_a4G4z
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680124827_a4G4s [Char] a_a4Fjf) (Exp [Char] a_a4Fjf) where
      alg (Pat_bar_1_6989586621680124829_a4G4u v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a4Fjf =>
             FixArbitrary (Pat_bar_1_6989586621680124827_a4G4s [Char] a_a4Fjf) (Exp [Char] a_a4Fjf) where
      liftFix gen_6989586621680124831_a4G4w
        = ((satisfy "bar#1")
             (\ pat_6989586621680124833_a4G4y
                -> case step pat_6989586621680124833_a4G4y of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680124829_a4G4u)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680124827_a4G4s [Char] a_a4Fjf) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680124827_a4G4s
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680124872_a4G5b (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type) self_a4G5i
      where
        Pat_bar_2_6989586621680124874_a4G5d :: forall (v_a4Fje :: GHC.Types.Type)
                                                      (a_a4Fjf :: GHC.Types.Type)
                                                      self_a4G5i.
                                               self_a4G5i
                                               -> self_a4G5i
                                                  -> Pat_bar_2_6989586621680124872_a4G5b (v_a4Fje :: GHC.Types.Type) (a_a4Fjf :: GHC.Types.Type) self_a4G5i
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680124872_a4G5b [Char] a_a4Fjf) (Exp [Char] a_a4Fjf) where
      alg (Pat_bar_2_6989586621680124874_a4G5d v1 v2) = (Add v1) v2
    instance Arbitrary a_a4Fjf =>
             FixArbitrary (Pat_bar_2_6989586621680124872_a4G5b [Char] a_a4Fjf) (Exp [Char] a_a4Fjf) where
      liftFix gen_6989586621680124876_a4G5f
        = ((satisfy "bar#2")
             (\ pat_6989586621680124878_a4G5h
                -> case step pat_6989586621680124878_a4G5h of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680124874_a4G5d))
                   (smaller gen_6989586621680124876_a4G5f)))
               (smaller gen_6989586621680124876_a4G5f))
    instance Branching (Pat_bar_2_6989586621680124872_a4G5b [Char] a_a4Fjf) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680124872_a4G5b
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a4K2B (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type) self_a4K2D
      where
        Mk_Val_a4K2C :: forall (v_a4JZM :: GHC.Types.Type)
                               (a_a4JZN :: GHC.Types.Type)
                               self_a4K2D.
                        a_a4JZN
                        -> Rep_Val_a4K2B (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type) self_a4K2D
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a4K2B (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type)) (Exp v_a4JZM a_a4JZN) where
      alg (Mk_Val_a4K2C v1) = Val v1
    instance (Arbitrary (v_a4JZM :: GHC.Types.Type),
              Arbitrary (a_a4JZN :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a4K2B (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type)) (Exp v_a4JZM a_a4JZN) where
      liftFix gen_a4K2E = ((<*>) (pure Mk_Val_a4K2C)) arbitrary
    instance Branching (Rep_Val_a4K2B (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a4K2B
    data Rep_Var_a4K2F (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type) self_a4K2H
      where
        Mk_Var_a4K2G :: forall (v_a4JZM :: GHC.Types.Type)
                               (a_a4JZN :: GHC.Types.Type)
                               self_a4K2H.
                        v_a4JZM
                        -> Rep_Var_a4K2F (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type) self_a4K2H
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a4K2F (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type)) (Exp v_a4JZM a_a4JZN) where
      alg (Mk_Var_a4K2G v1) = Var v1
    instance (Arbitrary (v_a4JZM :: GHC.Types.Type),
              Arbitrary (a_a4JZN :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a4K2F (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type)) (Exp v_a4JZM a_a4JZN) where
      liftFix gen_a4K2I = ((<*>) (pure Mk_Var_a4K2G)) arbitrary
    instance Branching (Rep_Var_a4K2F (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a4K2F
    data Rep_Add_a4K2J (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type) self_a4K2L
      where
        Mk_Add_a4K2K :: forall (v_a4JZM :: GHC.Types.Type)
                               (a_a4JZN :: GHC.Types.Type)
                               self_a4K2L.
                        self_a4K2L
                        -> self_a4K2L
                           -> Rep_Add_a4K2J (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type) self_a4K2L
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a4K2J (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type)) (Exp v_a4JZM a_a4JZN) where
      alg (Mk_Add_a4K2K v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a4JZM :: GHC.Types.Type),
              Arbitrary (a_a4JZN :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a4K2J (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type)) (Exp v_a4JZM a_a4JZN) where
      liftFix gen_a4K2M
        = ((<*>) (((<*>) (pure Mk_Add_a4K2K)) (smaller gen_a4K2M)))
            (smaller gen_a4K2M)
    instance Branching (Rep_Add_a4K2J (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a4K2J
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680141594_a4KqT (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type) self_a4Kr0
      where
        Pat_foo_1_6989586621680141596_a4KqV :: forall (v_a4JZM :: GHC.Types.Type)
                                                      (a_a4JZN :: GHC.Types.Type)
                                                      self_a4Kr0.
                                               self_a4Kr0
                                               -> self_a4Kr0
                                                  -> self_a4Kr0
                                                     -> Pat_foo_1_6989586621680141594_a4KqT (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type) self_a4Kr0
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680141594_a4KqT v_a4JZM a_a4JZN) (Exp v_a4JZM a_a4JZN) where
      alg (Pat_foo_1_6989586621680141596_a4KqV v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a4JZM, Arbitrary a_a4JZN) =>
             FixArbitrary (Pat_foo_1_6989586621680141594_a4KqT v_a4JZM a_a4JZN) (Exp v_a4JZM a_a4JZN) where
      liftFix gen_6989586621680141598_a4KqX
        = ((satisfy "foo#1")
             (\ pat_6989586621680141600_a4KqZ
                -> case step pat_6989586621680141600_a4KqZ of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680141596_a4KqV))
                       (smaller gen_6989586621680141598_a4KqX)))
                   (smaller gen_6989586621680141598_a4KqX)))
               (smaller gen_6989586621680141598_a4KqX))
    instance Branching (Pat_foo_1_6989586621680141594_a4KqT v_a4JZM a_a4JZN) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680141594_a4KqT
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680141627_a4Krq (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type) self_a4Krx
      where
        Pat_foo_2_6989586621680141629_a4Krs :: forall (v_a4JZM :: GHC.Types.Type)
                                                      (a_a4JZN :: GHC.Types.Type)
                                                      self_a4Krx.
                                               a_a4JZN
                                               -> self_a4Krx
                                                  -> Pat_foo_2_6989586621680141627_a4Krq (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type) self_a4Krx
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680141627_a4Krq v_a4JZM a_a4JZN) (Exp v_a4JZM a_a4JZN) where
      alg (Pat_foo_2_6989586621680141629_a4Krs v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a4JZM, Arbitrary a_a4JZN) =>
             FixArbitrary (Pat_foo_2_6989586621680141627_a4Krq v_a4JZM a_a4JZN) (Exp v_a4JZM a_a4JZN) where
      liftFix gen_6989586621680141631_a4Kru
        = ((satisfy "foo#2")
             (\ pat_6989586621680141633_a4Krw
                -> case step pat_6989586621680141633_a4Krw of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680141629_a4Krs)) arbitrary))
               (smaller gen_6989586621680141631_a4Kru))
    instance Branching (Pat_foo_2_6989586621680141627_a4Krq v_a4JZM a_a4JZN) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680141627_a4Krq
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680142841_a4KL0 (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type) self_a4KL7
      where
        Pat_bar_1_6989586621680142843_a4KL2 :: forall (v_a4JZM :: GHC.Types.Type)
                                                      (a_a4JZN :: GHC.Types.Type)
                                                      self_a4KL7.
                                               a_a4JZN
                                               -> Pat_bar_1_6989586621680142841_a4KL0 (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type) self_a4KL7
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680142841_a4KL0 [Char] a_a4JZN) (Exp [Char] a_a4JZN) where
      alg (Pat_bar_1_6989586621680142843_a4KL2 v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a4JZN =>
             FixArbitrary (Pat_bar_1_6989586621680142841_a4KL0 [Char] a_a4JZN) (Exp [Char] a_a4JZN) where
      liftFix gen_6989586621680142845_a4KL4
        = ((satisfy "bar#1")
             (\ pat_6989586621680142847_a4KL6
                -> case step pat_6989586621680142847_a4KL6 of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680142843_a4KL2)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680142841_a4KL0 [Char] a_a4JZN) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680142841_a4KL0
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680142886_a4KLJ (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type) self_a4KLQ
      where
        Pat_bar_2_6989586621680142888_a4KLL :: forall (v_a4JZM :: GHC.Types.Type)
                                                      (a_a4JZN :: GHC.Types.Type)
                                                      self_a4KLQ.
                                               self_a4KLQ
                                               -> self_a4KLQ
                                                  -> Pat_bar_2_6989586621680142886_a4KLJ (v_a4JZM :: GHC.Types.Type) (a_a4JZN :: GHC.Types.Type) self_a4KLQ
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680142886_a4KLJ [Char] a_a4JZN) (Exp [Char] a_a4JZN) where
      alg (Pat_bar_2_6989586621680142888_a4KLL v1 v2) = (Add v1) v2
    instance Arbitrary a_a4JZN =>
             FixArbitrary (Pat_bar_2_6989586621680142886_a4KLJ [Char] a_a4JZN) (Exp [Char] a_a4JZN) where
      liftFix gen_6989586621680142890_a4KLN
        = ((satisfy "bar#2")
             (\ pat_6989586621680142892_a4KLP
                -> case step pat_6989586621680142892_a4KLP of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680142888_a4KLL))
                   (smaller gen_6989586621680142890_a4KLN)))
               (smaller gen_6989586621680142890_a4KLN))
    instance Branching (Pat_bar_2_6989586621680142886_a4KLJ [Char] a_a4JZN) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680142886_a4KLJ
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a4OLD (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type) self_a4OLF
      where
        Mk_Val_a4OLE :: forall (v_a4OIO :: GHC.Types.Type)
                               (a_a4OIP :: GHC.Types.Type)
                               self_a4OLF.
                        a_a4OIP
                        -> Rep_Val_a4OLD (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type) self_a4OLF
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a4OLD (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type)) (Exp v_a4OIO a_a4OIP) where
      alg (Mk_Val_a4OLE v1) = Val v1
    instance (Arbitrary (v_a4OIO :: GHC.Types.Type),
              Arbitrary (a_a4OIP :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a4OLD (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type)) (Exp v_a4OIO a_a4OIP) where
      liftFix gen_a4OLG = ((<*>) (pure Mk_Val_a4OLE)) arbitrary
    instance Branching (Rep_Val_a4OLD (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a4OLD
    data Rep_Var_a4OLH (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type) self_a4OLJ
      where
        Mk_Var_a4OLI :: forall (v_a4OIO :: GHC.Types.Type)
                               (a_a4OIP :: GHC.Types.Type)
                               self_a4OLJ.
                        v_a4OIO
                        -> Rep_Var_a4OLH (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type) self_a4OLJ
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a4OLH (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type)) (Exp v_a4OIO a_a4OIP) where
      alg (Mk_Var_a4OLI v1) = Var v1
    instance (Arbitrary (v_a4OIO :: GHC.Types.Type),
              Arbitrary (a_a4OIP :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a4OLH (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type)) (Exp v_a4OIO a_a4OIP) where
      liftFix gen_a4OLK = ((<*>) (pure Mk_Var_a4OLI)) arbitrary
    instance Branching (Rep_Var_a4OLH (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a4OLH
    data Rep_Add_a4OLL (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type) self_a4OLN
      where
        Mk_Add_a4OLM :: forall (v_a4OIO :: GHC.Types.Type)
                               (a_a4OIP :: GHC.Types.Type)
                               self_a4OLN.
                        self_a4OLN
                        -> self_a4OLN
                           -> Rep_Add_a4OLL (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type) self_a4OLN
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a4OLL (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type)) (Exp v_a4OIO a_a4OIP) where
      alg (Mk_Add_a4OLM v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a4OIO :: GHC.Types.Type),
              Arbitrary (a_a4OIP :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a4OLL (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type)) (Exp v_a4OIO a_a4OIP) where
      liftFix gen_a4OLO
        = ((<*>) (((<*>) (pure Mk_Add_a4OLM)) (smaller gen_a4OLO)))
            (smaller gen_a4OLO)
    instance Branching (Rep_Add_a4OLL (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a4OLL
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680159762_a4P9V (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type) self_a4Pa2
      where
        Pat_foo_1_6989586621680159764_a4P9X :: forall (v_a4OIO :: GHC.Types.Type)
                                                      (a_a4OIP :: GHC.Types.Type)
                                                      self_a4Pa2.
                                               self_a4Pa2
                                               -> self_a4Pa2
                                                  -> self_a4Pa2
                                                     -> Pat_foo_1_6989586621680159762_a4P9V (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type) self_a4Pa2
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680159762_a4P9V v_a4OIO a_a4OIP) (Exp v_a4OIO a_a4OIP) where
      alg (Pat_foo_1_6989586621680159764_a4P9X v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a4OIO, Arbitrary a_a4OIP) =>
             FixArbitrary (Pat_foo_1_6989586621680159762_a4P9V v_a4OIO a_a4OIP) (Exp v_a4OIO a_a4OIP) where
      liftFix gen_6989586621680159766_a4P9Z
        = ((satisfy "foo#1")
             (\ pat_6989586621680159768_a4Pa1
                -> case step pat_6989586621680159768_a4Pa1 of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680159764_a4P9X))
                       (smaller gen_6989586621680159766_a4P9Z)))
                   (smaller gen_6989586621680159766_a4P9Z)))
               (smaller gen_6989586621680159766_a4P9Z))
    instance Branching (Pat_foo_1_6989586621680159762_a4P9V v_a4OIO a_a4OIP) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680159762_a4P9V
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680159795_a4Pas (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type) self_a4Paz
      where
        Pat_foo_2_6989586621680159797_a4Pau :: forall (v_a4OIO :: GHC.Types.Type)
                                                      (a_a4OIP :: GHC.Types.Type)
                                                      self_a4Paz.
                                               a_a4OIP
                                               -> self_a4Paz
                                                  -> Pat_foo_2_6989586621680159795_a4Pas (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type) self_a4Paz
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680159795_a4Pas v_a4OIO a_a4OIP) (Exp v_a4OIO a_a4OIP) where
      alg (Pat_foo_2_6989586621680159797_a4Pau v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a4OIO, Arbitrary a_a4OIP) =>
             FixArbitrary (Pat_foo_2_6989586621680159795_a4Pas v_a4OIO a_a4OIP) (Exp v_a4OIO a_a4OIP) where
      liftFix gen_6989586621680159799_a4Paw
        = ((satisfy "foo#2")
             (\ pat_6989586621680159801_a4Pay
                -> case step pat_6989586621680159801_a4Pay of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680159797_a4Pau)) arbitrary))
               (smaller gen_6989586621680159799_a4Paw))
    instance Branching (Pat_foo_2_6989586621680159795_a4Pas v_a4OIO a_a4OIP) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680159795_a4Pas
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680161009_a4Pu2 (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type) self_a4Pu9
      where
        Pat_bar_1_6989586621680161011_a4Pu4 :: forall (v_a4OIO :: GHC.Types.Type)
                                                      (a_a4OIP :: GHC.Types.Type)
                                                      self_a4Pu9.
                                               a_a4OIP
                                               -> Pat_bar_1_6989586621680161009_a4Pu2 (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type) self_a4Pu9
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680161009_a4Pu2 [Char] a_a4OIP) (Exp [Char] a_a4OIP) where
      alg (Pat_bar_1_6989586621680161011_a4Pu4 v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a4OIP =>
             FixArbitrary (Pat_bar_1_6989586621680161009_a4Pu2 [Char] a_a4OIP) (Exp [Char] a_a4OIP) where
      liftFix gen_6989586621680161013_a4Pu6
        = ((satisfy "bar#1")
             (\ pat_6989586621680161015_a4Pu8
                -> case step pat_6989586621680161015_a4Pu8 of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680161011_a4Pu4)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680161009_a4Pu2 [Char] a_a4OIP) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680161009_a4Pu2
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680161054_a4PuL (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type) self_a4PuS
      where
        Pat_bar_2_6989586621680161056_a4PuN :: forall (v_a4OIO :: GHC.Types.Type)
                                                      (a_a4OIP :: GHC.Types.Type)
                                                      self_a4PuS.
                                               self_a4PuS
                                               -> self_a4PuS
                                                  -> Pat_bar_2_6989586621680161054_a4PuL (v_a4OIO :: GHC.Types.Type) (a_a4OIP :: GHC.Types.Type) self_a4PuS
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680161054_a4PuL [Char] a_a4OIP) (Exp [Char] a_a4OIP) where
      alg (Pat_bar_2_6989586621680161056_a4PuN v1 v2) = (Add v1) v2
    instance Arbitrary a_a4OIP =>
             FixArbitrary (Pat_bar_2_6989586621680161054_a4PuL [Char] a_a4OIP) (Exp [Char] a_a4OIP) where
      liftFix gen_6989586621680161058_a4PuP
        = ((satisfy "bar#2")
             (\ pat_6989586621680161060_a4PuR
                -> case step pat_6989586621680161060_a4PuR of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680161056_a4PuN))
                   (smaller gen_6989586621680161058_a4PuP)))
               (smaller gen_6989586621680161058_a4PuP))
    instance Branching (Pat_bar_2_6989586621680161054_a4PuL [Char] a_a4OIP) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680161054_a4PuL
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a4QlI (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type) self_a4QlK
      where
        Mk_Val_a4QlJ :: forall (v_a4QiT :: GHC.Types.Type)
                               (a_a4QiU :: GHC.Types.Type)
                               self_a4QlK.
                        a_a4QiU
                        -> Rep_Val_a4QlI (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type) self_a4QlK
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a4QlI (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type)) (Exp v_a4QiT a_a4QiU) where
      alg (Mk_Val_a4QlJ v1) = Val v1
    instance (Arbitrary (v_a4QiT :: GHC.Types.Type),
              Arbitrary (a_a4QiU :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a4QlI (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type)) (Exp v_a4QiT a_a4QiU) where
      liftFix gen_a4QlL = ((<*>) (pure Mk_Val_a4QlJ)) arbitrary
    instance Branching (Rep_Val_a4QlI (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a4QlI
    data Rep_Var_a4QlM (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type) self_a4QlO
      where
        Mk_Var_a4QlN :: forall (v_a4QiT :: GHC.Types.Type)
                               (a_a4QiU :: GHC.Types.Type)
                               self_a4QlO.
                        v_a4QiT
                        -> Rep_Var_a4QlM (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type) self_a4QlO
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a4QlM (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type)) (Exp v_a4QiT a_a4QiU) where
      alg (Mk_Var_a4QlN v1) = Var v1
    instance (Arbitrary (v_a4QiT :: GHC.Types.Type),
              Arbitrary (a_a4QiU :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a4QlM (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type)) (Exp v_a4QiT a_a4QiU) where
      liftFix gen_a4QlP = ((<*>) (pure Mk_Var_a4QlN)) arbitrary
    instance Branching (Rep_Var_a4QlM (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a4QlM
    data Rep_Add_a4QlQ (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type) self_a4QlS
      where
        Mk_Add_a4QlR :: forall (v_a4QiT :: GHC.Types.Type)
                               (a_a4QiU :: GHC.Types.Type)
                               self_a4QlS.
                        self_a4QlS
                        -> self_a4QlS
                           -> Rep_Add_a4QlQ (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type) self_a4QlS
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a4QlQ (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type)) (Exp v_a4QiT a_a4QiU) where
      alg (Mk_Add_a4QlR v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a4QiT :: GHC.Types.Type),
              Arbitrary (a_a4QiU :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a4QlQ (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type)) (Exp v_a4QiT a_a4QiU) where
      liftFix gen_a4QlT
        = ((<*>) (((<*>) (pure Mk_Add_a4QlR)) (smaller gen_a4QlT)))
            (smaller gen_a4QlT)
    instance Branching (Rep_Add_a4QlQ (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a4QlQ
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680165843_a4QK0 (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type) self_a4QK7
      where
        Pat_foo_1_6989586621680165845_a4QK2 :: forall (v_a4QiT :: GHC.Types.Type)
                                                      (a_a4QiU :: GHC.Types.Type)
                                                      self_a4QK7.
                                               self_a4QK7
                                               -> self_a4QK7
                                                  -> self_a4QK7
                                                     -> Pat_foo_1_6989586621680165843_a4QK0 (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type) self_a4QK7
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680165843_a4QK0 v_a4QiT a_a4QiU) (Exp v_a4QiT a_a4QiU) where
      alg (Pat_foo_1_6989586621680165845_a4QK2 v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a4QiT, Arbitrary a_a4QiU) =>
             FixArbitrary (Pat_foo_1_6989586621680165843_a4QK0 v_a4QiT a_a4QiU) (Exp v_a4QiT a_a4QiU) where
      liftFix gen_6989586621680165847_a4QK4
        = ((satisfy "foo#1")
             (\ pat_6989586621680165849_a4QK6
                -> case step pat_6989586621680165849_a4QK6 of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680165845_a4QK2))
                       (smaller gen_6989586621680165847_a4QK4)))
                   (smaller gen_6989586621680165847_a4QK4)))
               (smaller gen_6989586621680165847_a4QK4))
    instance Branching (Pat_foo_1_6989586621680165843_a4QK0 v_a4QiT a_a4QiU) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680165843_a4QK0
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680165876_a4QKx (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type) self_a4QKE
      where
        Pat_foo_2_6989586621680165878_a4QKz :: forall (v_a4QiT :: GHC.Types.Type)
                                                      (a_a4QiU :: GHC.Types.Type)
                                                      self_a4QKE.
                                               a_a4QiU
                                               -> self_a4QKE
                                                  -> Pat_foo_2_6989586621680165876_a4QKx (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type) self_a4QKE
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680165876_a4QKx v_a4QiT a_a4QiU) (Exp v_a4QiT a_a4QiU) where
      alg (Pat_foo_2_6989586621680165878_a4QKz v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a4QiT, Arbitrary a_a4QiU) =>
             FixArbitrary (Pat_foo_2_6989586621680165876_a4QKx v_a4QiT a_a4QiU) (Exp v_a4QiT a_a4QiU) where
      liftFix gen_6989586621680165880_a4QKB
        = ((satisfy "foo#2")
             (\ pat_6989586621680165882_a4QKD
                -> case step pat_6989586621680165882_a4QKD of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680165878_a4QKz)) arbitrary))
               (smaller gen_6989586621680165880_a4QKB))
    instance Branching (Pat_foo_2_6989586621680165876_a4QKx v_a4QiT a_a4QiU) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680165876_a4QKx
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680167090_a4R47 (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type) self_a4R4e
      where
        Pat_bar_1_6989586621680167092_a4R49 :: forall (v_a4QiT :: GHC.Types.Type)
                                                      (a_a4QiU :: GHC.Types.Type)
                                                      self_a4R4e.
                                               a_a4QiU
                                               -> Pat_bar_1_6989586621680167090_a4R47 (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type) self_a4R4e
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680167090_a4R47 [Char] a_a4QiU) (Exp [Char] a_a4QiU) where
      alg (Pat_bar_1_6989586621680167092_a4R49 v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a4QiU =>
             FixArbitrary (Pat_bar_1_6989586621680167090_a4R47 [Char] a_a4QiU) (Exp [Char] a_a4QiU) where
      liftFix gen_6989586621680167094_a4R4b
        = ((satisfy "bar#1")
             (\ pat_6989586621680167096_a4R4d
                -> case step pat_6989586621680167096_a4R4d of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680167092_a4R49)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680167090_a4R47 [Char] a_a4QiU) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680167090_a4R47
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680167135_a4R4Q (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type) self_a4R4X
      where
        Pat_bar_2_6989586621680167137_a4R4S :: forall (v_a4QiT :: GHC.Types.Type)
                                                      (a_a4QiU :: GHC.Types.Type)
                                                      self_a4R4X.
                                               self_a4R4X
                                               -> self_a4R4X
                                                  -> Pat_bar_2_6989586621680167135_a4R4Q (v_a4QiT :: GHC.Types.Type) (a_a4QiU :: GHC.Types.Type) self_a4R4X
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680167135_a4R4Q [Char] a_a4QiU) (Exp [Char] a_a4QiU) where
      alg (Pat_bar_2_6989586621680167137_a4R4S v1 v2) = (Add v1) v2
    instance Arbitrary a_a4QiU =>
             FixArbitrary (Pat_bar_2_6989586621680167135_a4R4Q [Char] a_a4QiU) (Exp [Char] a_a4QiU) where
      liftFix gen_6989586621680167139_a4R4U
        = ((satisfy "bar#2")
             (\ pat_6989586621680167141_a4R4W
                -> case step pat_6989586621680167141_a4R4W of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680167137_a4R4S))
                   (smaller gen_6989586621680167139_a4R4U)))
               (smaller gen_6989586621680167139_a4R4U))
    instance Branching (Pat_bar_2_6989586621680167135_a4R4Q [Char] a_a4QiU) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680167135_a4R4Q
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a51ee (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type) self_a51eg
      where
        Mk_Val_a51ef :: forall (v_a51bp :: GHC.Types.Type)
                               (a_a51bq :: GHC.Types.Type)
                               self_a51eg.
                        a_a51bq
                        -> Rep_Val_a51ee (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type) self_a51eg
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a51ee (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type)) (Exp v_a51bp a_a51bq) where
      alg (Mk_Val_a51ef v1) = Val v1
    instance (Arbitrary (v_a51bp :: GHC.Types.Type),
              Arbitrary (a_a51bq :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a51ee (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type)) (Exp v_a51bp a_a51bq) where
      liftFix gen_a51eh = ((<*>) (pure Mk_Val_a51ef)) arbitrary
    instance Branching (Rep_Val_a51ee (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a51ee
    data Rep_Var_a51ei (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type) self_a51ek
      where
        Mk_Var_a51ej :: forall (v_a51bp :: GHC.Types.Type)
                               (a_a51bq :: GHC.Types.Type)
                               self_a51ek.
                        v_a51bp
                        -> Rep_Var_a51ei (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type) self_a51ek
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a51ei (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type)) (Exp v_a51bp a_a51bq) where
      alg (Mk_Var_a51ej v1) = Var v1
    instance (Arbitrary (v_a51bp :: GHC.Types.Type),
              Arbitrary (a_a51bq :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a51ei (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type)) (Exp v_a51bp a_a51bq) where
      liftFix gen_a51el = ((<*>) (pure Mk_Var_a51ej)) arbitrary
    instance Branching (Rep_Var_a51ei (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a51ei
    data Rep_Add_a51em (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type) self_a51eo
      where
        Mk_Add_a51en :: forall (v_a51bp :: GHC.Types.Type)
                               (a_a51bq :: GHC.Types.Type)
                               self_a51eo.
                        self_a51eo
                        -> self_a51eo
                           -> Rep_Add_a51em (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type) self_a51eo
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a51em (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type)) (Exp v_a51bp a_a51bq) where
      alg (Mk_Add_a51en v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a51bp :: GHC.Types.Type),
              Arbitrary (a_a51bq :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a51em (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type)) (Exp v_a51bp a_a51bq) where
      liftFix gen_a51ep
        = ((<*>) (((<*>) (pure Mk_Add_a51en)) (smaller gen_a51ep)))
            (smaller gen_a51ep)
    instance Branching (Rep_Add_a51em (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a51em
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680207663_a51Cw (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type) self_a51CD
      where
        Pat_foo_1_6989586621680207665_a51Cy :: forall (v_a51bp :: GHC.Types.Type)
                                                      (a_a51bq :: GHC.Types.Type)
                                                      self_a51CD.
                                               self_a51CD
                                               -> self_a51CD
                                                  -> self_a51CD
                                                     -> Pat_foo_1_6989586621680207663_a51Cw (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type) self_a51CD
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680207663_a51Cw v_a51bp a_a51bq) (Exp v_a51bp a_a51bq) where
      alg (Pat_foo_1_6989586621680207665_a51Cy v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a51bp, Arbitrary a_a51bq) =>
             FixArbitrary (Pat_foo_1_6989586621680207663_a51Cw v_a51bp a_a51bq) (Exp v_a51bp a_a51bq) where
      liftFix gen_6989586621680207667_a51CA
        = ((satisfy "foo#1")
             (\ pat_6989586621680207669_a51CC
                -> case step pat_6989586621680207669_a51CC of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680207665_a51Cy))
                       (smaller gen_6989586621680207667_a51CA)))
                   (smaller gen_6989586621680207667_a51CA)))
               (smaller gen_6989586621680207667_a51CA))
    instance Branching (Pat_foo_1_6989586621680207663_a51Cw v_a51bp a_a51bq) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680207663_a51Cw
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680207696_a51D3 (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type) self_a51Da
      where
        Pat_foo_2_6989586621680207698_a51D5 :: forall (v_a51bp :: GHC.Types.Type)
                                                      (a_a51bq :: GHC.Types.Type)
                                                      self_a51Da.
                                               a_a51bq
                                               -> self_a51Da
                                                  -> Pat_foo_2_6989586621680207696_a51D3 (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type) self_a51Da
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680207696_a51D3 v_a51bp a_a51bq) (Exp v_a51bp a_a51bq) where
      alg (Pat_foo_2_6989586621680207698_a51D5 v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a51bp, Arbitrary a_a51bq) =>
             FixArbitrary (Pat_foo_2_6989586621680207696_a51D3 v_a51bp a_a51bq) (Exp v_a51bp a_a51bq) where
      liftFix gen_6989586621680207700_a51D7
        = ((satisfy "foo#2")
             (\ pat_6989586621680207702_a51D9
                -> case step pat_6989586621680207702_a51D9 of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680207698_a51D5)) arbitrary))
               (smaller gen_6989586621680207700_a51D7))
    instance Branching (Pat_foo_2_6989586621680207696_a51D3 v_a51bp a_a51bq) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680207696_a51D3
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680208910_a51WD (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type) self_a51WK
      where
        Pat_bar_1_6989586621680208912_a51WF :: forall (v_a51bp :: GHC.Types.Type)
                                                      (a_a51bq :: GHC.Types.Type)
                                                      self_a51WK.
                                               a_a51bq
                                               -> Pat_bar_1_6989586621680208910_a51WD (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type) self_a51WK
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680208910_a51WD [Char] a_a51bq) (Exp [Char] a_a51bq) where
      alg (Pat_bar_1_6989586621680208912_a51WF v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a51bq =>
             FixArbitrary (Pat_bar_1_6989586621680208910_a51WD [Char] a_a51bq) (Exp [Char] a_a51bq) where
      liftFix gen_6989586621680208914_a51WH
        = ((satisfy "bar#1")
             (\ pat_6989586621680208916_a51WJ
                -> case step pat_6989586621680208916_a51WJ of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680208912_a51WF)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680208910_a51WD [Char] a_a51bq) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680208910_a51WD
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680208955_a51Xm (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type) self_a51Xt
      where
        Pat_bar_2_6989586621680208957_a51Xo :: forall (v_a51bp :: GHC.Types.Type)
                                                      (a_a51bq :: GHC.Types.Type)
                                                      self_a51Xt.
                                               self_a51Xt
                                               -> self_a51Xt
                                                  -> Pat_bar_2_6989586621680208955_a51Xm (v_a51bp :: GHC.Types.Type) (a_a51bq :: GHC.Types.Type) self_a51Xt
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680208955_a51Xm [Char] a_a51bq) (Exp [Char] a_a51bq) where
      alg (Pat_bar_2_6989586621680208957_a51Xo v1 v2) = (Add v1) v2
    instance Arbitrary a_a51bq =>
             FixArbitrary (Pat_bar_2_6989586621680208955_a51Xm [Char] a_a51bq) (Exp [Char] a_a51bq) where
      liftFix gen_6989586621680208959_a51Xq
        = ((satisfy "bar#2")
             (\ pat_6989586621680208961_a51Xs
                -> case step pat_6989586621680208961_a51Xs of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680208957_a51Xo))
                   (smaller gen_6989586621680208959_a51Xq)))
               (smaller gen_6989586621680208959_a51Xq))
    instance Branching (Pat_bar_2_6989586621680208955_a51Xm [Char] a_a51bq) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680208955_a51Xm
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a52Oj (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type) self_a52Ol
      where
        Mk_Val_a52Ok :: forall (v_a52Lu :: GHC.Types.Type)
                               (a_a52Lv :: GHC.Types.Type)
                               self_a52Ol.
                        a_a52Lv
                        -> Rep_Val_a52Oj (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type) self_a52Ol
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a52Oj (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type)) (Exp v_a52Lu a_a52Lv) where
      alg (Mk_Val_a52Ok v1) = Val v1
    instance (Arbitrary (v_a52Lu :: GHC.Types.Type),
              Arbitrary (a_a52Lv :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a52Oj (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type)) (Exp v_a52Lu a_a52Lv) where
      liftFix gen_a52Om = ((<*>) (pure Mk_Val_a52Ok)) arbitrary
    instance Branching (Rep_Val_a52Oj (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a52Oj
    data Rep_Var_a52On (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type) self_a52Op
      where
        Mk_Var_a52Oo :: forall (v_a52Lu :: GHC.Types.Type)
                               (a_a52Lv :: GHC.Types.Type)
                               self_a52Op.
                        v_a52Lu
                        -> Rep_Var_a52On (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type) self_a52Op
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a52On (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type)) (Exp v_a52Lu a_a52Lv) where
      alg (Mk_Var_a52Oo v1) = Var v1
    instance (Arbitrary (v_a52Lu :: GHC.Types.Type),
              Arbitrary (a_a52Lv :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a52On (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type)) (Exp v_a52Lu a_a52Lv) where
      liftFix gen_a52Oq = ((<*>) (pure Mk_Var_a52Oo)) arbitrary
    instance Branching (Rep_Var_a52On (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a52On
    data Rep_Add_a52Or (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type) self_a52Ot
      where
        Mk_Add_a52Os :: forall (v_a52Lu :: GHC.Types.Type)
                               (a_a52Lv :: GHC.Types.Type)
                               self_a52Ot.
                        self_a52Ot
                        -> self_a52Ot
                           -> Rep_Add_a52Or (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type) self_a52Ot
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a52Or (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type)) (Exp v_a52Lu a_a52Lv) where
      alg (Mk_Add_a52Os v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a52Lu :: GHC.Types.Type),
              Arbitrary (a_a52Lv :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a52Or (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type)) (Exp v_a52Lu a_a52Lv) where
      liftFix gen_a52Ou
        = ((<*>) (((<*>) (pure Mk_Add_a52Os)) (smaller gen_a52Ou)))
            (smaller gen_a52Ou)
    instance Branching (Rep_Add_a52Or (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a52Or
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680213744_a53cB (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type) self_a53cI
      where
        Pat_foo_1_6989586621680213746_a53cD :: forall (v_a52Lu :: GHC.Types.Type)
                                                      (a_a52Lv :: GHC.Types.Type)
                                                      self_a53cI.
                                               self_a53cI
                                               -> self_a53cI
                                                  -> self_a53cI
                                                     -> Pat_foo_1_6989586621680213744_a53cB (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type) self_a53cI
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680213744_a53cB v_a52Lu a_a52Lv) (Exp v_a52Lu a_a52Lv) where
      alg (Pat_foo_1_6989586621680213746_a53cD v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a52Lu, Arbitrary a_a52Lv) =>
             FixArbitrary (Pat_foo_1_6989586621680213744_a53cB v_a52Lu a_a52Lv) (Exp v_a52Lu a_a52Lv) where
      liftFix gen_6989586621680213748_a53cF
        = ((satisfy "foo#1")
             (\ pat_6989586621680213750_a53cH
                -> case step pat_6989586621680213750_a53cH of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680213746_a53cD))
                       (smaller gen_6989586621680213748_a53cF)))
                   (smaller gen_6989586621680213748_a53cF)))
               (smaller gen_6989586621680213748_a53cF))
    instance Branching (Pat_foo_1_6989586621680213744_a53cB v_a52Lu a_a52Lv) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680213744_a53cB
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680213777_a53d8 (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type) self_a53df
      where
        Pat_foo_2_6989586621680213779_a53da :: forall (v_a52Lu :: GHC.Types.Type)
                                                      (a_a52Lv :: GHC.Types.Type)
                                                      self_a53df.
                                               a_a52Lv
                                               -> self_a53df
                                                  -> Pat_foo_2_6989586621680213777_a53d8 (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type) self_a53df
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680213777_a53d8 v_a52Lu a_a52Lv) (Exp v_a52Lu a_a52Lv) where
      alg (Pat_foo_2_6989586621680213779_a53da v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a52Lu, Arbitrary a_a52Lv) =>
             FixArbitrary (Pat_foo_2_6989586621680213777_a53d8 v_a52Lu a_a52Lv) (Exp v_a52Lu a_a52Lv) where
      liftFix gen_6989586621680213781_a53dc
        = ((satisfy "foo#2")
             (\ pat_6989586621680213783_a53de
                -> case step pat_6989586621680213783_a53de of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680213779_a53da)) arbitrary))
               (smaller gen_6989586621680213781_a53dc))
    instance Branching (Pat_foo_2_6989586621680213777_a53d8 v_a52Lu a_a52Lv) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680213777_a53d8
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680214991_a53wI (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type) self_a53wP
      where
        Pat_bar_1_6989586621680214993_a53wK :: forall (v_a52Lu :: GHC.Types.Type)
                                                      (a_a52Lv :: GHC.Types.Type)
                                                      self_a53wP.
                                               a_a52Lv
                                               -> Pat_bar_1_6989586621680214991_a53wI (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type) self_a53wP
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680214991_a53wI [Char] a_a52Lv) (Exp [Char] a_a52Lv) where
      alg (Pat_bar_1_6989586621680214993_a53wK v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a52Lv =>
             FixArbitrary (Pat_bar_1_6989586621680214991_a53wI [Char] a_a52Lv) (Exp [Char] a_a52Lv) where
      liftFix gen_6989586621680214995_a53wM
        = ((satisfy "bar#1")
             (\ pat_6989586621680214997_a53wO
                -> case step pat_6989586621680214997_a53wO of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680214993_a53wK)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680214991_a53wI [Char] a_a52Lv) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680214991_a53wI
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680215036_a53xr (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type) self_a53xy
      where
        Pat_bar_2_6989586621680215038_a53xt :: forall (v_a52Lu :: GHC.Types.Type)
                                                      (a_a52Lv :: GHC.Types.Type)
                                                      self_a53xy.
                                               self_a53xy
                                               -> self_a53xy
                                                  -> Pat_bar_2_6989586621680215036_a53xr (v_a52Lu :: GHC.Types.Type) (a_a52Lv :: GHC.Types.Type) self_a53xy
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680215036_a53xr [Char] a_a52Lv) (Exp [Char] a_a52Lv) where
      alg (Pat_bar_2_6989586621680215038_a53xt v1 v2) = (Add v1) v2
    instance Arbitrary a_a52Lv =>
             FixArbitrary (Pat_bar_2_6989586621680215036_a53xr [Char] a_a52Lv) (Exp [Char] a_a52Lv) where
      liftFix gen_6989586621680215040_a53xv
        = ((satisfy "bar#2")
             (\ pat_6989586621680215042_a53xx
                -> case step pat_6989586621680215042_a53xx of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680215038_a53xt))
                   (smaller gen_6989586621680215040_a53xv)))
               (smaller gen_6989586621680215040_a53xv))
    instance Branching (Pat_bar_2_6989586621680215036_a53xr [Char] a_a52Lv) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680215036_a53xr
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a58Ry (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type) self_a58RA
      where
        Mk_Val_a58Rz :: forall (v_a58OJ :: GHC.Types.Type)
                               (a_a58OK :: GHC.Types.Type)
                               self_a58RA.
                        a_a58OK
                        -> Rep_Val_a58Ry (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type) self_a58RA
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a58Ry (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type)) (Exp v_a58OJ a_a58OK) where
      alg (Mk_Val_a58Rz v1) = Val v1
    instance (Arbitrary (v_a58OJ :: GHC.Types.Type),
              Arbitrary (a_a58OK :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a58Ry (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type)) (Exp v_a58OJ a_a58OK) where
      liftFix gen_a58RB = ((<*>) (pure Mk_Val_a58Rz)) arbitrary
    instance Branching (Rep_Val_a58Ry (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a58Ry
    data Rep_Var_a58RC (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type) self_a58RE
      where
        Mk_Var_a58RD :: forall (v_a58OJ :: GHC.Types.Type)
                               (a_a58OK :: GHC.Types.Type)
                               self_a58RE.
                        v_a58OJ
                        -> Rep_Var_a58RC (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type) self_a58RE
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a58RC (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type)) (Exp v_a58OJ a_a58OK) where
      alg (Mk_Var_a58RD v1) = Var v1
    instance (Arbitrary (v_a58OJ :: GHC.Types.Type),
              Arbitrary (a_a58OK :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a58RC (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type)) (Exp v_a58OJ a_a58OK) where
      liftFix gen_a58RF = ((<*>) (pure Mk_Var_a58RD)) arbitrary
    instance Branching (Rep_Var_a58RC (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a58RC
    data Rep_Add_a58RG (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type) self_a58RI
      where
        Mk_Add_a58RH :: forall (v_a58OJ :: GHC.Types.Type)
                               (a_a58OK :: GHC.Types.Type)
                               self_a58RI.
                        self_a58RI
                        -> self_a58RI
                           -> Rep_Add_a58RG (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type) self_a58RI
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a58RG (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type)) (Exp v_a58OJ a_a58OK) where
      alg (Mk_Add_a58RH v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a58OJ :: GHC.Types.Type),
              Arbitrary (a_a58OK :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a58RG (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type)) (Exp v_a58OJ a_a58OK) where
      liftFix gen_a58RJ
        = ((<*>) (((<*>) (pure Mk_Add_a58RH)) (smaller gen_a58RJ)))
            (smaller gen_a58RJ)
    instance Branching (Rep_Add_a58RG (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a58RG
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680237009_a59fQ (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type) self_a59fX
      where
        Pat_foo_1_6989586621680237011_a59fS :: forall (v_a58OJ :: GHC.Types.Type)
                                                      (a_a58OK :: GHC.Types.Type)
                                                      self_a59fX.
                                               self_a59fX
                                               -> self_a59fX
                                                  -> self_a59fX
                                                     -> Pat_foo_1_6989586621680237009_a59fQ (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type) self_a59fX
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680237009_a59fQ v_a58OJ a_a58OK) (Exp v_a58OJ a_a58OK) where
      alg (Pat_foo_1_6989586621680237011_a59fS v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a58OJ, Arbitrary a_a58OK) =>
             FixArbitrary (Pat_foo_1_6989586621680237009_a59fQ v_a58OJ a_a58OK) (Exp v_a58OJ a_a58OK) where
      liftFix gen_6989586621680237013_a59fU
        = ((satisfy "foo#1")
             (\ pat_6989586621680237015_a59fW
                -> case step pat_6989586621680237015_a59fW of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680237011_a59fS))
                       (smaller gen_6989586621680237013_a59fU)))
                   (smaller gen_6989586621680237013_a59fU)))
               (smaller gen_6989586621680237013_a59fU))
    instance Branching (Pat_foo_1_6989586621680237009_a59fQ v_a58OJ a_a58OK) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680237009_a59fQ
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680237042_a59gn (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type) self_a59gu
      where
        Pat_foo_2_6989586621680237044_a59gp :: forall (v_a58OJ :: GHC.Types.Type)
                                                      (a_a58OK :: GHC.Types.Type)
                                                      self_a59gu.
                                               a_a58OK
                                               -> self_a59gu
                                                  -> Pat_foo_2_6989586621680237042_a59gn (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type) self_a59gu
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680237042_a59gn v_a58OJ a_a58OK) (Exp v_a58OJ a_a58OK) where
      alg (Pat_foo_2_6989586621680237044_a59gp v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a58OJ, Arbitrary a_a58OK) =>
             FixArbitrary (Pat_foo_2_6989586621680237042_a59gn v_a58OJ a_a58OK) (Exp v_a58OJ a_a58OK) where
      liftFix gen_6989586621680237046_a59gr
        = ((satisfy "foo#2")
             (\ pat_6989586621680237048_a59gt
                -> case step pat_6989586621680237048_a59gt of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680237044_a59gp)) arbitrary))
               (smaller gen_6989586621680237046_a59gr))
    instance Branching (Pat_foo_2_6989586621680237042_a59gn v_a58OJ a_a58OK) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680237042_a59gn
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680238256_a59zX (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type) self_a59A4
      where
        Pat_bar_1_6989586621680238258_a59zZ :: forall (v_a58OJ :: GHC.Types.Type)
                                                      (a_a58OK :: GHC.Types.Type)
                                                      self_a59A4.
                                               a_a58OK
                                               -> Pat_bar_1_6989586621680238256_a59zX (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type) self_a59A4
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680238256_a59zX [Char] a_a58OK) (Exp [Char] a_a58OK) where
      alg (Pat_bar_1_6989586621680238258_a59zZ v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a58OK =>
             FixArbitrary (Pat_bar_1_6989586621680238256_a59zX [Char] a_a58OK) (Exp [Char] a_a58OK) where
      liftFix gen_6989586621680238260_a59A1
        = ((satisfy "bar#1")
             (\ pat_6989586621680238262_a59A3
                -> case step pat_6989586621680238262_a59A3 of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680238258_a59zZ)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680238256_a59zX [Char] a_a58OK) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680238256_a59zX
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680238301_a59AG (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type) self_a59AN
      where
        Pat_bar_2_6989586621680238303_a59AI :: forall (v_a58OJ :: GHC.Types.Type)
                                                      (a_a58OK :: GHC.Types.Type)
                                                      self_a59AN.
                                               self_a59AN
                                               -> self_a59AN
                                                  -> Pat_bar_2_6989586621680238301_a59AG (v_a58OJ :: GHC.Types.Type) (a_a58OK :: GHC.Types.Type) self_a59AN
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680238301_a59AG [Char] a_a58OK) (Exp [Char] a_a58OK) where
      alg (Pat_bar_2_6989586621680238303_a59AI v1 v2) = (Add v1) v2
    instance Arbitrary a_a58OK =>
             FixArbitrary (Pat_bar_2_6989586621680238301_a59AG [Char] a_a58OK) (Exp [Char] a_a58OK) where
      liftFix gen_6989586621680238305_a59AK
        = ((satisfy "bar#2")
             (\ pat_6989586621680238307_a59AM
                -> case step pat_6989586621680238307_a59AM of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680238303_a59AI))
                   (smaller gen_6989586621680238305_a59AK)))
               (smaller gen_6989586621680238305_a59AK))
    instance Branching (Pat_bar_2_6989586621680238301_a59AG [Char] a_a58OK) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680238301_a59AG
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a5arD (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type) self_a5arF
      where
        Mk_Val_a5arE :: forall (v_a5aoO :: GHC.Types.Type)
                               (a_a5aoP :: GHC.Types.Type)
                               self_a5arF.
                        a_a5aoP
                        -> Rep_Val_a5arD (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type) self_a5arF
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a5arD (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type)) (Exp v_a5aoO a_a5aoP) where
      alg (Mk_Val_a5arE v1) = Val v1
    instance (Arbitrary (v_a5aoO :: GHC.Types.Type),
              Arbitrary (a_a5aoP :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a5arD (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type)) (Exp v_a5aoO a_a5aoP) where
      liftFix gen_a5arG = ((<*>) (pure Mk_Val_a5arE)) arbitrary
    instance Branching (Rep_Val_a5arD (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a5arD
    data Rep_Var_a5arH (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type) self_a5arJ
      where
        Mk_Var_a5arI :: forall (v_a5aoO :: GHC.Types.Type)
                               (a_a5aoP :: GHC.Types.Type)
                               self_a5arJ.
                        v_a5aoO
                        -> Rep_Var_a5arH (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type) self_a5arJ
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a5arH (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type)) (Exp v_a5aoO a_a5aoP) where
      alg (Mk_Var_a5arI v1) = Var v1
    instance (Arbitrary (v_a5aoO :: GHC.Types.Type),
              Arbitrary (a_a5aoP :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a5arH (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type)) (Exp v_a5aoO a_a5aoP) where
      liftFix gen_a5arK = ((<*>) (pure Mk_Var_a5arI)) arbitrary
    instance Branching (Rep_Var_a5arH (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a5arH
    data Rep_Add_a5arL (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type) self_a5arN
      where
        Mk_Add_a5arM :: forall (v_a5aoO :: GHC.Types.Type)
                               (a_a5aoP :: GHC.Types.Type)
                               self_a5arN.
                        self_a5arN
                        -> self_a5arN
                           -> Rep_Add_a5arL (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type) self_a5arN
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a5arL (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type)) (Exp v_a5aoO a_a5aoP) where
      alg (Mk_Add_a5arM v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a5aoO :: GHC.Types.Type),
              Arbitrary (a_a5aoP :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a5arL (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type)) (Exp v_a5aoO a_a5aoP) where
      liftFix gen_a5arO
        = ((<*>) (((<*>) (pure Mk_Add_a5arM)) (smaller gen_a5arO)))
            (smaller gen_a5arO)
    instance Branching (Rep_Add_a5arL (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a5arL
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680243090_a5aPV (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type) self_a5aQ2
      where
        Pat_foo_1_6989586621680243092_a5aPX :: forall (v_a5aoO :: GHC.Types.Type)
                                                      (a_a5aoP :: GHC.Types.Type)
                                                      self_a5aQ2.
                                               self_a5aQ2
                                               -> self_a5aQ2
                                                  -> self_a5aQ2
                                                     -> Pat_foo_1_6989586621680243090_a5aPV (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type) self_a5aQ2
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680243090_a5aPV v_a5aoO a_a5aoP) (Exp v_a5aoO a_a5aoP) where
      alg (Pat_foo_1_6989586621680243092_a5aPX v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a5aoO, Arbitrary a_a5aoP) =>
             FixArbitrary (Pat_foo_1_6989586621680243090_a5aPV v_a5aoO a_a5aoP) (Exp v_a5aoO a_a5aoP) where
      liftFix gen_6989586621680243094_a5aPZ
        = ((satisfy "foo#1")
             (\ pat_6989586621680243096_a5aQ1
                -> case step pat_6989586621680243096_a5aQ1 of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680243092_a5aPX))
                       (smaller gen_6989586621680243094_a5aPZ)))
                   (smaller gen_6989586621680243094_a5aPZ)))
               (smaller gen_6989586621680243094_a5aPZ))
    instance Branching (Pat_foo_1_6989586621680243090_a5aPV v_a5aoO a_a5aoP) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680243090_a5aPV
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680243123_a5aQs (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type) self_a5aQz
      where
        Pat_foo_2_6989586621680243125_a5aQu :: forall (v_a5aoO :: GHC.Types.Type)
                                                      (a_a5aoP :: GHC.Types.Type)
                                                      self_a5aQz.
                                               a_a5aoP
                                               -> self_a5aQz
                                                  -> Pat_foo_2_6989586621680243123_a5aQs (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type) self_a5aQz
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680243123_a5aQs v_a5aoO a_a5aoP) (Exp v_a5aoO a_a5aoP) where
      alg (Pat_foo_2_6989586621680243125_a5aQu v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a5aoO, Arbitrary a_a5aoP) =>
             FixArbitrary (Pat_foo_2_6989586621680243123_a5aQs v_a5aoO a_a5aoP) (Exp v_a5aoO a_a5aoP) where
      liftFix gen_6989586621680243127_a5aQw
        = ((satisfy "foo#2")
             (\ pat_6989586621680243129_a5aQy
                -> case step pat_6989586621680243129_a5aQy of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680243125_a5aQu)) arbitrary))
               (smaller gen_6989586621680243127_a5aQw))
    instance Branching (Pat_foo_2_6989586621680243123_a5aQs v_a5aoO a_a5aoP) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680243123_a5aQs
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680244337_a5ba2 (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type) self_a5ba9
      where
        Pat_bar_1_6989586621680244339_a5ba4 :: forall (v_a5aoO :: GHC.Types.Type)
                                                      (a_a5aoP :: GHC.Types.Type)
                                                      self_a5ba9.
                                               a_a5aoP
                                               -> Pat_bar_1_6989586621680244337_a5ba2 (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type) self_a5ba9
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680244337_a5ba2 [Char] a_a5aoP) (Exp [Char] a_a5aoP) where
      alg (Pat_bar_1_6989586621680244339_a5ba4 v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a5aoP =>
             FixArbitrary (Pat_bar_1_6989586621680244337_a5ba2 [Char] a_a5aoP) (Exp [Char] a_a5aoP) where
      liftFix gen_6989586621680244341_a5ba6
        = ((satisfy "bar#1")
             (\ pat_6989586621680244343_a5ba8
                -> case step pat_6989586621680244343_a5ba8 of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680244339_a5ba4)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680244337_a5ba2 [Char] a_a5aoP) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680244337_a5ba2
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680244382_a5baL (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type) self_a5baS
      where
        Pat_bar_2_6989586621680244384_a5baN :: forall (v_a5aoO :: GHC.Types.Type)
                                                      (a_a5aoP :: GHC.Types.Type)
                                                      self_a5baS.
                                               self_a5baS
                                               -> self_a5baS
                                                  -> Pat_bar_2_6989586621680244382_a5baL (v_a5aoO :: GHC.Types.Type) (a_a5aoP :: GHC.Types.Type) self_a5baS
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680244382_a5baL [Char] a_a5aoP) (Exp [Char] a_a5aoP) where
      alg (Pat_bar_2_6989586621680244384_a5baN v1 v2) = (Add v1) v2
    instance Arbitrary a_a5aoP =>
             FixArbitrary (Pat_bar_2_6989586621680244382_a5baL [Char] a_a5aoP) (Exp [Char] a_a5aoP) where
      liftFix gen_6989586621680244386_a5baP
        = ((satisfy "bar#2")
             (\ pat_6989586621680244388_a5baR
                -> case step pat_6989586621680244388_a5baR of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680244384_a5baN))
                   (smaller gen_6989586621680244386_a5baP)))
               (smaller gen_6989586621680244386_a5baP))
    instance Branching (Pat_bar_2_6989586621680244382_a5baL [Char] a_a5aoP) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680244382_a5baL
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a5fuL (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type) self_a5fuN
      where
        Mk_Val_a5fuM :: forall (v_a5frW :: GHC.Types.Type)
                               (a_a5frX :: GHC.Types.Type)
                               self_a5fuN.
                        a_a5frX
                        -> Rep_Val_a5fuL (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type) self_a5fuN
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a5fuL (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type)) (Exp v_a5frW a_a5frX) where
      alg (Mk_Val_a5fuM v1) = Val v1
    instance (Arbitrary (v_a5frW :: GHC.Types.Type),
              Arbitrary (a_a5frX :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a5fuL (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type)) (Exp v_a5frW a_a5frX) where
      liftFix gen_a5fuO = ((<*>) (pure Mk_Val_a5fuM)) arbitrary
    instance Branching (Rep_Val_a5fuL (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a5fuL
    data Rep_Var_a5fuP (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type) self_a5fuR
      where
        Mk_Var_a5fuQ :: forall (v_a5frW :: GHC.Types.Type)
                               (a_a5frX :: GHC.Types.Type)
                               self_a5fuR.
                        v_a5frW
                        -> Rep_Var_a5fuP (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type) self_a5fuR
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a5fuP (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type)) (Exp v_a5frW a_a5frX) where
      alg (Mk_Var_a5fuQ v1) = Var v1
    instance (Arbitrary (v_a5frW :: GHC.Types.Type),
              Arbitrary (a_a5frX :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a5fuP (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type)) (Exp v_a5frW a_a5frX) where
      liftFix gen_a5fuS = ((<*>) (pure Mk_Var_a5fuQ)) arbitrary
    instance Branching (Rep_Var_a5fuP (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a5fuP
    data Rep_Add_a5fuT (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type) self_a5fuV
      where
        Mk_Add_a5fuU :: forall (v_a5frW :: GHC.Types.Type)
                               (a_a5frX :: GHC.Types.Type)
                               self_a5fuV.
                        self_a5fuV
                        -> self_a5fuV
                           -> Rep_Add_a5fuT (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type) self_a5fuV
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a5fuT (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type)) (Exp v_a5frW a_a5frX) where
      alg (Mk_Add_a5fuU v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a5frW :: GHC.Types.Type),
              Arbitrary (a_a5frX :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a5fuT (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type)) (Exp v_a5frW a_a5frX) where
      liftFix gen_a5fuW
        = ((<*>) (((<*>) (pure Mk_Add_a5fuU)) (smaller gen_a5fuW)))
            (smaller gen_a5fuW)
    instance Branching (Rep_Add_a5fuT (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a5fuT
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680262504_a5fT3 (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type) self_a5fTa
      where
        Pat_foo_1_6989586621680262506_a5fT5 :: forall (v_a5frW :: GHC.Types.Type)
                                                      (a_a5frX :: GHC.Types.Type)
                                                      self_a5fTa.
                                               self_a5fTa
                                               -> self_a5fTa
                                                  -> self_a5fTa
                                                     -> Pat_foo_1_6989586621680262504_a5fT3 (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type) self_a5fTa
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680262504_a5fT3 v_a5frW a_a5frX) (Exp v_a5frW a_a5frX) where
      alg (Pat_foo_1_6989586621680262506_a5fT5 v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a5frW, Arbitrary a_a5frX) =>
             FixArbitrary (Pat_foo_1_6989586621680262504_a5fT3 v_a5frW a_a5frX) (Exp v_a5frW a_a5frX) where
      liftFix gen_6989586621680262508_a5fT7
        = ((satisfy "foo#1")
             (\ pat_6989586621680262510_a5fT9
                -> case step pat_6989586621680262510_a5fT9 of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680262506_a5fT5))
                       (smaller gen_6989586621680262508_a5fT7)))
                   (smaller gen_6989586621680262508_a5fT7)))
               (smaller gen_6989586621680262508_a5fT7))
    instance Branching (Pat_foo_1_6989586621680262504_a5fT3 v_a5frW a_a5frX) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680262504_a5fT3
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680262537_a5fTA (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type) self_a5fTH
      where
        Pat_foo_2_6989586621680262539_a5fTC :: forall (v_a5frW :: GHC.Types.Type)
                                                      (a_a5frX :: GHC.Types.Type)
                                                      self_a5fTH.
                                               a_a5frX
                                               -> self_a5fTH
                                                  -> Pat_foo_2_6989586621680262537_a5fTA (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type) self_a5fTH
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680262537_a5fTA v_a5frW a_a5frX) (Exp v_a5frW a_a5frX) where
      alg (Pat_foo_2_6989586621680262539_a5fTC v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a5frW, Arbitrary a_a5frX) =>
             FixArbitrary (Pat_foo_2_6989586621680262537_a5fTA v_a5frW a_a5frX) (Exp v_a5frW a_a5frX) where
      liftFix gen_6989586621680262541_a5fTE
        = ((satisfy "foo#2")
             (\ pat_6989586621680262543_a5fTG
                -> case step pat_6989586621680262543_a5fTG of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680262539_a5fTC)) arbitrary))
               (smaller gen_6989586621680262541_a5fTE))
    instance Branching (Pat_foo_2_6989586621680262537_a5fTA v_a5frW a_a5frX) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680262537_a5fTA
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680263751_a5gda (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type) self_a5gdh
      where
        Pat_bar_1_6989586621680263753_a5gdc :: forall (v_a5frW :: GHC.Types.Type)
                                                      (a_a5frX :: GHC.Types.Type)
                                                      self_a5gdh.
                                               a_a5frX
                                               -> Pat_bar_1_6989586621680263751_a5gda (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type) self_a5gdh
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680263751_a5gda [Char] a_a5frX) (Exp [Char] a_a5frX) where
      alg (Pat_bar_1_6989586621680263753_a5gdc v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a5frX =>
             FixArbitrary (Pat_bar_1_6989586621680263751_a5gda [Char] a_a5frX) (Exp [Char] a_a5frX) where
      liftFix gen_6989586621680263755_a5gde
        = ((satisfy "bar#1")
             (\ pat_6989586621680263757_a5gdg
                -> case step pat_6989586621680263757_a5gdg of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680263753_a5gdc)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680263751_a5gda [Char] a_a5frX) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680263751_a5gda
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680263796_a5gdT (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type) self_a5ge0
      where
        Pat_bar_2_6989586621680263798_a5gdV :: forall (v_a5frW :: GHC.Types.Type)
                                                      (a_a5frX :: GHC.Types.Type)
                                                      self_a5ge0.
                                               self_a5ge0
                                               -> self_a5ge0
                                                  -> Pat_bar_2_6989586621680263796_a5gdT (v_a5frW :: GHC.Types.Type) (a_a5frX :: GHC.Types.Type) self_a5ge0
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680263796_a5gdT [Char] a_a5frX) (Exp [Char] a_a5frX) where
      alg (Pat_bar_2_6989586621680263798_a5gdV v1 v2) = (Add v1) v2
    instance Arbitrary a_a5frX =>
             FixArbitrary (Pat_bar_2_6989586621680263796_a5gdT [Char] a_a5frX) (Exp [Char] a_a5frX) where
      liftFix gen_6989586621680263800_a5gdX
        = ((satisfy "bar#2")
             (\ pat_6989586621680263802_a5gdZ
                -> case step pat_6989586621680263802_a5gdZ of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680263798_a5gdV))
                   (smaller gen_6989586621680263800_a5gdX)))
               (smaller gen_6989586621680263800_a5gdX))
    instance Branching (Pat_bar_2_6989586621680263796_a5gdT [Char] a_a5frX) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680263796_a5gdT
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a5jWK (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type) self_a5jWM
      where
        Mk_Val_a5jWL :: forall (v_a5jTV :: GHC.Types.Type)
                               (a_a5jTW :: GHC.Types.Type)
                               self_a5jWM.
                        a_a5jTW
                        -> Rep_Val_a5jWK (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type) self_a5jWM
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a5jWK (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type)) (Exp v_a5jTV a_a5jTW) where
      alg (Mk_Val_a5jWL v1) = Val v1
    instance (Arbitrary (v_a5jTV :: GHC.Types.Type),
              Arbitrary (a_a5jTW :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a5jWK (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type)) (Exp v_a5jTV a_a5jTW) where
      liftFix gen_a5jWN = ((<*>) (pure Mk_Val_a5jWL)) arbitrary
    instance Branching (Rep_Val_a5jWK (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a5jWK
    data Rep_Var_a5jWO (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type) self_a5jWQ
      where
        Mk_Var_a5jWP :: forall (v_a5jTV :: GHC.Types.Type)
                               (a_a5jTW :: GHC.Types.Type)
                               self_a5jWQ.
                        v_a5jTV
                        -> Rep_Var_a5jWO (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type) self_a5jWQ
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a5jWO (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type)) (Exp v_a5jTV a_a5jTW) where
      alg (Mk_Var_a5jWP v1) = Var v1
    instance (Arbitrary (v_a5jTV :: GHC.Types.Type),
              Arbitrary (a_a5jTW :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a5jWO (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type)) (Exp v_a5jTV a_a5jTW) where
      liftFix gen_a5jWR = ((<*>) (pure Mk_Var_a5jWP)) arbitrary
    instance Branching (Rep_Var_a5jWO (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a5jWO
    data Rep_Add_a5jWS (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type) self_a5jWU
      where
        Mk_Add_a5jWT :: forall (v_a5jTV :: GHC.Types.Type)
                               (a_a5jTW :: GHC.Types.Type)
                               self_a5jWU.
                        self_a5jWU
                        -> self_a5jWU
                           -> Rep_Add_a5jWS (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type) self_a5jWU
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a5jWS (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type)) (Exp v_a5jTV a_a5jTW) where
      alg (Mk_Add_a5jWT v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a5jTV :: GHC.Types.Type),
              Arbitrary (a_a5jTW :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a5jWS (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type)) (Exp v_a5jTV a_a5jTW) where
      liftFix gen_a5jWV
        = ((<*>) (((<*>) (pure Mk_Add_a5jWT)) (smaller gen_a5jWV)))
            (smaller gen_a5jWV)
    instance Branching (Rep_Add_a5jWS (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a5jWS
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680279615_a5kl2 (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type) self_a5kl9
      where
        Pat_foo_1_6989586621680279617_a5kl4 :: forall (v_a5jTV :: GHC.Types.Type)
                                                      (a_a5jTW :: GHC.Types.Type)
                                                      self_a5kl9.
                                               self_a5kl9
                                               -> self_a5kl9
                                                  -> self_a5kl9
                                                     -> Pat_foo_1_6989586621680279615_a5kl2 (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type) self_a5kl9
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680279615_a5kl2 v_a5jTV a_a5jTW) (Exp v_a5jTV a_a5jTW) where
      alg (Pat_foo_1_6989586621680279617_a5kl4 v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a5jTV, Arbitrary a_a5jTW) =>
             FixArbitrary (Pat_foo_1_6989586621680279615_a5kl2 v_a5jTV a_a5jTW) (Exp v_a5jTV a_a5jTW) where
      liftFix gen_6989586621680279619_a5kl6
        = ((satisfy "foo#1")
             (\ pat_6989586621680279621_a5kl8
                -> case step pat_6989586621680279621_a5kl8 of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680279617_a5kl4))
                       (smaller gen_6989586621680279619_a5kl6)))
                   (smaller gen_6989586621680279619_a5kl6)))
               (smaller gen_6989586621680279619_a5kl6))
    instance Branching (Pat_foo_1_6989586621680279615_a5kl2 v_a5jTV a_a5jTW) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680279615_a5kl2
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680279648_a5klz (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type) self_a5klG
      where
        Pat_foo_2_6989586621680279650_a5klB :: forall (v_a5jTV :: GHC.Types.Type)
                                                      (a_a5jTW :: GHC.Types.Type)
                                                      self_a5klG.
                                               a_a5jTW
                                               -> self_a5klG
                                                  -> Pat_foo_2_6989586621680279648_a5klz (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type) self_a5klG
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680279648_a5klz v_a5jTV a_a5jTW) (Exp v_a5jTV a_a5jTW) where
      alg (Pat_foo_2_6989586621680279650_a5klB v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a5jTV, Arbitrary a_a5jTW) =>
             FixArbitrary (Pat_foo_2_6989586621680279648_a5klz v_a5jTV a_a5jTW) (Exp v_a5jTV a_a5jTW) where
      liftFix gen_6989586621680279652_a5klD
        = ((satisfy "foo#2")
             (\ pat_6989586621680279654_a5klF
                -> case step pat_6989586621680279654_a5klF of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680279650_a5klB)) arbitrary))
               (smaller gen_6989586621680279652_a5klD))
    instance Branching (Pat_foo_2_6989586621680279648_a5klz v_a5jTV a_a5jTW) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680279648_a5klz
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680280862_a5kF9 (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type) self_a5kFg
      where
        Pat_bar_1_6989586621680280864_a5kFb :: forall (v_a5jTV :: GHC.Types.Type)
                                                      (a_a5jTW :: GHC.Types.Type)
                                                      self_a5kFg.
                                               a_a5jTW
                                               -> Pat_bar_1_6989586621680280862_a5kF9 (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type) self_a5kFg
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680280862_a5kF9 [Char] a_a5jTW) (Exp [Char] a_a5jTW) where
      alg (Pat_bar_1_6989586621680280864_a5kFb v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a5jTW =>
             FixArbitrary (Pat_bar_1_6989586621680280862_a5kF9 [Char] a_a5jTW) (Exp [Char] a_a5jTW) where
      liftFix gen_6989586621680280866_a5kFd
        = ((satisfy "bar#1")
             (\ pat_6989586621680280868_a5kFf
                -> case step pat_6989586621680280868_a5kFf of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680280864_a5kFb)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680280862_a5kF9 [Char] a_a5jTW) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680280862_a5kF9
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680280907_a5kFS (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type) self_a5kFZ
      where
        Pat_bar_2_6989586621680280909_a5kFU :: forall (v_a5jTV :: GHC.Types.Type)
                                                      (a_a5jTW :: GHC.Types.Type)
                                                      self_a5kFZ.
                                               self_a5kFZ
                                               -> self_a5kFZ
                                                  -> Pat_bar_2_6989586621680280907_a5kFS (v_a5jTV :: GHC.Types.Type) (a_a5jTW :: GHC.Types.Type) self_a5kFZ
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680280907_a5kFS [Char] a_a5jTW) (Exp [Char] a_a5jTW) where
      alg (Pat_bar_2_6989586621680280909_a5kFU v1 v2) = (Add v1) v2
    instance Arbitrary a_a5jTW =>
             FixArbitrary (Pat_bar_2_6989586621680280907_a5kFS [Char] a_a5jTW) (Exp [Char] a_a5jTW) where
      liftFix gen_6989586621680280911_a5kFW
        = ((satisfy "bar#2")
             (\ pat_6989586621680280913_a5kFY
                -> case step pat_6989586621680280913_a5kFY of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680280909_a5kFU))
                   (smaller gen_6989586621680280911_a5kFW)))
               (smaller gen_6989586621680280911_a5kFW))
    instance Branching (Pat_bar_2_6989586621680280907_a5kFS [Char] a_a5jTW) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680280907_a5kFS
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a5onR (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type) self_a5onT
      where
        Mk_Val_a5onS :: forall (v_a5ol2 :: GHC.Types.Type)
                               (a_a5ol3 :: GHC.Types.Type)
                               self_a5onT.
                        a_a5ol3
                        -> Rep_Val_a5onR (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type) self_a5onT
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a5onR (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type)) (Exp v_a5ol2 a_a5ol3) where
      alg (Mk_Val_a5onS v1) = Val v1
    instance (Arbitrary (v_a5ol2 :: GHC.Types.Type),
              Arbitrary (a_a5ol3 :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a5onR (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type)) (Exp v_a5ol2 a_a5ol3) where
      liftFix gen_a5onU = ((<*>) (pure Mk_Val_a5onS)) arbitrary
    instance Branching (Rep_Val_a5onR (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a5onR
    data Rep_Var_a5onV (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type) self_a5onX
      where
        Mk_Var_a5onW :: forall (v_a5ol2 :: GHC.Types.Type)
                               (a_a5ol3 :: GHC.Types.Type)
                               self_a5onX.
                        v_a5ol2
                        -> Rep_Var_a5onV (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type) self_a5onX
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a5onV (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type)) (Exp v_a5ol2 a_a5ol3) where
      alg (Mk_Var_a5onW v1) = Var v1
    instance (Arbitrary (v_a5ol2 :: GHC.Types.Type),
              Arbitrary (a_a5ol3 :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a5onV (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type)) (Exp v_a5ol2 a_a5ol3) where
      liftFix gen_a5onY = ((<*>) (pure Mk_Var_a5onW)) arbitrary
    instance Branching (Rep_Var_a5onV (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a5onV
    data Rep_Add_a5onZ (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type) self_a5oo1
      where
        Mk_Add_a5oo0 :: forall (v_a5ol2 :: GHC.Types.Type)
                               (a_a5ol3 :: GHC.Types.Type)
                               self_a5oo1.
                        self_a5oo1
                        -> self_a5oo1
                           -> Rep_Add_a5onZ (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type) self_a5oo1
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a5onZ (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type)) (Exp v_a5ol2 a_a5ol3) where
      alg (Mk_Add_a5oo0 v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a5ol2 :: GHC.Types.Type),
              Arbitrary (a_a5ol3 :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a5onZ (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type)) (Exp v_a5ol2 a_a5ol3) where
      liftFix gen_a5oo2
        = ((<*>) (((<*>) (pure Mk_Add_a5oo0)) (smaller gen_a5oo2)))
            (smaller gen_a5oo2)
    instance Branching (Rep_Add_a5onZ (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a5onZ
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680296672_a5oM9 (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type) self_a5oMg
      where
        Pat_foo_1_6989586621680296674_a5oMb :: forall (v_a5ol2 :: GHC.Types.Type)
                                                      (a_a5ol3 :: GHC.Types.Type)
                                                      self_a5oMg.
                                               self_a5oMg
                                               -> self_a5oMg
                                                  -> self_a5oMg
                                                     -> Pat_foo_1_6989586621680296672_a5oM9 (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type) self_a5oMg
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680296672_a5oM9 v_a5ol2 a_a5ol3) (Exp v_a5ol2 a_a5ol3) where
      alg (Pat_foo_1_6989586621680296674_a5oMb v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a5ol2, Arbitrary a_a5ol3) =>
             FixArbitrary (Pat_foo_1_6989586621680296672_a5oM9 v_a5ol2 a_a5ol3) (Exp v_a5ol2 a_a5ol3) where
      liftFix gen_6989586621680296676_a5oMd
        = ((satisfy "foo#1")
             (\ pat_6989586621680296678_a5oMf
                -> case step pat_6989586621680296678_a5oMf of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680296674_a5oMb))
                       (smaller gen_6989586621680296676_a5oMd)))
                   (smaller gen_6989586621680296676_a5oMd)))
               (smaller gen_6989586621680296676_a5oMd))
    instance Branching (Pat_foo_1_6989586621680296672_a5oM9 v_a5ol2 a_a5ol3) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680296672_a5oM9
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680296705_a5oMG (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type) self_a5oMN
      where
        Pat_foo_2_6989586621680296707_a5oMI :: forall (v_a5ol2 :: GHC.Types.Type)
                                                      (a_a5ol3 :: GHC.Types.Type)
                                                      self_a5oMN.
                                               a_a5ol3
                                               -> self_a5oMN
                                                  -> Pat_foo_2_6989586621680296705_a5oMG (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type) self_a5oMN
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680296705_a5oMG v_a5ol2 a_a5ol3) (Exp v_a5ol2 a_a5ol3) where
      alg (Pat_foo_2_6989586621680296707_a5oMI v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a5ol2, Arbitrary a_a5ol3) =>
             FixArbitrary (Pat_foo_2_6989586621680296705_a5oMG v_a5ol2 a_a5ol3) (Exp v_a5ol2 a_a5ol3) where
      liftFix gen_6989586621680296709_a5oMK
        = ((satisfy "foo#2")
             (\ pat_6989586621680296711_a5oMM
                -> case step pat_6989586621680296711_a5oMM of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680296707_a5oMI)) arbitrary))
               (smaller gen_6989586621680296709_a5oMK))
    instance Branching (Pat_foo_2_6989586621680296705_a5oMG v_a5ol2 a_a5ol3) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680296705_a5oMG
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680297919_a5p6g (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type) self_a5p6n
      where
        Pat_bar_1_6989586621680297921_a5p6i :: forall (v_a5ol2 :: GHC.Types.Type)
                                                      (a_a5ol3 :: GHC.Types.Type)
                                                      self_a5p6n.
                                               a_a5ol3
                                               -> Pat_bar_1_6989586621680297919_a5p6g (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type) self_a5p6n
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680297919_a5p6g [Char] a_a5ol3) (Exp [Char] a_a5ol3) where
      alg (Pat_bar_1_6989586621680297921_a5p6i v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a5ol3 =>
             FixArbitrary (Pat_bar_1_6989586621680297919_a5p6g [Char] a_a5ol3) (Exp [Char] a_a5ol3) where
      liftFix gen_6989586621680297923_a5p6k
        = ((satisfy "bar#1")
             (\ pat_6989586621680297925_a5p6m
                -> case step pat_6989586621680297925_a5p6m of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680297921_a5p6i)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680297919_a5p6g [Char] a_a5ol3) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680297919_a5p6g
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680297964_a5p6Z (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type) self_a5p76
      where
        Pat_bar_2_6989586621680297966_a5p71 :: forall (v_a5ol2 :: GHC.Types.Type)
                                                      (a_a5ol3 :: GHC.Types.Type)
                                                      self_a5p76.
                                               self_a5p76
                                               -> self_a5p76
                                                  -> Pat_bar_2_6989586621680297964_a5p6Z (v_a5ol2 :: GHC.Types.Type) (a_a5ol3 :: GHC.Types.Type) self_a5p76
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680297964_a5p6Z [Char] a_a5ol3) (Exp [Char] a_a5ol3) where
      alg (Pat_bar_2_6989586621680297966_a5p71 v1 v2) = (Add v1) v2
    instance Arbitrary a_a5ol3 =>
             FixArbitrary (Pat_bar_2_6989586621680297964_a5p6Z [Char] a_a5ol3) (Exp [Char] a_a5ol3) where
      liftFix gen_6989586621680297968_a5p73
        = ((satisfy "bar#2")
             (\ pat_6989586621680297970_a5p75
                -> case step pat_6989586621680297970_a5p75 of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680297966_a5p71))
                   (smaller gen_6989586621680297968_a5p73)))
               (smaller gen_6989586621680297968_a5p73))
    instance Branching (Pat_bar_2_6989586621680297964_a5p6Z [Char] a_a5ol3) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680297964_a5p6Z
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a5pXW (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type) self_a5pXY
      where
        Mk_Val_a5pXX :: forall (v_a5pV7 :: GHC.Types.Type)
                               (a_a5pV8 :: GHC.Types.Type)
                               self_a5pXY.
                        a_a5pV8
                        -> Rep_Val_a5pXW (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type) self_a5pXY
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a5pXW (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type)) (Exp v_a5pV7 a_a5pV8) where
      alg (Mk_Val_a5pXX v1) = Val v1
    instance (Arbitrary (v_a5pV7 :: GHC.Types.Type),
              Arbitrary (a_a5pV8 :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a5pXW (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type)) (Exp v_a5pV7 a_a5pV8) where
      liftFix gen_a5pXZ = ((<*>) (pure Mk_Val_a5pXX)) arbitrary
    instance Branching (Rep_Val_a5pXW (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a5pXW
    data Rep_Var_a5pY0 (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type) self_a5pY2
      where
        Mk_Var_a5pY1 :: forall (v_a5pV7 :: GHC.Types.Type)
                               (a_a5pV8 :: GHC.Types.Type)
                               self_a5pY2.
                        v_a5pV7
                        -> Rep_Var_a5pY0 (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type) self_a5pY2
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a5pY0 (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type)) (Exp v_a5pV7 a_a5pV8) where
      alg (Mk_Var_a5pY1 v1) = Var v1
    instance (Arbitrary (v_a5pV7 :: GHC.Types.Type),
              Arbitrary (a_a5pV8 :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a5pY0 (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type)) (Exp v_a5pV7 a_a5pV8) where
      liftFix gen_a5pY3 = ((<*>) (pure Mk_Var_a5pY1)) arbitrary
    instance Branching (Rep_Var_a5pY0 (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a5pY0
    data Rep_Add_a5pY4 (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type) self_a5pY6
      where
        Mk_Add_a5pY5 :: forall (v_a5pV7 :: GHC.Types.Type)
                               (a_a5pV8 :: GHC.Types.Type)
                               self_a5pY6.
                        self_a5pY6
                        -> self_a5pY6
                           -> Rep_Add_a5pY4 (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type) self_a5pY6
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a5pY4 (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type)) (Exp v_a5pV7 a_a5pV8) where
      alg (Mk_Add_a5pY5 v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a5pV7 :: GHC.Types.Type),
              Arbitrary (a_a5pV8 :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a5pY4 (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type)) (Exp v_a5pV7 a_a5pV8) where
      liftFix gen_a5pY7
        = ((<*>) (((<*>) (pure Mk_Add_a5pY5)) (smaller gen_a5pY7)))
            (smaller gen_a5pY7)
    instance Branching (Rep_Add_a5pY4 (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a5pY4
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680302753_a5qme (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type) self_a5qml
      where
        Pat_foo_1_6989586621680302755_a5qmg :: forall (v_a5pV7 :: GHC.Types.Type)
                                                      (a_a5pV8 :: GHC.Types.Type)
                                                      self_a5qml.
                                               self_a5qml
                                               -> self_a5qml
                                                  -> self_a5qml
                                                     -> Pat_foo_1_6989586621680302753_a5qme (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type) self_a5qml
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680302753_a5qme v_a5pV7 a_a5pV8) (Exp v_a5pV7 a_a5pV8) where
      alg (Pat_foo_1_6989586621680302755_a5qmg v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a5pV7, Arbitrary a_a5pV8) =>
             FixArbitrary (Pat_foo_1_6989586621680302753_a5qme v_a5pV7 a_a5pV8) (Exp v_a5pV7 a_a5pV8) where
      liftFix gen_6989586621680302757_a5qmi
        = ((satisfy "foo#1")
             (\ pat_6989586621680302759_a5qmk
                -> case step pat_6989586621680302759_a5qmk of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680302755_a5qmg))
                       (smaller gen_6989586621680302757_a5qmi)))
                   (smaller gen_6989586621680302757_a5qmi)))
               (smaller gen_6989586621680302757_a5qmi))
    instance Branching (Pat_foo_1_6989586621680302753_a5qme v_a5pV7 a_a5pV8) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680302753_a5qme
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680302786_a5qmL (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type) self_a5qmS
      where
        Pat_foo_2_6989586621680302788_a5qmN :: forall (v_a5pV7 :: GHC.Types.Type)
                                                      (a_a5pV8 :: GHC.Types.Type)
                                                      self_a5qmS.
                                               a_a5pV8
                                               -> self_a5qmS
                                                  -> Pat_foo_2_6989586621680302786_a5qmL (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type) self_a5qmS
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680302786_a5qmL v_a5pV7 a_a5pV8) (Exp v_a5pV7 a_a5pV8) where
      alg (Pat_foo_2_6989586621680302788_a5qmN v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a5pV7, Arbitrary a_a5pV8) =>
             FixArbitrary (Pat_foo_2_6989586621680302786_a5qmL v_a5pV7 a_a5pV8) (Exp v_a5pV7 a_a5pV8) where
      liftFix gen_6989586621680302790_a5qmP
        = ((satisfy "foo#2")
             (\ pat_6989586621680302792_a5qmR
                -> case step pat_6989586621680302792_a5qmR of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680302788_a5qmN)) arbitrary))
               (smaller gen_6989586621680302790_a5qmP))
    instance Branching (Pat_foo_2_6989586621680302786_a5qmL v_a5pV7 a_a5pV8) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680302786_a5qmL
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680304000_a5qGl (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type) self_a5qGs
      where
        Pat_bar_1_6989586621680304002_a5qGn :: forall (v_a5pV7 :: GHC.Types.Type)
                                                      (a_a5pV8 :: GHC.Types.Type)
                                                      self_a5qGs.
                                               a_a5pV8
                                               -> Pat_bar_1_6989586621680304000_a5qGl (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type) self_a5qGs
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680304000_a5qGl [Char] a_a5pV8) (Exp [Char] a_a5pV8) where
      alg (Pat_bar_1_6989586621680304002_a5qGn v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a5pV8 =>
             FixArbitrary (Pat_bar_1_6989586621680304000_a5qGl [Char] a_a5pV8) (Exp [Char] a_a5pV8) where
      liftFix gen_6989586621680304004_a5qGp
        = ((satisfy "bar#1")
             (\ pat_6989586621680304006_a5qGr
                -> case step pat_6989586621680304006_a5qGr of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680304002_a5qGn)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680304000_a5qGl [Char] a_a5pV8) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680304000_a5qGl
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680304045_a5qH4 (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type) self_a5qHb
      where
        Pat_bar_2_6989586621680304047_a5qH6 :: forall (v_a5pV7 :: GHC.Types.Type)
                                                      (a_a5pV8 :: GHC.Types.Type)
                                                      self_a5qHb.
                                               self_a5qHb
                                               -> self_a5qHb
                                                  -> Pat_bar_2_6989586621680304045_a5qH4 (v_a5pV7 :: GHC.Types.Type) (a_a5pV8 :: GHC.Types.Type) self_a5qHb
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680304045_a5qH4 [Char] a_a5pV8) (Exp [Char] a_a5pV8) where
      alg (Pat_bar_2_6989586621680304047_a5qH6 v1 v2) = (Add v1) v2
    instance Arbitrary a_a5pV8 =>
             FixArbitrary (Pat_bar_2_6989586621680304045_a5qH4 [Char] a_a5pV8) (Exp [Char] a_a5pV8) where
      liftFix gen_6989586621680304049_a5qH8
        = ((satisfy "bar#2")
             (\ pat_6989586621680304051_a5qHa
                -> case step pat_6989586621680304051_a5qHa of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680304047_a5qH6))
                   (smaller gen_6989586621680304049_a5qH8)))
               (smaller gen_6989586621680304049_a5qH8))
    instance Branching (Pat_bar_2_6989586621680304045_a5qH4 [Char] a_a5pV8) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680304045_a5qH4
    type instance Hash "bar" 2 = "bar#2"
/home/agustin/Source/git/quickcheck-patterns/test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a5Br0 (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type) self_a5Br2
      where
        Mk_Val_a5Br1 :: forall (v_a5Bob :: GHC.Types.Type)
                               (a_a5Boc :: GHC.Types.Type)
                               self_a5Br2.
                        a_a5Boc
                        -> Rep_Val_a5Br0 (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type) self_a5Br2
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a5Br0 (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type)) (Exp v_a5Bob a_a5Boc) where
      alg (Mk_Val_a5Br1 v1) = Val v1
    instance (Arbitrary (v_a5Bob :: GHC.Types.Type),
              Arbitrary (a_a5Boc :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a5Br0 (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type)) (Exp v_a5Bob a_a5Boc) where
      liftFix gen_a5Br3 = ((<*>) (pure Mk_Val_a5Br1)) arbitrary
    instance Branching (Rep_Val_a5Br0 (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a5Br0
    data Rep_Var_a5Br4 (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type) self_a5Br6
      where
        Mk_Var_a5Br5 :: forall (v_a5Bob :: GHC.Types.Type)
                               (a_a5Boc :: GHC.Types.Type)
                               self_a5Br6.
                        v_a5Bob
                        -> Rep_Var_a5Br4 (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type) self_a5Br6
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a5Br4 (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type)) (Exp v_a5Bob a_a5Boc) where
      alg (Mk_Var_a5Br5 v1) = Var v1
    instance (Arbitrary (v_a5Bob :: GHC.Types.Type),
              Arbitrary (a_a5Boc :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a5Br4 (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type)) (Exp v_a5Bob a_a5Boc) where
      liftFix gen_a5Br7 = ((<*>) (pure Mk_Var_a5Br5)) arbitrary
    instance Branching (Rep_Var_a5Br4 (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a5Br4
    data Rep_Add_a5Br8 (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type) self_a5Bra
      where
        Mk_Add_a5Br9 :: forall (v_a5Bob :: GHC.Types.Type)
                               (a_a5Boc :: GHC.Types.Type)
                               self_a5Bra.
                        self_a5Bra
                        -> self_a5Bra
                           -> Rep_Add_a5Br8 (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type) self_a5Bra
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a5Br8 (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type)) (Exp v_a5Bob a_a5Boc) where
      alg (Mk_Add_a5Br9 v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a5Bob :: GHC.Types.Type),
              Arbitrary (a_a5Boc :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a5Br8 (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type)) (Exp v_a5Bob a_a5Boc) where
      liftFix gen_a5Brb
        = ((<*>) (((<*>) (pure Mk_Add_a5Br9)) (smaller gen_a5Brb)))
            (smaller gen_a5Brb)
    instance Branching (Rep_Add_a5Br8 (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a5Br8
/home/agustin/Source/git/quickcheck-patterns/test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680346839_a5BPi (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type) self_a5BPp
      where
        Pat_foo_1_6989586621680346841_a5BPk :: forall (v_a5Bob :: GHC.Types.Type)
                                                      (a_a5Boc :: GHC.Types.Type)
                                                      self_a5BPp.
                                               self_a5BPp
                                               -> self_a5BPp
                                                  -> self_a5BPp
                                                     -> Pat_foo_1_6989586621680346839_a5BPi (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type) self_a5BPp
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680346839_a5BPi v_a5Bob a_a5Boc) (Exp v_a5Bob a_a5Boc) where
      alg (Pat_foo_1_6989586621680346841_a5BPk v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a5Bob, Arbitrary a_a5Boc) =>
             FixArbitrary (Pat_foo_1_6989586621680346839_a5BPi v_a5Bob a_a5Boc) (Exp v_a5Bob a_a5Boc) where
      liftFix gen_6989586621680346843_a5BPm
        = ((satisfy "foo#1")
             (\ pat_6989586621680346845_a5BPo
                -> case step pat_6989586621680346845_a5BPo of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680346841_a5BPk))
                       (smaller gen_6989586621680346843_a5BPm)))
                   (smaller gen_6989586621680346843_a5BPm)))
               (smaller gen_6989586621680346843_a5BPm))
    instance Branching (Pat_foo_1_6989586621680346839_a5BPi v_a5Bob a_a5Boc) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680346839_a5BPi
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680346872_a5BPP (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type) self_a5BPW
      where
        Pat_foo_2_6989586621680346874_a5BPR :: forall (v_a5Bob :: GHC.Types.Type)
                                                      (a_a5Boc :: GHC.Types.Type)
                                                      self_a5BPW.
                                               a_a5Boc
                                               -> self_a5BPW
                                                  -> Pat_foo_2_6989586621680346872_a5BPP (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type) self_a5BPW
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680346872_a5BPP v_a5Bob a_a5Boc) (Exp v_a5Bob a_a5Boc) where
      alg (Pat_foo_2_6989586621680346874_a5BPR v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a5Bob, Arbitrary a_a5Boc) =>
             FixArbitrary (Pat_foo_2_6989586621680346872_a5BPP v_a5Bob a_a5Boc) (Exp v_a5Bob a_a5Boc) where
      liftFix gen_6989586621680346876_a5BPT
        = ((satisfy "foo#2")
             (\ pat_6989586621680346878_a5BPV
                -> case step pat_6989586621680346878_a5BPV of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680346874_a5BPR)) arbitrary))
               (smaller gen_6989586621680346876_a5BPT))
    instance Branching (Pat_foo_2_6989586621680346872_a5BPP v_a5Bob a_a5Boc) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680346872_a5BPP
    type instance Hash "foo" 2 = "foo#2"
/home/agustin/Source/git/quickcheck-patterns/test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680348086_a5C9p (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type) self_a5C9w
      where
        Pat_bar_1_6989586621680348088_a5C9r :: forall (v_a5Bob :: GHC.Types.Type)
                                                      (a_a5Boc :: GHC.Types.Type)
                                                      self_a5C9w.
                                               a_a5Boc
                                               -> Pat_bar_1_6989586621680348086_a5C9p (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type) self_a5C9w
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680348086_a5C9p [Char] a_a5Boc) (Exp [Char] a_a5Boc) where
      alg (Pat_bar_1_6989586621680348088_a5C9r v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a5Boc =>
             FixArbitrary (Pat_bar_1_6989586621680348086_a5C9p [Char] a_a5Boc) (Exp [Char] a_a5Boc) where
      liftFix gen_6989586621680348090_a5C9t
        = ((satisfy "bar#1")
             (\ pat_6989586621680348092_a5C9v
                -> case step pat_6989586621680348092_a5C9v of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680348088_a5C9r)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680348086_a5C9p [Char] a_a5Boc) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680348086_a5C9p
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680348131_a5Ca8 (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type) self_a5Caf
      where
        Pat_bar_2_6989586621680348133_a5Caa :: forall (v_a5Bob :: GHC.Types.Type)
                                                      (a_a5Boc :: GHC.Types.Type)
                                                      self_a5Caf.
                                               self_a5Caf
                                               -> self_a5Caf
                                                  -> Pat_bar_2_6989586621680348131_a5Ca8 (v_a5Bob :: GHC.Types.Type) (a_a5Boc :: GHC.Types.Type) self_a5Caf
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680348131_a5Ca8 [Char] a_a5Boc) (Exp [Char] a_a5Boc) where
      alg (Pat_bar_2_6989586621680348133_a5Caa v1 v2) = (Add v1) v2
    instance Arbitrary a_a5Boc =>
             FixArbitrary (Pat_bar_2_6989586621680348131_a5Ca8 [Char] a_a5Boc) (Exp [Char] a_a5Boc) where
      liftFix gen_6989586621680348135_a5Cac
        = ((satisfy "bar#2")
             (\ pat_6989586621680348137_a5Cae
                -> case step pat_6989586621680348137_a5Cae of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680348133_a5Caa))
                   (smaller gen_6989586621680348135_a5Cac)))
               (smaller gen_6989586621680348135_a5Cac))
    instance Branching (Pat_bar_2_6989586621680348131_a5Ca8 [Char] a_a5Boc) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680348131_a5Ca8
    type instance Hash "bar" 2 = "bar#2"
test/Pred_test.hs:42:1-30: Splicing declarations
    derive typeRep {typ = ''Exp}
  ======>
    type instance Rep Exp = SizedSum (Sum (Con  'Val) (Con  'Var)) (Con  'Add)
    data Rep_Val_a5GFQ (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type) self_a5GFS
      where
        Mk_Val_a5GFR :: forall (v_a5GD1 :: GHC.Types.Type)
                               (a_a5GD2 :: GHC.Types.Type)
                               self_a5GFS.
                        a_a5GD2
                        -> Rep_Val_a5GFQ (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type) self_a5GFS
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Val_a5GFQ (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type)) (Exp v_a5GD1 a_a5GD2) where
      alg (Mk_Val_a5GFR v1) = Val v1
    instance (Arbitrary (v_a5GD1 :: GHC.Types.Type),
              Arbitrary (a_a5GD2 :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Val_a5GFQ (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type)) (Exp v_a5GD1 a_a5GD2) where
      liftFix gen_a5GFT = ((<*>) (pure Mk_Val_a5GFR)) arbitrary
    instance Branching (Rep_Val_a5GFQ (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Val"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Val = Some2 Rep_Val_a5GFQ
    data Rep_Var_a5GFU (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type) self_a5GFW
      where
        Mk_Var_a5GFV :: forall (v_a5GD1 :: GHC.Types.Type)
                               (a_a5GD2 :: GHC.Types.Type)
                               self_a5GFW.
                        v_a5GD1
                        -> Rep_Var_a5GFU (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type) self_a5GFW
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Var_a5GFU (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type)) (Exp v_a5GD1 a_a5GD2) where
      alg (Mk_Var_a5GFV v1) = Var v1
    instance (Arbitrary (v_a5GD1 :: GHC.Types.Type),
              Arbitrary (a_a5GD2 :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Var_a5GFU (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type)) (Exp v_a5GD1 a_a5GD2) where
      liftFix gen_a5GFX = ((<*>) (pure Mk_Var_a5GFV)) arbitrary
    instance Branching (Rep_Var_a5GFU (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Var"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Con  'Var = Some2 Rep_Var_a5GFU
    data Rep_Add_a5GFY (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type) self_a5GG0
      where
        Mk_Add_a5GFZ :: forall (v_a5GD1 :: GHC.Types.Type)
                               (a_a5GD2 :: GHC.Types.Type)
                               self_a5GG0.
                        self_a5GG0
                        -> self_a5GG0
                           -> Rep_Add_a5GFY (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type) self_a5GG0
      deriving (Functor, Show, Generic)
    instance Algebra (Rep_Add_a5GFY (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type)) (Exp v_a5GD1 a_a5GD2) where
      alg (Mk_Add_a5GFZ v1 v2) = (Add v1) v2
    instance (Arbitrary (v_a5GD1 :: GHC.Types.Type),
              Arbitrary (a_a5GD2 :: GHC.Types.Type)) =>
             FixArbitrary (Rep_Add_a5GFY (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type)) (Exp v_a5GD1 a_a5GD2) where
      liftFix gen_a5GG1
        = ((<*>) (((<*>) (pure Mk_Add_a5GFZ)) (smaller gen_a5GG1)))
            (smaller gen_a5GG1)
    instance Branching (Rep_Add_a5GFY (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type)) where
      alias = Data.Vector.singleton "Add"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Con  'Add = Some2 Rep_Add_a5GFY
test/Pred_test.hs:50:1-29: Splicing declarations
    derive patRep {fun = 'foo}
  ======>
    type instance Pat "foo" = Sum (Pat "foo#1") (Pat "foo#2")
    data Pat_foo_1_6989586621680366979_a5H48 (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type) self_a5H4f
      where
        Pat_foo_1_6989586621680366981_a5H4a :: forall (v_a5GD1 :: GHC.Types.Type)
                                                      (a_a5GD2 :: GHC.Types.Type)
                                                      self_a5H4f.
                                               self_a5H4f
                                               -> self_a5H4f
                                                  -> self_a5H4f
                                                     -> Pat_foo_1_6989586621680366979_a5H48 (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type) self_a5H4f
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_1_6989586621680366979_a5H48 v_a5GD1 a_a5GD2) (Exp v_a5GD1 a_a5GD2) where
      alg (Pat_foo_1_6989586621680366981_a5H4a v1 v2 v3)
        = (Add ((Add v1) v2)) v3
    instance (Arbitrary v_a5GD1, Arbitrary a_a5GD2) =>
             FixArbitrary (Pat_foo_1_6989586621680366979_a5H48 v_a5GD1 a_a5GD2) (Exp v_a5GD1 a_a5GD2) where
      liftFix gen_6989586621680366983_a5H4c
        = ((satisfy "foo#1")
             (\ pat_6989586621680366985_a5H4e
                -> case step pat_6989586621680366985_a5H4e of { _ -> True }))
            (((<*>)
                (((<*>)
                    (((<*>) (pure Pat_foo_1_6989586621680366981_a5H4a))
                       (smaller gen_6989586621680366983_a5H4c)))
                   (smaller gen_6989586621680366983_a5H4c)))
               (smaller gen_6989586621680366983_a5H4c))
    instance Branching (Pat_foo_1_6989586621680366979_a5H48 v_a5GD1 a_a5GD2) where
      alias = Data.Vector.singleton "foo#1"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 3
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#1" = Some2 Pat_foo_1_6989586621680366979_a5H48
    type instance Hash "foo" 1 = "foo#1"
    data Pat_foo_2_6989586621680367012_a5H4F (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type) self_a5H4M
      where
        Pat_foo_2_6989586621680367014_a5H4H :: forall (v_a5GD1 :: GHC.Types.Type)
                                                      (a_a5GD2 :: GHC.Types.Type)
                                                      self_a5H4M.
                                               a_a5GD2
                                               -> self_a5H4M
                                                  -> Pat_foo_2_6989586621680367012_a5H4F (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type) self_a5H4M
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_foo_2_6989586621680367012_a5H4F v_a5GD1 a_a5GD2) (Exp v_a5GD1 a_a5GD2) where
      alg (Pat_foo_2_6989586621680367014_a5H4H v1 v2) = (Add (Val v1)) v2
    instance (Arbitrary v_a5GD1, Arbitrary a_a5GD2) =>
             FixArbitrary (Pat_foo_2_6989586621680367012_a5H4F v_a5GD1 a_a5GD2) (Exp v_a5GD1 a_a5GD2) where
      liftFix gen_6989586621680367016_a5H4J
        = ((satisfy "foo#2")
             (\ pat_6989586621680367018_a5H4L
                -> case step pat_6989586621680367018_a5H4L of
                     Add (Add _ _) _ -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_foo_2_6989586621680367014_a5H4H)) arbitrary))
               (smaller gen_6989586621680367016_a5H4J))
    instance Branching (Pat_foo_2_6989586621680367012_a5H4F v_a5GD1 a_a5GD2) where
      alias = Data.Vector.singleton "foo#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 1
      sigma = Data.Vector.singleton 1
    type instance Pat "foo#2" = Some2 Pat_foo_2_6989586621680367012_a5H4F
    type instance Hash "foo" 2 = "foo#2"
test/Pred_test.hs:60:1-29: Splicing declarations
    derive patRep {fun = 'bar}
  ======>
    type instance Pat "bar" = Sum (Pat "bar#1") (Pat "bar#2")
    data Pat_bar_1_6989586621680368226_a5Hof (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type) self_a5Hom
      where
        Pat_bar_1_6989586621680368228_a5Hoh :: forall (v_a5GD1 :: GHC.Types.Type)
                                                      (a_a5GD2 :: GHC.Types.Type)
                                                      self_a5Hom.
                                               a_a5GD2
                                               -> Pat_bar_1_6989586621680368226_a5Hof (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type) self_a5Hom
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_1_6989586621680368226_a5Hof [Char] a_a5GD2) (Exp [Char] a_a5GD2) where
      alg (Pat_bar_1_6989586621680368228_a5Hoh v1)
        = (Add (Var "** HOHOHO **")) (Val v1)
    instance Arbitrary a_a5GD2 =>
             FixArbitrary (Pat_bar_1_6989586621680368226_a5Hof [Char] a_a5GD2) (Exp [Char] a_a5GD2) where
      liftFix gen_6989586621680368230_a5Hoj
        = ((satisfy "bar#1")
             (\ pat_6989586621680368232_a5Hol
                -> case step pat_6989586621680368232_a5Hol of { _ -> True }))
            (((<*>) (pure Pat_bar_1_6989586621680368228_a5Hoh)) arbitrary)
    instance Branching (Pat_bar_1_6989586621680368226_a5Hof [Char] a_a5GD2) where
      alias = Data.Vector.singleton "bar#1"
      terminals = Data.Vector.singleton True
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 0
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#1" = Some2 Pat_bar_1_6989586621680368226_a5Hof
    type instance Hash "bar" 1 = "bar#1"
    data Pat_bar_2_6989586621680368271_a5HoY (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type) self_a5Hp5
      where
        Pat_bar_2_6989586621680368273_a5Hp0 :: forall (v_a5GD1 :: GHC.Types.Type)
                                                      (a_a5GD2 :: GHC.Types.Type)
                                                      self_a5Hp5.
                                               self_a5Hp5
                                               -> self_a5Hp5
                                                  -> Pat_bar_2_6989586621680368271_a5HoY (v_a5GD1 :: GHC.Types.Type) (a_a5GD2 :: GHC.Types.Type) self_a5Hp5
      deriving (Functor, Show, Generic)
    instance Algebra (Pat_bar_2_6989586621680368271_a5HoY [Char] a_a5GD2) (Exp [Char] a_a5GD2) where
      alg (Pat_bar_2_6989586621680368273_a5Hp0 v1 v2) = (Add v1) v2
    instance Arbitrary a_a5GD2 =>
             FixArbitrary (Pat_bar_2_6989586621680368271_a5HoY [Char] a_a5GD2) (Exp [Char] a_a5GD2) where
      liftFix gen_6989586621680368275_a5Hp2
        = ((satisfy "bar#2")
             (\ pat_6989586621680368277_a5Hp4
                -> case step pat_6989586621680368277_a5Hp4 of
                     Add (Var "** HOHOHO **") (Val _) -> False
                     _ -> True))
            (((<*>)
                (((<*>) (pure Pat_bar_2_6989586621680368273_a5Hp0))
                   (smaller gen_6989586621680368275_a5Hp2)))
               (smaller gen_6989586621680368275_a5Hp2))
    instance Branching (Pat_bar_2_6989586621680368271_a5HoY [Char] a_a5GD2) where
      alias = Data.Vector.singleton "bar#2"
      terminals = Data.Vector.singleton False
      probs = Data.Vector.singleton 1
      beta = Data.Vector.singleton 2
      sigma = Data.Vector.singleton 1
    type instance Pat "bar#2" = Some2 Pat_bar_2_6989586621680368271_a5HoY
    type instance Hash "bar" 2 = "bar#2"
