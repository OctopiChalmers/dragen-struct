Using configuration for dragen2:bench:dragen2-benchmarks to load /home/agustin/Source/git/OctopiChalmers/dragen2/bench/Html.hs
Using main module: 1. Package `dragen2' component bench:dragen2-benchmarks with main-is file: /home/agustin/Source/git/OctopiChalmers/dragen2/bench/Main.hs
The following GHC options are incompatible with GHCi and have not been passed to it: -O2
Configuring GHCi with the following packages: dragen2
GHCi, version 8.6.3: http://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/agustin/.ghci
[1 of 2] Compiling BlockTable       ( /home/agustin/Source/git/OctopiChalmers/dragen2/bench/BlockTable.hs, interpreted )
[2 of 2] Compiling Html             ( /home/agustin/Source/git/OctopiChalmers/dragen2/bench/Html.hs, interpreted )
[92m[DRAGEN] reified data constructors:
[0mHtml :: {getHtmlElements :: ([HtmlElement])} -> Html
[92m[DRAGEN] derived data constructor representation:
[0mdata Rep_Con_Html_0 r_1 where
  Mk_Con_Html_2 :: forall r_1 . ([HtmlElement]) -> Rep_Con_Html_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Con_Html_0 Html
  where alg (Mk_Con_Html_2 v_3) = Html v_3
instance BoundedArbitrary1 Rep_Con_Html_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Con_Html_2) (genList (boundedArbitrary (max 0 ((-) _depth_5 1))))
type instance Con "Html" = Rep_Con_Html_0
[93m[DRAGEN] couldn't find any terminal construction:
Html :: {getHtmlElements :: ([HtmlElement])} -> Html
[0m[92m[DRAGEN] derived type instance:
[0mtype instance Rep "Html" = Term (Con "Html")
[92m[DRAGEN] reifying infix name: 
[0m"nest"
[92m[DRAGEN] reifying infix name: 
[0m"combine"
[92m[DRAGEN] reifying name: 
[0m"noHtml"
[92m[DRAGEN] reifying name: 
[0m"isNoHtml"
[92m[DRAGEN] reifying name: 
[0m"tag"
[92m[DRAGEN] reifying name: 
[0m"itag"
[92m[DRAGEN] reifying name: 
[0m"emptyAttr"
[92m[DRAGEN] reifying name: 
[0m"intAttr"
[92m[DRAGEN] reifying name: 
[0m"strAttr"
[92m[DRAGEN] reifying name: 
[0m"stringToHtmlString"
[92m[DRAGEN] reifying name: 
[0m"primHtml"
[92m[DRAGEN] reifying name: 
[0m"stringToHtml"
[92m[DRAGEN] reifying name: 
[0m"lineToHtml"
[92m[DRAGEN] reifying name: 
[0m"address"
[92m[DRAGEN] reifying name: 
[0m"anchor"
[92m[DRAGEN] reifying name: 
[0m"applet"
[92m[DRAGEN] reifying name: 
[0m"area"
[92m[DRAGEN] reifying name: 
[0m"basefont"
[92m[DRAGEN] reifying name: 
[0m"big"
[92m[DRAGEN] reifying name: 
[0m"blockquote"
[92m[DRAGEN] reifying name: 
[0m"body"
[92m[DRAGEN] reifying name: 
[0m"bold"
[92m[DRAGEN] reifying name: 
[0m"br"
[92m[DRAGEN] reifying name: 
[0m"caption"
[92m[DRAGEN] reifying name: 
[0m"center"
[92m[DRAGEN] reifying name: 
[0m"cite"
[92m[DRAGEN] reifying name: 
[0m"ddef"
[92m[DRAGEN] reifying name: 
[0m"define"
[92m[DRAGEN] reifying name: 
[0m"dlist"
[92m[DRAGEN] reifying name: 
[0m"dterm"
[92m[DRAGEN] reifying name: 
[0m"emphasize"
[92m[DRAGEN] reifying name: 
[0m"fieldset"
[92m[DRAGEN] reifying name: 
[0m"font"
[92m[DRAGEN] reifying name: 
[0m"form"
[92m[DRAGEN] reifying name: 
[0m"frame"
[92m[DRAGEN] reifying name: 
[0m"frameset"
[92m[DRAGEN] reifying name: 
[0m"h1"
[92m[DRAGEN] reifying name: 
[0m"h2"
[92m[DRAGEN] reifying name: 
[0m"h3"
[92m[DRAGEN] reifying name: 
[0m"h4"
[92m[DRAGEN] reifying name: 
[0m"h5"
[92m[DRAGEN] reifying name: 
[0m"h6"
[92m[DRAGEN] reifying name: 
[0m"header"
[92m[DRAGEN] reifying name: 
[0m"hr"
[92m[DRAGEN] reifying name: 
[0m"image"
[92m[DRAGEN] reifying name: 
[0m"input"
[92m[DRAGEN] reifying name: 
[0m"italics"
[92m[DRAGEN] reifying name: 
[0m"keyboard"
[92m[DRAGEN] reifying name: 
[0m"legend"
[92m[DRAGEN] reifying name: 
[0m"li"
[92m[DRAGEN] reifying name: 
[0m"meta"
[92m[DRAGEN] reifying name: 
[0m"noframes"
[92m[DRAGEN] reifying name: 
[0m"olist"
[92m[DRAGEN] reifying name: 
[0m"option"
[92m[DRAGEN] reifying name: 
[0m"paragraph"
[92m[DRAGEN] reifying name: 
[0m"param"
[92m[DRAGEN] reifying name: 
[0m"pre"
[92m[DRAGEN] reifying name: 
[0m"samp"
[92m[DRAGEN] reifying name: 
[0m"select"
[92m[DRAGEN] reifying name: 
[0m"small"
[92m[DRAGEN] reifying name: 
[0m"strong"
[92m[DRAGEN] reifying name: 
[0m"style"
[92m[DRAGEN] reifying name: 
[0m"sub"
[92m[DRAGEN] reifying name: 
[0m"sup"
[92m[DRAGEN] reifying name: 
[0m"table"
[92m[DRAGEN] reifying name: 
[0m"td"
[92m[DRAGEN] reifying name: 
[0m"textarea"
[92m[DRAGEN] reifying name: 
[0m"th"
[92m[DRAGEN] reifying name: 
[0m"thebase"
[92m[DRAGEN] reifying name: 
[0m"thecode"
[92m[DRAGEN] reifying name: 
[0m"thediv"
[92m[DRAGEN] reifying name: 
[0m"thehtml"
[92m[DRAGEN] reifying name: 
[0m"thelink"
[92m[DRAGEN] reifying name: 
[0m"themap"
[92m[DRAGEN] reifying name: 
[0m"thespan"
[92m[DRAGEN] reifying name: 
[0m"thetitle"
[92m[DRAGEN] reifying name: 
[0m"tr"
[92m[DRAGEN] reifying name: 
[0m"tt"
[92m[DRAGEN] reifying name: 
[0m"ulist"
[92m[DRAGEN] reifying name: 
[0m"underline"
[92m[DRAGEN] reifying name: 
[0m"variable"
[92m[DRAGEN] reifying name: 
[0m"action"
[92m[DRAGEN] reifying name: 
[0m"align"
[92m[DRAGEN] reifying name: 
[0m"alink"
[92m[DRAGEN] reifying name: 
[0m"alt"
[92m[DRAGEN] reifying name: 
[0m"altcode"
[92m[DRAGEN] reifying name: 
[0m"archive"
[92m[DRAGEN] reifying name: 
[0m"background"
[92m[DRAGEN] reifying name: 
[0m"base"
[92m[DRAGEN] reifying name: 
[0m"bgcolor"
[92m[DRAGEN] reifying name: 
[0m"border"
[92m[DRAGEN] reifying name: 
[0m"bordercolor"
[92m[DRAGEN] reifying name: 
[0m"cellpadding"
[92m[DRAGEN] reifying name: 
[0m"cellspacing"
[92m[DRAGEN] reifying name: 
[0m"checked"
[92m[DRAGEN] reifying name: 
[0m"clear"
[92m[DRAGEN] reifying name: 
[0m"code"
[92m[DRAGEN] reifying name: 
[0m"codebase"
[92m[DRAGEN] reifying name: 
[0m"color"
[92m[DRAGEN] reifying name: 
[0m"cols"
[92m[DRAGEN] reifying name: 
[0m"colspan"
[92m[DRAGEN] reifying name: 
[0m"compact"
[92m[DRAGEN] reifying name: 
[0m"content"
[92m[DRAGEN] reifying name: 
[0m"coords"
[92m[DRAGEN] reifying name: 
[0m"enctype"
[92m[DRAGEN] reifying name: 
[0m"face"
[92m[DRAGEN] reifying name: 
[0m"frameborder"
[92m[DRAGEN] reifying name: 
[0m"height"
[92m[DRAGEN] reifying name: 
[0m"href"
[92m[DRAGEN] reifying name: 
[0m"hspace"
[92m[DRAGEN] reifying name: 
[0m"httpequiv"
[92m[DRAGEN] reifying name: 
[0m"identifier"
[92m[DRAGEN] reifying name: 
[0m"ismap"
[92m[DRAGEN] reifying name: 
[0m"lang"
[92m[DRAGEN] reifying name: 
[0m"link"
[92m[DRAGEN] reifying name: 
[0m"marginheight"
[92m[DRAGEN] reifying name: 
[0m"marginwidth"
[92m[DRAGEN] reifying name: 
[0m"maxlength"
[92m[DRAGEN] reifying name: 
[0m"method"
[92m[DRAGEN] reifying name: 
[0m"multiple"
[92m[DRAGEN] reifying name: 
[0m"name"
[92m[DRAGEN] reifying name: 
[0m"nohref"
[92m[DRAGEN] reifying name: 
[0m"noresize"
[92m[DRAGEN] reifying name: 
[0m"noshade"
[92m[DRAGEN] reifying name: 
[0m"nowrap"
[92m[DRAGEN] reifying name: 
[0m"rel"
[92m[DRAGEN] reifying name: 
[0m"rev"
[92m[DRAGEN] reifying name: 
[0m"rows"
[92m[DRAGEN] reifying name: 
[0m"rowspan"
[92m[DRAGEN] reifying name: 
[0m"rules"
[92m[DRAGEN] reifying name: 
[0m"scrolling"
[92m[DRAGEN] reifying name: 
[0m"selected"
[92m[DRAGEN] reifying name: 
[0m"shape"
[92m[DRAGEN] reifying name: 
[0m"size"
[92m[DRAGEN] reifying name: 
[0m"src"
[92m[DRAGEN] reifying name: 
[0m"start"
[92m[DRAGEN] reifying name: 
[0m"target"
[92m[DRAGEN] reifying name: 
[0m"text"
[92m[DRAGEN] reifying name: 
[0m"theclass"
[92m[DRAGEN] reifying name: 
[0m"thestyle"
[92m[DRAGEN] reifying name: 
[0m"thetype"
[92m[DRAGEN] reifying name: 
[0m"title"
[92m[DRAGEN] reifying name: 
[0m"usemap"
[92m[DRAGEN] reifying name: 
[0m"valign"
[92m[DRAGEN] reifying name: 
[0m"value"
[92m[DRAGEN] reifying name: 
[0m"version"
[92m[DRAGEN] reifying name: 
[0m"vlink"
[92m[DRAGEN] reifying name: 
[0m"vspace"
[92m[DRAGEN] reifying name: 
[0m"width"
[92m[DRAGEN] reifying name: 
[0m"validHtmlTags"
[92m[DRAGEN] reifying name: 
[0m"validHtmlITags"
[92m[DRAGEN] reifying name: 
[0m"validHtmlAttrs"
[92m[DRAGEN] reifying name: 
[0m"aqua"
[92m[DRAGEN] reifying name: 
[0m"black"
[92m[DRAGEN] reifying name: 
[0m"blue"
[92m[DRAGEN] reifying name: 
[0m"fuchsia"
[92m[DRAGEN] reifying name: 
[0m"gray"
[92m[DRAGEN] reifying name: 
[0m"green"
[92m[DRAGEN] reifying name: 
[0m"lime"
[92m[DRAGEN] reifying name: 
[0m"maroon"
[92m[DRAGEN] reifying name: 
[0m"navy"
[92m[DRAGEN] reifying name: 
[0m"olive"
[92m[DRAGEN] reifying name: 
[0m"purple"
[92m[DRAGEN] reifying name: 
[0m"red"
[92m[DRAGEN] reifying name: 
[0m"silver"
[92m[DRAGEN] reifying name: 
[0m"teal"
[92m[DRAGEN] reifying name: 
[0m"yellow"
[92m[DRAGEN] reifying name: 
[0m"white"
[92m[DRAGEN] reifying name: 
[0m"linesToHtml"
[92m[DRAGEN] reifying name: 
[0m"primHtmlChar"
[92m[DRAGEN] reifying name: 
[0m"copyright"
[92m[DRAGEN] reifying name: 
[0m"spaceHtml"
[92m[DRAGEN] reifying name: 
[0m"bullet"
[92m[DRAGEN] reifying name: 
[0m"p"
[92m[DRAGEN] reifying name: 
[0m"mkHtmlTable"
[92m[DRAGEN] reifying name: 
[0m"above"
[92m[DRAGEN] reifying name: 
[0m"beside"
[92m[DRAGEN] reifying name: 
[0m"combineFn"
[92m[DRAGEN] reifying name: 
[0m"aboves"
[92m[DRAGEN] reifying name: 
[0m"besides"
[92m[DRAGEN] reifying name: 
[0m"renderTable"
[92m[DRAGEN] reifying name: 
[0m"simpleTable"
[92m[DRAGEN] reifying name: 
[0m"treeHtml"
[92m[DRAGEN] reifying name: 
[0m"treeColors"
[92m[DRAGEN] reifying name: 
[0m"hotlink"
[92m[DRAGEN] reifying name: 
[0m"widget"
[92m[DRAGEN] reifying name: 
[0m"checkbox"
[92m[DRAGEN] reifying name: 
[0m"hidden"
[92m[DRAGEN] reifying name: 
[0m"radio"
[92m[DRAGEN] reifying name: 
[0m"reset"
[92m[DRAGEN] reifying name: 
[0m"submit"
[92m[DRAGEN] reifying name: 
[0m"password"
[92m[DRAGEN] reifying name: 
[0m"textfield"
[92m[DRAGEN] reifying name: 
[0m"afile"
[92m[DRAGEN] reifying name: 
[0m"clickmap"
[92m[DRAGEN] reifying name: 
[0m"menu"
[92m[DRAGEN] reifying name: 
[0m"gui"
[92m[DRAGEN] reifying name: 
[0m"renderHtml"
[92m[DRAGEN] reifying name: 
[0m"prettyHtml"
[92m[DRAGEN] reifying name: 
[0m"renderHtml'"
[92m[DRAGEN] reifying name: 
[0m"prettyHtml'"
[92m[DRAGEN] reifying name: 
[0m"rmNL"
[92m[DRAGEN] reifying name: 
[0m"renderTag"
[92m[DRAGEN] reifying name: 
[0m"htmlSize"
[92m[DRAGEN] reifying name: 
[0m"htmlElementSize"
[92m[DRAGEN] reifying name: 
[0m"genHtml"
[92m[DRAGEN] reifying name: 
[0m"genHtmlElement"
[92m[DRAGEN] reifying name: 
[0m"genHtmlAttr"
[92m[DRAGEN] reifying name: 
[0m"genHtml'"
[92m[DRAGEN] extracted names from module Html:
[0mnest
combine
noHtml
isNoHtml
tag
itag
emptyAttr
intAttr
strAttr
stringToHtmlString
primHtml
stringToHtml
lineToHtml
address
anchor
applet
area
basefont
big
blockquote
body
bold
br
caption
center
cite
ddef
define
dlist
dterm
emphasize
fieldset
font
form
frame
frameset
h1
h2
h3
h4
h5
h6
header
hr
image
input
italics
keyboard
legend
li
meta
noframes
olist
option
paragraph
param
pre
samp
select
small
strong
style
sub
sup
table
td
textarea
th
thebase
thecode
thediv
thehtml
thelink
themap
thespan
thetitle
tr
tt
ulist
underline
variable
action
align
alink
alt
altcode
archive
background
base
bgcolor
border
bordercolor
cellpadding
cellspacing
checked
clear
code
codebase
color
cols
colspan
compact
content
coords
enctype
face
frameborder
height
href
hspace
httpequiv
identifier
ismap
lang
link
marginheight
marginwidth
maxlength
method
multiple
name
nohref
noresize
noshade
nowrap
rel
rev
rows
rowspan
rules
scrolling
selected
shape
size
src
start
target
text
theclass
thestyle
thetype
title
usemap
valign
value
version
vlink
vspace
width
validHtmlTags
validHtmlITags
validHtmlAttrs
aqua
black
blue
fuchsia
gray
green
lime
maroon
navy
olive
purple
red
silver
teal
yellow
white
linesToHtml
primHtmlChar
copyright
spaceHtml
bullet
p
mkHtmlTable
above
beside
combineFn
aboves
besides
renderTable
simpleTable
treeHtml
treeColors
hotlink
widget
checkbox
hidden
radio
reset
submit
password
textfield
afile
clickmap
menu
gui
renderHtml
prettyHtml
renderHtml'
prettyHtml'
rmNL
renderTag
htmlSize
htmlElementSize
genHtml
genHtmlElement
genHtmlAttr
[92m[DRAGEN] ignored constructors:
[0mcombine
renderTable
treeHtml
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_noHtml_0 r_1 where Mk_Fun_noHtml_2 :: forall r_1 . Rep_Fun_noHtml_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_noHtml_0 Html
  where alg (Mk_Fun_noHtml_2) = noHtml
instance BoundedArbitrary1 Rep_Fun_noHtml_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_noHtml_2
type instance Fun "noHtml" = Rep_Fun_noHtml_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_tag_0 r_1 where
  Mk_Fun_tag_2 :: forall r_1 . String -> r_1 -> Rep_Fun_tag_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_tag_0 Html
  where alg (Mk_Fun_tag_2 v_3 v_4) = tag v_3 v_4
instance BoundedArbitrary1 Rep_Fun_tag_0
  where liftBoundedGen _gen_5 _depth_6 = (<*>) ((<*>) (pure Mk_Fun_tag_2) arbitrary) (_gen_5 (max 0 ((-) _depth_6 1)))
type instance Fun "tag" = Rep_Fun_tag_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_itag_0 r_1 where
  Mk_Fun_itag_2 :: forall r_1 . String -> Rep_Fun_itag_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_itag_0 Html
  where alg (Mk_Fun_itag_2 v_3) = itag v_3
instance BoundedArbitrary1 Rep_Fun_itag_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_itag_2) arbitrary
type instance Fun "itag" = Rep_Fun_itag_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_primHtml_0 r_1 where
  Mk_Fun_primHtml_2 :: forall r_1 . String -> Rep_Fun_primHtml_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_primHtml_0 Html
  where alg (Mk_Fun_primHtml_2 v_3) = primHtml v_3
instance BoundedArbitrary1 Rep_Fun_primHtml_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_primHtml_2) arbitrary
type instance Fun "primHtml" = Rep_Fun_primHtml_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_stringToHtml_0 r_1 where
  Mk_Fun_stringToHtml_2 :: forall r_1 . String -> Rep_Fun_stringToHtml_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_stringToHtml_0 Html
  where alg (Mk_Fun_stringToHtml_2 v_3) = stringToHtml v_3
instance BoundedArbitrary1 Rep_Fun_stringToHtml_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_stringToHtml_2) arbitrary
type instance Fun "stringToHtml" = Rep_Fun_stringToHtml_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_lineToHtml_0 r_1 where
  Mk_Fun_lineToHtml_2 :: forall r_1 . String -> Rep_Fun_lineToHtml_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_lineToHtml_0 Html
  where alg (Mk_Fun_lineToHtml_2 v_3) = lineToHtml v_3
instance BoundedArbitrary1 Rep_Fun_lineToHtml_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_lineToHtml_2) arbitrary
type instance Fun "lineToHtml" = Rep_Fun_lineToHtml_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_address_0 r_1 where
  Mk_Fun_address_2 :: forall r_1 . r_1 -> Rep_Fun_address_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_address_0 Html
  where alg (Mk_Fun_address_2 v_3) = address v_3
instance BoundedArbitrary1 Rep_Fun_address_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_address_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "address" = Rep_Fun_address_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_anchor_0 r_1 where
  Mk_Fun_anchor_2 :: forall r_1 . r_1 -> Rep_Fun_anchor_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_anchor_0 Html
  where alg (Mk_Fun_anchor_2 v_3) = anchor v_3
instance BoundedArbitrary1 Rep_Fun_anchor_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_anchor_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "anchor" = Rep_Fun_anchor_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_applet_0 r_1 where
  Mk_Fun_applet_2 :: forall r_1 . r_1 -> Rep_Fun_applet_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_applet_0 Html
  where alg (Mk_Fun_applet_2 v_3) = applet v_3
instance BoundedArbitrary1 Rep_Fun_applet_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_applet_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "applet" = Rep_Fun_applet_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_area_0 r_1 where Mk_Fun_area_2 :: forall r_1 . Rep_Fun_area_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_area_0 Html
  where alg (Mk_Fun_area_2) = area
instance BoundedArbitrary1 Rep_Fun_area_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_area_2
type instance Fun "area" = Rep_Fun_area_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_basefont_0 r_1 where
  Mk_Fun_basefont_2 :: forall r_1 . Rep_Fun_basefont_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_basefont_0 Html
  where alg (Mk_Fun_basefont_2) = basefont
instance BoundedArbitrary1 Rep_Fun_basefont_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_basefont_2
type instance Fun "basefont" = Rep_Fun_basefont_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_big_0 r_1 where Mk_Fun_big_2 :: forall r_1 . r_1 -> Rep_Fun_big_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_big_0 Html
  where alg (Mk_Fun_big_2 v_3) = big v_3
instance BoundedArbitrary1 Rep_Fun_big_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_big_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "big" = Rep_Fun_big_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_blockquote_0 r_1 where
  Mk_Fun_blockquote_2 :: forall r_1 . r_1 -> Rep_Fun_blockquote_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_blockquote_0 Html
  where alg (Mk_Fun_blockquote_2 v_3) = blockquote v_3
instance BoundedArbitrary1 Rep_Fun_blockquote_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_blockquote_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "blockquote" = Rep_Fun_blockquote_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_body_0 r_1 where Mk_Fun_body_2 :: forall r_1 . r_1 -> Rep_Fun_body_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_body_0 Html
  where alg (Mk_Fun_body_2 v_3) = body v_3
instance BoundedArbitrary1 Rep_Fun_body_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_body_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "body" = Rep_Fun_body_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_bold_0 r_1 where Mk_Fun_bold_2 :: forall r_1 . r_1 -> Rep_Fun_bold_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_bold_0 Html
  where alg (Mk_Fun_bold_2 v_3) = bold v_3
instance BoundedArbitrary1 Rep_Fun_bold_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_bold_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "bold" = Rep_Fun_bold_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_br_0 r_1 where Mk_Fun_br_2 :: forall r_1 . Rep_Fun_br_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_br_0 Html
  where alg (Mk_Fun_br_2) = br
instance BoundedArbitrary1 Rep_Fun_br_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_br_2
type instance Fun "br" = Rep_Fun_br_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_caption_0 r_1 where
  Mk_Fun_caption_2 :: forall r_1 . r_1 -> Rep_Fun_caption_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_caption_0 Html
  where alg (Mk_Fun_caption_2 v_3) = caption v_3
instance BoundedArbitrary1 Rep_Fun_caption_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_caption_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "caption" = Rep_Fun_caption_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_center_0 r_1 where
  Mk_Fun_center_2 :: forall r_1 . r_1 -> Rep_Fun_center_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_center_0 Html
  where alg (Mk_Fun_center_2 v_3) = center v_3
instance BoundedArbitrary1 Rep_Fun_center_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_center_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "center" = Rep_Fun_center_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_cite_0 r_1 where Mk_Fun_cite_2 :: forall r_1 . r_1 -> Rep_Fun_cite_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_cite_0 Html
  where alg (Mk_Fun_cite_2 v_3) = cite v_3
instance BoundedArbitrary1 Rep_Fun_cite_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_cite_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "cite" = Rep_Fun_cite_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_ddef_0 r_1 where Mk_Fun_ddef_2 :: forall r_1 . r_1 -> Rep_Fun_ddef_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_ddef_0 Html
  where alg (Mk_Fun_ddef_2 v_3) = ddef v_3
instance BoundedArbitrary1 Rep_Fun_ddef_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_ddef_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "ddef" = Rep_Fun_ddef_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_define_0 r_1 where
  Mk_Fun_define_2 :: forall r_1 . r_1 -> Rep_Fun_define_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_define_0 Html
  where alg (Mk_Fun_define_2 v_3) = define v_3
instance BoundedArbitrary1 Rep_Fun_define_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_define_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "define" = Rep_Fun_define_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_dlist_0 r_1 where
  Mk_Fun_dlist_2 :: forall r_1 . r_1 -> Rep_Fun_dlist_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_dlist_0 Html
  where alg (Mk_Fun_dlist_2 v_3) = dlist v_3
instance BoundedArbitrary1 Rep_Fun_dlist_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_dlist_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "dlist" = Rep_Fun_dlist_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_dterm_0 r_1 where
  Mk_Fun_dterm_2 :: forall r_1 . r_1 -> Rep_Fun_dterm_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_dterm_0 Html
  where alg (Mk_Fun_dterm_2 v_3) = dterm v_3
instance BoundedArbitrary1 Rep_Fun_dterm_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_dterm_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "dterm" = Rep_Fun_dterm_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_emphasize_0 r_1 where
  Mk_Fun_emphasize_2 :: forall r_1 . r_1 -> Rep_Fun_emphasize_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_emphasize_0 Html
  where alg (Mk_Fun_emphasize_2 v_3) = emphasize v_3
instance BoundedArbitrary1 Rep_Fun_emphasize_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_emphasize_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "emphasize" = Rep_Fun_emphasize_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_fieldset_0 r_1 where
  Mk_Fun_fieldset_2 :: forall r_1 . r_1 -> Rep_Fun_fieldset_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_fieldset_0 Html
  where alg (Mk_Fun_fieldset_2 v_3) = fieldset v_3
instance BoundedArbitrary1 Rep_Fun_fieldset_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_fieldset_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "fieldset" = Rep_Fun_fieldset_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_font_0 r_1 where Mk_Fun_font_2 :: forall r_1 . r_1 -> Rep_Fun_font_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_font_0 Html
  where alg (Mk_Fun_font_2 v_3) = font v_3
instance BoundedArbitrary1 Rep_Fun_font_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_font_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "font" = Rep_Fun_font_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_form_0 r_1 where Mk_Fun_form_2 :: forall r_1 . r_1 -> Rep_Fun_form_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_form_0 Html
  where alg (Mk_Fun_form_2 v_3) = form v_3
instance BoundedArbitrary1 Rep_Fun_form_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_form_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "form" = Rep_Fun_form_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_frame_0 r_1 where
  Mk_Fun_frame_2 :: forall r_1 . r_1 -> Rep_Fun_frame_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_frame_0 Html
  where alg (Mk_Fun_frame_2 v_3) = frame v_3
instance BoundedArbitrary1 Rep_Fun_frame_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_frame_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "frame" = Rep_Fun_frame_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_frameset_0 r_1 where
  Mk_Fun_frameset_2 :: forall r_1 . r_1 -> Rep_Fun_frameset_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_frameset_0 Html
  where alg (Mk_Fun_frameset_2 v_3) = frameset v_3
instance BoundedArbitrary1 Rep_Fun_frameset_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_frameset_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "frameset" = Rep_Fun_frameset_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_h1_0 r_1 where Mk_Fun_h1_2 :: forall r_1 . r_1 -> Rep_Fun_h1_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_h1_0 Html
  where alg (Mk_Fun_h1_2 v_3) = h1 v_3
instance BoundedArbitrary1 Rep_Fun_h1_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_h1_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "h1" = Rep_Fun_h1_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_h2_0 r_1 where Mk_Fun_h2_2 :: forall r_1 . r_1 -> Rep_Fun_h2_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_h2_0 Html
  where alg (Mk_Fun_h2_2 v_3) = h2 v_3
instance BoundedArbitrary1 Rep_Fun_h2_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_h2_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "h2" = Rep_Fun_h2_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_h3_0 r_1 where Mk_Fun_h3_2 :: forall r_1 . r_1 -> Rep_Fun_h3_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_h3_0 Html
  where alg (Mk_Fun_h3_2 v_3) = h3 v_3
instance BoundedArbitrary1 Rep_Fun_h3_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_h3_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "h3" = Rep_Fun_h3_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_h4_0 r_1 where Mk_Fun_h4_2 :: forall r_1 . r_1 -> Rep_Fun_h4_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_h4_0 Html
  where alg (Mk_Fun_h4_2 v_3) = h4 v_3
instance BoundedArbitrary1 Rep_Fun_h4_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_h4_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "h4" = Rep_Fun_h4_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_h5_0 r_1 where Mk_Fun_h5_2 :: forall r_1 . r_1 -> Rep_Fun_h5_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_h5_0 Html
  where alg (Mk_Fun_h5_2 v_3) = h5 v_3
instance BoundedArbitrary1 Rep_Fun_h5_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_h5_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "h5" = Rep_Fun_h5_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_h6_0 r_1 where Mk_Fun_h6_2 :: forall r_1 . r_1 -> Rep_Fun_h6_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_h6_0 Html
  where alg (Mk_Fun_h6_2 v_3) = h6 v_3
instance BoundedArbitrary1 Rep_Fun_h6_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_h6_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "h6" = Rep_Fun_h6_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_header_0 r_1 where
  Mk_Fun_header_2 :: forall r_1 . r_1 -> Rep_Fun_header_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_header_0 Html
  where alg (Mk_Fun_header_2 v_3) = header v_3
instance BoundedArbitrary1 Rep_Fun_header_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_header_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "header" = Rep_Fun_header_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_hr_0 r_1 where Mk_Fun_hr_2 :: forall r_1 . Rep_Fun_hr_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_hr_0 Html
  where alg (Mk_Fun_hr_2) = hr
instance BoundedArbitrary1 Rep_Fun_hr_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_hr_2
type instance Fun "hr" = Rep_Fun_hr_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_image_0 r_1 where Mk_Fun_image_2 :: forall r_1 . Rep_Fun_image_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_image_0 Html
  where alg (Mk_Fun_image_2) = image
instance BoundedArbitrary1 Rep_Fun_image_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_image_2
type instance Fun "image" = Rep_Fun_image_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_input_0 r_1 where Mk_Fun_input_2 :: forall r_1 . Rep_Fun_input_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_input_0 Html
  where alg (Mk_Fun_input_2) = input
instance BoundedArbitrary1 Rep_Fun_input_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_input_2
type instance Fun "input" = Rep_Fun_input_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_italics_0 r_1 where
  Mk_Fun_italics_2 :: forall r_1 . r_1 -> Rep_Fun_italics_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_italics_0 Html
  where alg (Mk_Fun_italics_2 v_3) = italics v_3
instance BoundedArbitrary1 Rep_Fun_italics_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_italics_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "italics" = Rep_Fun_italics_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_keyboard_0 r_1 where
  Mk_Fun_keyboard_2 :: forall r_1 . r_1 -> Rep_Fun_keyboard_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_keyboard_0 Html
  where alg (Mk_Fun_keyboard_2 v_3) = keyboard v_3
instance BoundedArbitrary1 Rep_Fun_keyboard_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_keyboard_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "keyboard" = Rep_Fun_keyboard_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_legend_0 r_1 where
  Mk_Fun_legend_2 :: forall r_1 . r_1 -> Rep_Fun_legend_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_legend_0 Html
  where alg (Mk_Fun_legend_2 v_3) = legend v_3
instance BoundedArbitrary1 Rep_Fun_legend_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_legend_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "legend" = Rep_Fun_legend_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_li_0 r_1 where Mk_Fun_li_2 :: forall r_1 . r_1 -> Rep_Fun_li_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_li_0 Html
  where alg (Mk_Fun_li_2 v_3) = li v_3
instance BoundedArbitrary1 Rep_Fun_li_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_li_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "li" = Rep_Fun_li_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_meta_0 r_1 where Mk_Fun_meta_2 :: forall r_1 . Rep_Fun_meta_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_meta_0 Html
  where alg (Mk_Fun_meta_2) = meta
instance BoundedArbitrary1 Rep_Fun_meta_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_meta_2
type instance Fun "meta" = Rep_Fun_meta_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_noframes_0 r_1 where
  Mk_Fun_noframes_2 :: forall r_1 . r_1 -> Rep_Fun_noframes_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_noframes_0 Html
  where alg (Mk_Fun_noframes_2 v_3) = noframes v_3
instance BoundedArbitrary1 Rep_Fun_noframes_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_noframes_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "noframes" = Rep_Fun_noframes_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_olist_0 r_1 where
  Mk_Fun_olist_2 :: forall r_1 . r_1 -> Rep_Fun_olist_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_olist_0 Html
  where alg (Mk_Fun_olist_2 v_3) = olist v_3
instance BoundedArbitrary1 Rep_Fun_olist_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_olist_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "olist" = Rep_Fun_olist_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_option_0 r_1 where
  Mk_Fun_option_2 :: forall r_1 . r_1 -> Rep_Fun_option_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_option_0 Html
  where alg (Mk_Fun_option_2 v_3) = option v_3
instance BoundedArbitrary1 Rep_Fun_option_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_option_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "option" = Rep_Fun_option_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_paragraph_0 r_1 where
  Mk_Fun_paragraph_2 :: forall r_1 . r_1 -> Rep_Fun_paragraph_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_paragraph_0 Html
  where alg (Mk_Fun_paragraph_2 v_3) = paragraph v_3
instance BoundedArbitrary1 Rep_Fun_paragraph_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_paragraph_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "paragraph" = Rep_Fun_paragraph_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_param_0 r_1 where Mk_Fun_param_2 :: forall r_1 . Rep_Fun_param_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_param_0 Html
  where alg (Mk_Fun_param_2) = param
instance BoundedArbitrary1 Rep_Fun_param_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_param_2
type instance Fun "param" = Rep_Fun_param_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_pre_0 r_1 where Mk_Fun_pre_2 :: forall r_1 . r_1 -> Rep_Fun_pre_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_pre_0 Html
  where alg (Mk_Fun_pre_2 v_3) = pre v_3
instance BoundedArbitrary1 Rep_Fun_pre_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_pre_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "pre" = Rep_Fun_pre_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_samp_0 r_1 where Mk_Fun_samp_2 :: forall r_1 . r_1 -> Rep_Fun_samp_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_samp_0 Html
  where alg (Mk_Fun_samp_2 v_3) = samp v_3
instance BoundedArbitrary1 Rep_Fun_samp_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_samp_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "samp" = Rep_Fun_samp_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_select_0 r_1 where
  Mk_Fun_select_2 :: forall r_1 . r_1 -> Rep_Fun_select_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_select_0 Html
  where alg (Mk_Fun_select_2 v_3) = select v_3
instance BoundedArbitrary1 Rep_Fun_select_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_select_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "select" = Rep_Fun_select_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_small_0 r_1 where
  Mk_Fun_small_2 :: forall r_1 . r_1 -> Rep_Fun_small_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_small_0 Html
  where alg (Mk_Fun_small_2 v_3) = small v_3
instance BoundedArbitrary1 Rep_Fun_small_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_small_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "small" = Rep_Fun_small_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_strong_0 r_1 where
  Mk_Fun_strong_2 :: forall r_1 . r_1 -> Rep_Fun_strong_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_strong_0 Html
  where alg (Mk_Fun_strong_2 v_3) = strong v_3
instance BoundedArbitrary1 Rep_Fun_strong_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_strong_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "strong" = Rep_Fun_strong_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_style_0 r_1 where
  Mk_Fun_style_2 :: forall r_1 . r_1 -> Rep_Fun_style_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_style_0 Html
  where alg (Mk_Fun_style_2 v_3) = style v_3
instance BoundedArbitrary1 Rep_Fun_style_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_style_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "style" = Rep_Fun_style_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_sub_0 r_1 where Mk_Fun_sub_2 :: forall r_1 . r_1 -> Rep_Fun_sub_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_sub_0 Html
  where alg (Mk_Fun_sub_2 v_3) = sub v_3
instance BoundedArbitrary1 Rep_Fun_sub_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_sub_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "sub" = Rep_Fun_sub_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_sup_0 r_1 where Mk_Fun_sup_2 :: forall r_1 . r_1 -> Rep_Fun_sup_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_sup_0 Html
  where alg (Mk_Fun_sup_2 v_3) = sup v_3
instance BoundedArbitrary1 Rep_Fun_sup_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_sup_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "sup" = Rep_Fun_sup_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_table_0 r_1 where
  Mk_Fun_table_2 :: forall r_1 . r_1 -> Rep_Fun_table_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_table_0 Html
  where alg (Mk_Fun_table_2 v_3) = table v_3
instance BoundedArbitrary1 Rep_Fun_table_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_table_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "table" = Rep_Fun_table_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_td_0 r_1 where Mk_Fun_td_2 :: forall r_1 . r_1 -> Rep_Fun_td_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_td_0 Html
  where alg (Mk_Fun_td_2 v_3) = td v_3
instance BoundedArbitrary1 Rep_Fun_td_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_td_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "td" = Rep_Fun_td_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_textarea_0 r_1 where
  Mk_Fun_textarea_2 :: forall r_1 . r_1 -> Rep_Fun_textarea_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_textarea_0 Html
  where alg (Mk_Fun_textarea_2 v_3) = textarea v_3
instance BoundedArbitrary1 Rep_Fun_textarea_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_textarea_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "textarea" = Rep_Fun_textarea_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_th_0 r_1 where Mk_Fun_th_2 :: forall r_1 . r_1 -> Rep_Fun_th_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_th_0 Html
  where alg (Mk_Fun_th_2 v_3) = th v_3
instance BoundedArbitrary1 Rep_Fun_th_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_th_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "th" = Rep_Fun_th_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_thebase_0 r_1 where
  Mk_Fun_thebase_2 :: forall r_1 . Rep_Fun_thebase_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_thebase_0 Html
  where alg (Mk_Fun_thebase_2) = thebase
instance BoundedArbitrary1 Rep_Fun_thebase_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_thebase_2
type instance Fun "thebase" = Rep_Fun_thebase_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_thecode_0 r_1 where
  Mk_Fun_thecode_2 :: forall r_1 . r_1 -> Rep_Fun_thecode_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_thecode_0 Html
  where alg (Mk_Fun_thecode_2 v_3) = thecode v_3
instance BoundedArbitrary1 Rep_Fun_thecode_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_thecode_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "thecode" = Rep_Fun_thecode_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_thediv_0 r_1 where
  Mk_Fun_thediv_2 :: forall r_1 . r_1 -> Rep_Fun_thediv_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_thediv_0 Html
  where alg (Mk_Fun_thediv_2 v_3) = thediv v_3
instance BoundedArbitrary1 Rep_Fun_thediv_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_thediv_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "thediv" = Rep_Fun_thediv_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_thehtml_0 r_1 where
  Mk_Fun_thehtml_2 :: forall r_1 . r_1 -> Rep_Fun_thehtml_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_thehtml_0 Html
  where alg (Mk_Fun_thehtml_2 v_3) = thehtml v_3
instance BoundedArbitrary1 Rep_Fun_thehtml_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_thehtml_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "thehtml" = Rep_Fun_thehtml_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_thelink_0 r_1 where
  Mk_Fun_thelink_2 :: forall r_1 . r_1 -> Rep_Fun_thelink_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_thelink_0 Html
  where alg (Mk_Fun_thelink_2 v_3) = thelink v_3
instance BoundedArbitrary1 Rep_Fun_thelink_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_thelink_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "thelink" = Rep_Fun_thelink_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_themap_0 r_1 where
  Mk_Fun_themap_2 :: forall r_1 . r_1 -> Rep_Fun_themap_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_themap_0 Html
  where alg (Mk_Fun_themap_2 v_3) = themap v_3
instance BoundedArbitrary1 Rep_Fun_themap_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_themap_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "themap" = Rep_Fun_themap_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_thespan_0 r_1 where
  Mk_Fun_thespan_2 :: forall r_1 . r_1 -> Rep_Fun_thespan_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_thespan_0 Html
  where alg (Mk_Fun_thespan_2 v_3) = thespan v_3
instance BoundedArbitrary1 Rep_Fun_thespan_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_thespan_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "thespan" = Rep_Fun_thespan_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_thetitle_0 r_1 where
  Mk_Fun_thetitle_2 :: forall r_1 . r_1 -> Rep_Fun_thetitle_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_thetitle_0 Html
  where alg (Mk_Fun_thetitle_2 v_3) = thetitle v_3
instance BoundedArbitrary1 Rep_Fun_thetitle_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_thetitle_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "thetitle" = Rep_Fun_thetitle_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_tr_0 r_1 where Mk_Fun_tr_2 :: forall r_1 . r_1 -> Rep_Fun_tr_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_tr_0 Html
  where alg (Mk_Fun_tr_2 v_3) = tr v_3
instance BoundedArbitrary1 Rep_Fun_tr_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_tr_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "tr" = Rep_Fun_tr_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_tt_0 r_1 where Mk_Fun_tt_2 :: forall r_1 . r_1 -> Rep_Fun_tt_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_tt_0 Html
  where alg (Mk_Fun_tt_2 v_3) = tt v_3
instance BoundedArbitrary1 Rep_Fun_tt_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_tt_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "tt" = Rep_Fun_tt_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_ulist_0 r_1 where
  Mk_Fun_ulist_2 :: forall r_1 . r_1 -> Rep_Fun_ulist_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_ulist_0 Html
  where alg (Mk_Fun_ulist_2 v_3) = ulist v_3
instance BoundedArbitrary1 Rep_Fun_ulist_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_ulist_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "ulist" = Rep_Fun_ulist_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_underline_0 r_1 where
  Mk_Fun_underline_2 :: forall r_1 . r_1 -> Rep_Fun_underline_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_underline_0 Html
  where alg (Mk_Fun_underline_2 v_3) = underline v_3
instance BoundedArbitrary1 Rep_Fun_underline_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_underline_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "underline" = Rep_Fun_underline_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_variable_0 r_1 where
  Mk_Fun_variable_2 :: forall r_1 . r_1 -> Rep_Fun_variable_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_variable_0 Html
  where alg (Mk_Fun_variable_2 v_3) = variable v_3
instance BoundedArbitrary1 Rep_Fun_variable_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_variable_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "variable" = Rep_Fun_variable_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_linesToHtml_0 r_1 where
  Mk_Fun_linesToHtml_2 :: forall r_1 . ([String]) -> Rep_Fun_linesToHtml_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_linesToHtml_0 Html
  where alg (Mk_Fun_linesToHtml_2 v_3) = linesToHtml v_3
instance BoundedArbitrary1 Rep_Fun_linesToHtml_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_linesToHtml_2) (genList arbitrary)
type instance Fun "linesToHtml" = Rep_Fun_linesToHtml_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_primHtmlChar_0 r_1 where
  Mk_Fun_primHtmlChar_2 :: forall r_1 . String -> Rep_Fun_primHtmlChar_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_primHtmlChar_0 Html
  where alg (Mk_Fun_primHtmlChar_2 v_3) = primHtmlChar v_3
instance BoundedArbitrary1 Rep_Fun_primHtmlChar_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_primHtmlChar_2) arbitrary
type instance Fun "primHtmlChar" = Rep_Fun_primHtmlChar_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_copyright_0 r_1 where
  Mk_Fun_copyright_2 :: forall r_1 . Rep_Fun_copyright_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_copyright_0 Html
  where alg (Mk_Fun_copyright_2) = copyright
instance BoundedArbitrary1 Rep_Fun_copyright_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_copyright_2
type instance Fun "copyright" = Rep_Fun_copyright_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_spaceHtml_0 r_1 where
  Mk_Fun_spaceHtml_2 :: forall r_1 . Rep_Fun_spaceHtml_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_spaceHtml_0 Html
  where alg (Mk_Fun_spaceHtml_2) = spaceHtml
instance BoundedArbitrary1 Rep_Fun_spaceHtml_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_spaceHtml_2
type instance Fun "spaceHtml" = Rep_Fun_spaceHtml_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_bullet_0 r_1 where Mk_Fun_bullet_2 :: forall r_1 . Rep_Fun_bullet_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_bullet_0 Html
  where alg (Mk_Fun_bullet_2) = bullet
instance BoundedArbitrary1 Rep_Fun_bullet_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_bullet_2
type instance Fun "bullet" = Rep_Fun_bullet_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_p_0 r_1 where Mk_Fun_p_2 :: forall r_1 . r_1 -> Rep_Fun_p_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_p_0 Html
  where alg (Mk_Fun_p_2 v_3) = p v_3
instance BoundedArbitrary1 Rep_Fun_p_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_p_2) (_gen_4 (max 0 ((-) _depth_5 1)))
type instance Fun "p" = Rep_Fun_p_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_simpleTable_0 r_1 where
  Mk_Fun_simpleTable_2 :: forall r_1 . ([HtmlAttr]) -> ([HtmlAttr]) -> ([[r_1]]) -> Rep_Fun_simpleTable_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_simpleTable_0 Html
  where alg (Mk_Fun_simpleTable_2 v_3 v_4 v_5) = simpleTable v_3 v_4 v_5
instance BoundedArbitrary1 Rep_Fun_simpleTable_0
  where liftBoundedGen _gen_6 _depth_7 = (<*>) ((<*>) ((<*>) (pure Mk_Fun_simpleTable_2) (genList (boundedArbitrary (max 0 ((-) _depth_7 1))))) (genList (boundedArbitrary (max 0 ((-) _depth_7 1))))) (genList (genList (_gen_6 (max 0 ((-) _depth_7 1)))))
type instance Fun "simpleTable" = Rep_Fun_simpleTable_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_widget_0 r_1 where
  Mk_Fun_widget_2 :: forall r_1 . String -> String -> ([HtmlAttr]) -> Rep_Fun_widget_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_widget_0 Html
  where alg (Mk_Fun_widget_2 v_3 v_4 v_5) = widget v_3 v_4 v_5
instance BoundedArbitrary1 Rep_Fun_widget_0
  where liftBoundedGen _gen_6 _depth_7 = (<*>) ((<*>) ((<*>) (pure Mk_Fun_widget_2) arbitrary) arbitrary) (genList (boundedArbitrary (max 0 ((-) _depth_7 1))))
type instance Fun "widget" = Rep_Fun_widget_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_checkbox_0 r_1 where
  Mk_Fun_checkbox_2 :: forall r_1 . String -> String -> Rep_Fun_checkbox_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_checkbox_0 Html
  where alg (Mk_Fun_checkbox_2 v_3 v_4) = checkbox v_3 v_4
instance BoundedArbitrary1 Rep_Fun_checkbox_0
  where liftBoundedGen _gen_5 _depth_6 = (<*>) ((<*>) (pure Mk_Fun_checkbox_2) arbitrary) arbitrary
type instance Fun "checkbox" = Rep_Fun_checkbox_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_hidden_0 r_1 where
  Mk_Fun_hidden_2 :: forall r_1 . String -> String -> Rep_Fun_hidden_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_hidden_0 Html
  where alg (Mk_Fun_hidden_2 v_3 v_4) = hidden v_3 v_4
instance BoundedArbitrary1 Rep_Fun_hidden_0
  where liftBoundedGen _gen_5 _depth_6 = (<*>) ((<*>) (pure Mk_Fun_hidden_2) arbitrary) arbitrary
type instance Fun "hidden" = Rep_Fun_hidden_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_radio_0 r_1 where
  Mk_Fun_radio_2 :: forall r_1 . String -> String -> Rep_Fun_radio_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_radio_0 Html
  where alg (Mk_Fun_radio_2 v_3 v_4) = radio v_3 v_4
instance BoundedArbitrary1 Rep_Fun_radio_0
  where liftBoundedGen _gen_5 _depth_6 = (<*>) ((<*>) (pure Mk_Fun_radio_2) arbitrary) arbitrary
type instance Fun "radio" = Rep_Fun_radio_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_reset_0 r_1 where
  Mk_Fun_reset_2 :: forall r_1 . String -> String -> Rep_Fun_reset_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_reset_0 Html
  where alg (Mk_Fun_reset_2 v_3 v_4) = reset v_3 v_4
instance BoundedArbitrary1 Rep_Fun_reset_0
  where liftBoundedGen _gen_5 _depth_6 = (<*>) ((<*>) (pure Mk_Fun_reset_2) arbitrary) arbitrary
type instance Fun "reset" = Rep_Fun_reset_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_submit_0 r_1 where
  Mk_Fun_submit_2 :: forall r_1 . String -> String -> Rep_Fun_submit_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_submit_0 Html
  where alg (Mk_Fun_submit_2 v_3 v_4) = submit v_3 v_4
instance BoundedArbitrary1 Rep_Fun_submit_0
  where liftBoundedGen _gen_5 _depth_6 = (<*>) ((<*>) (pure Mk_Fun_submit_2) arbitrary) arbitrary
type instance Fun "submit" = Rep_Fun_submit_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_password_0 r_1 where
  Mk_Fun_password_2 :: forall r_1 . String -> Rep_Fun_password_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_password_0 Html
  where alg (Mk_Fun_password_2 v_3) = password v_3
instance BoundedArbitrary1 Rep_Fun_password_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_password_2) arbitrary
type instance Fun "password" = Rep_Fun_password_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_textfield_0 r_1 where
  Mk_Fun_textfield_2 :: forall r_1 . String -> Rep_Fun_textfield_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_textfield_0 Html
  where alg (Mk_Fun_textfield_2 v_3) = textfield v_3
instance BoundedArbitrary1 Rep_Fun_textfield_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_textfield_2) arbitrary
type instance Fun "textfield" = Rep_Fun_textfield_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_afile_0 r_1 where
  Mk_Fun_afile_2 :: forall r_1 . String -> Rep_Fun_afile_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_afile_0 Html
  where alg (Mk_Fun_afile_2 v_3) = afile v_3
instance BoundedArbitrary1 Rep_Fun_afile_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_afile_2) arbitrary
type instance Fun "afile" = Rep_Fun_afile_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_clickmap_0 r_1 where
  Mk_Fun_clickmap_2 :: forall r_1 . String -> Rep_Fun_clickmap_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_clickmap_0 Html
  where alg (Mk_Fun_clickmap_2 v_3) = clickmap v_3
instance BoundedArbitrary1 Rep_Fun_clickmap_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_clickmap_2) arbitrary
type instance Fun "clickmap" = Rep_Fun_clickmap_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_menu_0 r_1 where
  Mk_Fun_menu_2 :: forall r_1 . String -> ([r_1]) -> Rep_Fun_menu_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_menu_0 Html
  where alg (Mk_Fun_menu_2 v_3 v_4) = menu v_3 v_4
instance BoundedArbitrary1 Rep_Fun_menu_0
  where liftBoundedGen _gen_5 _depth_6 = (<*>) ((<*>) (pure Mk_Fun_menu_2) arbitrary) (genList (_gen_5 (max 0 ((-) _depth_6 1))))
type instance Fun "menu" = Rep_Fun_menu_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_gui_0 r_1 where
  Mk_Fun_gui_2 :: forall r_1 . String -> r_1 -> Rep_Fun_gui_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_gui_0 Html
  where alg (Mk_Fun_gui_2 v_3 v_4) = gui v_3 v_4
instance BoundedArbitrary1 Rep_Fun_gui_0
  where liftBoundedGen _gen_5 _depth_6 = (<*>) ((<*>) (pure Mk_Fun_gui_2) arbitrary) (_gen_5 (max 0 ((-) _depth_6 1)))
type instance Fun "gui" = Rep_Fun_gui_0
[92m[DRAGEN] derived type instance:
[0mtype instance Rep "(-> Html)" = Sum (Term (Fun "noHtml"))
                                    (Sum (Fun "tag")
                                         (Sum (Term (Fun "itag"))
                                              (Sum (Term (Fun "primHtml"))
                                                   (Sum (Term (Fun "stringToHtml"))
                                                        (Sum (Term (Fun "lineToHtml"))
                                                             (Sum (Fun "address")
                                                                  (Sum (Fun "anchor")
                                                                       (Sum (Fun "applet")
                                                                            (Sum (Term (Fun "area"))
                                                                                 (Sum (Term (Fun "basefont"))
                                                                                      (Sum (Fun "big")
                                                                                           (Sum (Fun "blockquote")
                                                                                                (Sum (Fun "body")
                                                                                                     (Sum (Fun "bold")
                                                                                                          (Sum (Term (Fun "br"))
                                                                                                               (Sum (Fun "caption")
                                                                                                                    (Sum (Fun "center")
                                                                                                                         (Sum (Fun "cite")
                                                                                                                              (Sum (Fun "ddef")
                                                                                                                                   (Sum (Fun "define")
                                                                                                                                        (Sum (Fun "dlist")
                                                                                                                                             (Sum (Fun "dterm")
                                                                                                                                                  (Sum (Fun "emphasize")
                                                                                                                                                       (Sum (Fun "fieldset")
                                                                                                                                                            (Sum (Fun "font")
                                                                                                                                                                 (Sum (Fun "form")
                                                                                                                                                                      (Sum (Fun "frame")
                                                                                                                                                                           (Sum (Fun "frameset")
                                                                                                                                                                                (Sum (Fun "h1")
                                                                                                                                                                                     (Sum (Fun "h2")
                                                                                                                                                                                          (Sum (Fun "h3")
                                                                                                                                                                                               (Sum (Fun "h4")
                                                                                                                                                                                                    (Sum (Fun "h5")
                                                                                                                                                                                                         (Sum (Fun "h6")
                                                                                                                                                                                                              (Sum (Fun "header")
                                                                                                                                                                                                                   (Sum (Term (Fun "hr"))
                                                                                                                                                                                                                        (Sum (Term (Fun "image"))
                                                                                                                                                                                                                             (Sum (Term (Fun "input"))
                                                                                                                                                                                                                                  (Sum (Fun "italics")
                                                                                                                                                                                                                                       (Sum (Fun "keyboard")
                                                                                                                                                                                                                                            (Sum (Fun "legend")
                                                                                                                                                                                                                                                 (Sum (Fun "li")
                                                                                                                                                                                                                                                      (Sum (Term (Fun "meta"))
                                                                                                                                                                                                                                                           (Sum (Fun "noframes")
                                                                                                                                                                                                                                                                (Sum (Fun "olist")
                                                                                                                                                                                                                                                                     (Sum (Fun "option")
                                                                                                                                                                                                                                                                          (Sum (Fun "paragraph")
                                                                                                                                                                                                                                                                               (Sum (Term (Fun "param"))
                                                                                                                                                                                                                                                                                    (Sum (Fun "pre")
                                                                                                                                                                                                                                                                                         (Sum (Fun "samp")
                                                                                                                                                                                                                                                                                              (Sum (Fun "select")
                                                                                                                                                                                                                                                                                                   (Sum (Fun "small")
                                                                                                                                                                                                                                                                                                        (Sum (Fun "strong")
                                                                                                                                                                                                                                                                                                             (Sum (Fun "style")
                                                                                                                                                                                                                                                                                                                  (Sum (Fun "sub")
                                                                                                                                                                                                                                                                                                                       (Sum (Fun "sup")
                                                                                                                                                                                                                                                                                                                            (Sum (Fun "table")
                                                                                                                                                                                                                                                                                                                                 (Sum (Fun "td")
                                                                                                                                                                                                                                                                                                                                      (Sum (Fun "textarea")
                                                                                                                                                                                                                                                                                                                                           (Sum (Fun "th")
                                                                                                                                                                                                                                                                                                                                                (Sum (Term (Fun "thebase"))
                                                                                                                                                                                                                                                                                                                                                     (Sum (Fun "thecode")
                                                                                                                                                                                                                                                                                                                                                          (Sum (Fun "thediv")
                                                                                                                                                                                                                                                                                                                                                               (Sum (Fun "thehtml")
                                                                                                                                                                                                                                                                                                                                                                    (Sum (Fun "thelink")
                                                                                                                                                                                                                                                                                                                                                                         (Sum (Fun "themap")
                                                                                                                                                                                                                                                                                                                                                                              (Sum (Fun "thespan")
                                                                                                                                                                                                                                                                                                                                                                                   (Sum (Fun "thetitle")
                                                                                                                                                                                                                                                                                                                                                                                        (Sum (Fun "tr")
                                                                                                                                                                                                                                                                                                                                                                                             (Sum (Fun "tt")
                                                                                                                                                                                                                                                                                                                                                                                                  (Sum (Fun "ulist")
                                                                                                                                                                                                                                                                                                                                                                                                       (Sum (Fun "underline")
                                                                                                                                                                                                                                                                                                                                                                                                            (Sum (Fun "variable")
                                                                                                                                                                                                                                                                                                                                                                                                                 (Sum (Term (Fun "linesToHtml"))
                                                                                                                                                                                                                                                                                                                                                                                                                      (Sum (Term (Fun "primHtmlChar"))
                                                                                                                                                                                                                                                                                                                                                                                                                           (Sum (Term (Fun "copyright"))
                                                                                                                                                                                                                                                                                                                                                                                                                                (Sum (Term (Fun "spaceHtml"))
                                                                                                                                                                                                                                                                                                                                                                                                                                     (Sum (Term (Fun "bullet"))
                                                                                                                                                                                                                                                                                                                                                                                                                                          (Sum (Fun "p")
                                                                                                                                                                                                                                                                                                                                                                                                                                               (Sum (Fun "simpleTable")
                                                                                                                                                                                                                                                                                                                                                                                                                                                    (Sum (Fun "widget")
                                                                                                                                                                                                                                                                                                                                                                                                                                                         (Sum (Term (Fun "checkbox"))
                                                                                                                                                                                                                                                                                                                                                                                                                                                              (Sum (Term (Fun "hidden"))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Sum (Term (Fun "radio"))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (Sum (Term (Fun "reset"))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (Sum (Term (Fun "submit"))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (Sum (Term (Fun "password"))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (Sum (Term (Fun "textfield"))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (Sum (Term (Fun "afile"))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (Sum (Term (Fun "clickmap"))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (Sum (Fun "menu")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (Fun "gui"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
[92m[DRAGEN] reified data constructors:
[0mHtmlString :: String -> HtmlElement
HtmlTag :: {markupTag :: String, markupAttrs :: ([HtmlAttr]), markupContent :: Html} -> HtmlElement
[92m[DRAGEN] derived data constructor representation:
[0mdata Rep_Con_HtmlString_0 r_1 where
  Mk_Con_HtmlString_2 :: forall r_1 . String -> Rep_Con_HtmlString_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Con_HtmlString_0 HtmlElement
  where alg (Mk_Con_HtmlString_2 v_3) = HtmlString v_3
instance BoundedArbitrary1 Rep_Con_HtmlString_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Con_HtmlString_2) arbitrary
type instance Con "HtmlString" = Rep_Con_HtmlString_0
[92m[DRAGEN] derived data constructor representation:
[0mdata Rep_Con_HtmlTag_0 r_1 where
  Mk_Con_HtmlTag_2 :: forall r_1 . String -> ([HtmlAttr]) -> Html -> Rep_Con_HtmlTag_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Con_HtmlTag_0 HtmlElement
  where alg (Mk_Con_HtmlTag_2 v_3 v_4 v_5) = HtmlTag v_3 v_4 v_5
instance BoundedArbitrary1 Rep_Con_HtmlTag_0
  where liftBoundedGen _gen_6 _depth_7 = (<*>) ((<*>) ((<*>) (pure Mk_Con_HtmlTag_2) arbitrary) (genList (boundedArbitrary (max 0 ((-) _depth_7 1))))) (boundedArbitrary (max 0 ((-) _depth_7 1)))
type instance Con "HtmlTag" = Rep_Con_HtmlTag_0
[92m[DRAGEN] derived type instance:
[0mtype instance Rep "HtmlElement" = Sum (Term (Con "HtmlString")) (Con "HtmlTag")
[92m[DRAGEN] reified data constructors:
[0mHtmlAttr :: String -> String -> HtmlAttr
[92m[DRAGEN] derived data constructor representation:
[0mdata Rep_Con_HtmlAttr_0 r_1 where
  Mk_Con_HtmlAttr_2 :: forall r_1 . String -> String -> Rep_Con_HtmlAttr_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Con_HtmlAttr_0 HtmlAttr
  where alg (Mk_Con_HtmlAttr_2 v_3 v_4) = HtmlAttr v_3 v_4
instance BoundedArbitrary1 Rep_Con_HtmlAttr_0
  where liftBoundedGen _gen_5 _depth_6 = (<*>) ((<*>) (pure Mk_Con_HtmlAttr_2) arbitrary) arbitrary
type instance Con "HtmlAttr" = Rep_Con_HtmlAttr_0
[92m[DRAGEN] derived type instance:
[0mtype instance Rep "HtmlAttr" = Term (Con "HtmlAttr")
[92m[DRAGEN] reifying infix name: 
[0m"nest"
[92m[DRAGEN] reifying infix name: 
[0m"combine"
[92m[DRAGEN] reifying name: 
[0m"noHtml"
[92m[DRAGEN] reifying name: 
[0m"isNoHtml"
[92m[DRAGEN] reifying name: 
[0m"tag"
[92m[DRAGEN] reifying name: 
[0m"itag"
[92m[DRAGEN] reifying name: 
[0m"emptyAttr"
[92m[DRAGEN] reifying name: 
[0m"intAttr"
[92m[DRAGEN] reifying name: 
[0m"strAttr"
[92m[DRAGEN] reifying name: 
[0m"stringToHtmlString"
[92m[DRAGEN] reifying name: 
[0m"primHtml"
[92m[DRAGEN] reifying name: 
[0m"stringToHtml"
[92m[DRAGEN] reifying name: 
[0m"lineToHtml"
[92m[DRAGEN] reifying name: 
[0m"address"
[92m[DRAGEN] reifying name: 
[0m"anchor"
[92m[DRAGEN] reifying name: 
[0m"applet"
[92m[DRAGEN] reifying name: 
[0m"area"
[92m[DRAGEN] reifying name: 
[0m"basefont"
[92m[DRAGEN] reifying name: 
[0m"big"
[92m[DRAGEN] reifying name: 
[0m"blockquote"
[92m[DRAGEN] reifying name: 
[0m"body"
[92m[DRAGEN] reifying name: 
[0m"bold"
[92m[DRAGEN] reifying name: 
[0m"br"
[92m[DRAGEN] reifying name: 
[0m"caption"
[92m[DRAGEN] reifying name: 
[0m"center"
[92m[DRAGEN] reifying name: 
[0m"cite"
[92m[DRAGEN] reifying name: 
[0m"ddef"
[92m[DRAGEN] reifying name: 
[0m"define"
[92m[DRAGEN] reifying name: 
[0m"dlist"
[92m[DRAGEN] reifying name: 
[0m"dterm"
[92m[DRAGEN] reifying name: 
[0m"emphasize"
[92m[DRAGEN] reifying name: 
[0m"fieldset"
[92m[DRAGEN] reifying name: 
[0m"font"
[92m[DRAGEN] reifying name: 
[0m"form"
[92m[DRAGEN] reifying name: 
[0m"frame"
[92m[DRAGEN] reifying name: 
[0m"frameset"
[92m[DRAGEN] reifying name: 
[0m"h1"
[92m[DRAGEN] reifying name: 
[0m"h2"
[92m[DRAGEN] reifying name: 
[0m"h3"
[92m[DRAGEN] reifying name: 
[0m"h4"
[92m[DRAGEN] reifying name: 
[0m"h5"
[92m[DRAGEN] reifying name: 
[0m"h6"
[92m[DRAGEN] reifying name: 
[0m"header"
[92m[DRAGEN] reifying name: 
[0m"hr"
[92m[DRAGEN] reifying name: 
[0m"image"
[92m[DRAGEN] reifying name: 
[0m"input"
[92m[DRAGEN] reifying name: 
[0m"italics"
[92m[DRAGEN] reifying name: 
[0m"keyboard"
[92m[DRAGEN] reifying name: 
[0m"legend"
[92m[DRAGEN] reifying name: 
[0m"li"
[92m[DRAGEN] reifying name: 
[0m"meta"
[92m[DRAGEN] reifying name: 
[0m"noframes"
[92m[DRAGEN] reifying name: 
[0m"olist"
[92m[DRAGEN] reifying name: 
[0m"option"
[92m[DRAGEN] reifying name: 
[0m"paragraph"
[92m[DRAGEN] reifying name: 
[0m"param"
[92m[DRAGEN] reifying name: 
[0m"pre"
[92m[DRAGEN] reifying name: 
[0m"samp"
[92m[DRAGEN] reifying name: 
[0m"select"
[92m[DRAGEN] reifying name: 
[0m"small"
[92m[DRAGEN] reifying name: 
[0m"strong"
[92m[DRAGEN] reifying name: 
[0m"style"
[92m[DRAGEN] reifying name: 
[0m"sub"
[92m[DRAGEN] reifying name: 
[0m"sup"
[92m[DRAGEN] reifying name: 
[0m"table"
[92m[DRAGEN] reifying name: 
[0m"td"
[92m[DRAGEN] reifying name: 
[0m"textarea"
[92m[DRAGEN] reifying name: 
[0m"th"
[92m[DRAGEN] reifying name: 
[0m"thebase"
[92m[DRAGEN] reifying name: 
[0m"thecode"
[92m[DRAGEN] reifying name: 
[0m"thediv"
[92m[DRAGEN] reifying name: 
[0m"thehtml"
[92m[DRAGEN] reifying name: 
[0m"thelink"
[92m[DRAGEN] reifying name: 
[0m"themap"
[92m[DRAGEN] reifying name: 
[0m"thespan"
[92m[DRAGEN] reifying name: 
[0m"thetitle"
[92m[DRAGEN] reifying name: 
[0m"tr"
[92m[DRAGEN] reifying name: 
[0m"tt"
[92m[DRAGEN] reifying name: 
[0m"ulist"
[92m[DRAGEN] reifying name: 
[0m"underline"
[92m[DRAGEN] reifying name: 
[0m"variable"
[92m[DRAGEN] reifying name: 
[0m"action"
[92m[DRAGEN] reifying name: 
[0m"align"
[92m[DRAGEN] reifying name: 
[0m"alink"
[92m[DRAGEN] reifying name: 
[0m"alt"
[92m[DRAGEN] reifying name: 
[0m"altcode"
[92m[DRAGEN] reifying name: 
[0m"archive"
[92m[DRAGEN] reifying name: 
[0m"background"
[92m[DRAGEN] reifying name: 
[0m"base"
[92m[DRAGEN] reifying name: 
[0m"bgcolor"
[92m[DRAGEN] reifying name: 
[0m"border"
[92m[DRAGEN] reifying name: 
[0m"bordercolor"
[92m[DRAGEN] reifying name: 
[0m"cellpadding"
[92m[DRAGEN] reifying name: 
[0m"cellspacing"
[92m[DRAGEN] reifying name: 
[0m"checked"
[92m[DRAGEN] reifying name: 
[0m"clear"
[92m[DRAGEN] reifying name: 
[0m"code"
[92m[DRAGEN] reifying name: 
[0m"codebase"
[92m[DRAGEN] reifying name: 
[0m"color"
[92m[DRAGEN] reifying name: 
[0m"cols"
[92m[DRAGEN] reifying name: 
[0m"colspan"
[92m[DRAGEN] reifying name: 
[0m"compact"
[92m[DRAGEN] reifying name: 
[0m"content"
[92m[DRAGEN] reifying name: 
[0m"coords"
[92m[DRAGEN] reifying name: 
[0m"enctype"
[92m[DRAGEN] reifying name: 
[0m"face"
[92m[DRAGEN] reifying name: 
[0m"frameborder"
[92m[DRAGEN] reifying name: 
[0m"height"
[92m[DRAGEN] reifying name: 
[0m"href"
[92m[DRAGEN] reifying name: 
[0m"hspace"
[92m[DRAGEN] reifying name: 
[0m"httpequiv"
[92m[DRAGEN] reifying name: 
[0m"identifier"
[92m[DRAGEN] reifying name: 
[0m"ismap"
[92m[DRAGEN] reifying name: 
[0m"lang"
[92m[DRAGEN] reifying name: 
[0m"link"
[92m[DRAGEN] reifying name: 
[0m"marginheight"
[92m[DRAGEN] reifying name: 
[0m"marginwidth"
[92m[DRAGEN] reifying name: 
[0m"maxlength"
[92m[DRAGEN] reifying name: 
[0m"method"
[92m[DRAGEN] reifying name: 
[0m"multiple"
[92m[DRAGEN] reifying name: 
[0m"name"
[92m[DRAGEN] reifying name: 
[0m"nohref"
[92m[DRAGEN] reifying name: 
[0m"noresize"
[92m[DRAGEN] reifying name: 
[0m"noshade"
[92m[DRAGEN] reifying name: 
[0m"nowrap"
[92m[DRAGEN] reifying name: 
[0m"rel"
[92m[DRAGEN] reifying name: 
[0m"rev"
[92m[DRAGEN] reifying name: 
[0m"rows"
[92m[DRAGEN] reifying name: 
[0m"rowspan"
[92m[DRAGEN] reifying name: 
[0m"rules"
[92m[DRAGEN] reifying name: 
[0m"scrolling"
[92m[DRAGEN] reifying name: 
[0m"selected"
[92m[DRAGEN] reifying name: 
[0m"shape"
[92m[DRAGEN] reifying name: 
[0m"size"
[92m[DRAGEN] reifying name: 
[0m"src"
[92m[DRAGEN] reifying name: 
[0m"start"
[92m[DRAGEN] reifying name: 
[0m"target"
[92m[DRAGEN] reifying name: 
[0m"text"
[92m[DRAGEN] reifying name: 
[0m"theclass"
[92m[DRAGEN] reifying name: 
[0m"thestyle"
[92m[DRAGEN] reifying name: 
[0m"thetype"
[92m[DRAGEN] reifying name: 
[0m"title"
[92m[DRAGEN] reifying name: 
[0m"usemap"
[92m[DRAGEN] reifying name: 
[0m"valign"
[92m[DRAGEN] reifying name: 
[0m"value"
[92m[DRAGEN] reifying name: 
[0m"version"
[92m[DRAGEN] reifying name: 
[0m"vlink"
[92m[DRAGEN] reifying name: 
[0m"vspace"
[92m[DRAGEN] reifying name: 
[0m"width"
[92m[DRAGEN] reifying name: 
[0m"validHtmlTags"
[92m[DRAGEN] reifying name: 
[0m"validHtmlITags"
[92m[DRAGEN] reifying name: 
[0m"validHtmlAttrs"
[92m[DRAGEN] reifying name: 
[0m"aqua"
[92m[DRAGEN] reifying name: 
[0m"black"
[92m[DRAGEN] reifying name: 
[0m"blue"
[92m[DRAGEN] reifying name: 
[0m"fuchsia"
[92m[DRAGEN] reifying name: 
[0m"gray"
[92m[DRAGEN] reifying name: 
[0m"green"
[92m[DRAGEN] reifying name: 
[0m"lime"
[92m[DRAGEN] reifying name: 
[0m"maroon"
[92m[DRAGEN] reifying name: 
[0m"navy"
[92m[DRAGEN] reifying name: 
[0m"olive"
[92m[DRAGEN] reifying name: 
[0m"purple"
[92m[DRAGEN] reifying name: 
[0m"red"
[92m[DRAGEN] reifying name: 
[0m"silver"
[92m[DRAGEN] reifying name: 
[0m"teal"
[92m[DRAGEN] reifying name: 
[0m"yellow"
[92m[DRAGEN] reifying name: 
[0m"white"
[92m[DRAGEN] reifying name: 
[0m"linesToHtml"
[92m[DRAGEN] reifying name: 
[0m"primHtmlChar"
[92m[DRAGEN] reifying name: 
[0m"copyright"
[92m[DRAGEN] reifying name: 
[0m"spaceHtml"
[92m[DRAGEN] reifying name: 
[0m"bullet"
[92m[DRAGEN] reifying name: 
[0m"p"
[92m[DRAGEN] reifying name: 
[0m"mkHtmlTable"
[92m[DRAGEN] reifying name: 
[0m"above"
[92m[DRAGEN] reifying name: 
[0m"beside"
[92m[DRAGEN] reifying name: 
[0m"combineFn"
[92m[DRAGEN] reifying name: 
[0m"aboves"
[92m[DRAGEN] reifying name: 
[0m"besides"
[92m[DRAGEN] reifying name: 
[0m"renderTable"
[92m[DRAGEN] reifying name: 
[0m"simpleTable"
[92m[DRAGEN] reifying name: 
[0m"treeHtml"
[92m[DRAGEN] reifying name: 
[0m"treeColors"
[92m[DRAGEN] reifying name: 
[0m"hotlink"
[92m[DRAGEN] reifying name: 
[0m"widget"
[92m[DRAGEN] reifying name: 
[0m"checkbox"
[92m[DRAGEN] reifying name: 
[0m"hidden"
[92m[DRAGEN] reifying name: 
[0m"radio"
[92m[DRAGEN] reifying name: 
[0m"reset"
[92m[DRAGEN] reifying name: 
[0m"submit"
[92m[DRAGEN] reifying name: 
[0m"password"
[92m[DRAGEN] reifying name: 
[0m"textfield"
[92m[DRAGEN] reifying name: 
[0m"afile"
[92m[DRAGEN] reifying name: 
[0m"clickmap"
[92m[DRAGEN] reifying name: 
[0m"menu"
[92m[DRAGEN] reifying name: 
[0m"gui"
[92m[DRAGEN] reifying name: 
[0m"renderHtml"
[92m[DRAGEN] reifying name: 
[0m"prettyHtml"
[92m[DRAGEN] reifying name: 
[0m"renderHtml'"
[92m[DRAGEN] reifying name: 
[0m"prettyHtml'"
[92m[DRAGEN] reifying name: 
[0m"rmNL"
[92m[DRAGEN] reifying name: 
[0m"renderTag"
[92m[DRAGEN] reifying name: 
[0m"htmlSize"
[92m[DRAGEN] reifying name: 
[0m"htmlElementSize"
[92m[DRAGEN] reifying name: 
[0m"genHtml"
[92m[DRAGEN] reifying name: 
[0m"genHtmlElement"
[92m[DRAGEN] reifying name: 
[0m"genHtmlAttr"
[92m[DRAGEN] reifying name: 
[0m"genHtml'"
[92m[DRAGEN] extracted names from module Html:
[0mnest
combine
noHtml
isNoHtml
tag
itag
emptyAttr
intAttr
strAttr
stringToHtmlString
primHtml
stringToHtml
lineToHtml
address
anchor
applet
area
basefont
big
blockquote
body
bold
br
caption
center
cite
ddef
define
dlist
dterm
emphasize
fieldset
font
form
frame
frameset
h1
h2
h3
h4
h5
h6
header
hr
image
input
italics
keyboard
legend
li
meta
noframes
olist
option
paragraph
param
pre
samp
select
small
strong
style
sub
sup
table
td
textarea
th
thebase
thecode
thediv
thehtml
thelink
themap
thespan
thetitle
tr
tt
ulist
underline
variable
action
align
alink
alt
altcode
archive
background
base
bgcolor
border
bordercolor
cellpadding
cellspacing
checked
clear
code
codebase
color
cols
colspan
compact
content
coords
enctype
face
frameborder
height
href
hspace
httpequiv
identifier
ismap
lang
link
marginheight
marginwidth
maxlength
method
multiple
name
nohref
noresize
noshade
nowrap
rel
rev
rows
rowspan
rules
scrolling
selected
shape
size
src
start
target
text
theclass
thestyle
thetype
title
usemap
valign
value
version
vlink
vspace
width
validHtmlTags
validHtmlITags
validHtmlAttrs
aqua
black
blue
fuchsia
gray
green
lime
maroon
navy
olive
purple
red
silver
teal
yellow
white
linesToHtml
primHtmlChar
copyright
spaceHtml
bullet
p
mkHtmlTable
above
beside
combineFn
aboves
besides
renderTable
simpleTable
treeHtml
treeColors
hotlink
widget
checkbox
hidden
radio
reset
submit
password
textfield
afile
clickmap
menu
gui
renderHtml
prettyHtml
renderHtml'
prettyHtml'
rmNL
renderTag
htmlSize
htmlElementSize
genHtml
genHtmlElement
genHtmlAttr
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_emptyAttr_0 r_1 where
  Mk_Fun_emptyAttr_2 :: forall r_1 . String -> Rep_Fun_emptyAttr_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_emptyAttr_0 HtmlAttr
  where alg (Mk_Fun_emptyAttr_2 v_3) = emptyAttr v_3
instance BoundedArbitrary1 Rep_Fun_emptyAttr_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_emptyAttr_2) arbitrary
type instance Fun "emptyAttr" = Rep_Fun_emptyAttr_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_intAttr_0 r_1 where
  Mk_Fun_intAttr_2 :: forall r_1 . String -> Int -> Rep_Fun_intAttr_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_intAttr_0 HtmlAttr
  where alg (Mk_Fun_intAttr_2 v_3 v_4) = intAttr v_3 v_4
instance BoundedArbitrary1 Rep_Fun_intAttr_0
  where liftBoundedGen _gen_5 _depth_6 = (<*>) ((<*>) (pure Mk_Fun_intAttr_2) arbitrary) arbitrary
type instance Fun "intAttr" = Rep_Fun_intAttr_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_strAttr_0 r_1 where
  Mk_Fun_strAttr_2 :: forall r_1 . String -> String -> Rep_Fun_strAttr_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_strAttr_0 HtmlAttr
  where alg (Mk_Fun_strAttr_2 v_3 v_4) = strAttr v_3 v_4
instance BoundedArbitrary1 Rep_Fun_strAttr_0
  where liftBoundedGen _gen_5 _depth_6 = (<*>) ((<*>) (pure Mk_Fun_strAttr_2) arbitrary) arbitrary
type instance Fun "strAttr" = Rep_Fun_strAttr_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_action_0 r_1 where
  Mk_Fun_action_2 :: forall r_1 . String -> Rep_Fun_action_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_action_0 HtmlAttr
  where alg (Mk_Fun_action_2 v_3) = action v_3
instance BoundedArbitrary1 Rep_Fun_action_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_action_2) arbitrary
type instance Fun "action" = Rep_Fun_action_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_align_0 r_1 where
  Mk_Fun_align_2 :: forall r_1 . String -> Rep_Fun_align_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_align_0 HtmlAttr
  where alg (Mk_Fun_align_2 v_3) = align v_3
instance BoundedArbitrary1 Rep_Fun_align_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_align_2) arbitrary
type instance Fun "align" = Rep_Fun_align_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_alink_0 r_1 where
  Mk_Fun_alink_2 :: forall r_1 . String -> Rep_Fun_alink_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_alink_0 HtmlAttr
  where alg (Mk_Fun_alink_2 v_3) = alink v_3
instance BoundedArbitrary1 Rep_Fun_alink_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_alink_2) arbitrary
type instance Fun "alink" = Rep_Fun_alink_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_alt_0 r_1 where Mk_Fun_alt_2 :: forall r_1 . String -> Rep_Fun_alt_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_alt_0 HtmlAttr
  where alg (Mk_Fun_alt_2 v_3) = alt v_3
instance BoundedArbitrary1 Rep_Fun_alt_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_alt_2) arbitrary
type instance Fun "alt" = Rep_Fun_alt_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_altcode_0 r_1 where
  Mk_Fun_altcode_2 :: forall r_1 . String -> Rep_Fun_altcode_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_altcode_0 HtmlAttr
  where alg (Mk_Fun_altcode_2 v_3) = altcode v_3
instance BoundedArbitrary1 Rep_Fun_altcode_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_altcode_2) arbitrary
type instance Fun "altcode" = Rep_Fun_altcode_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_archive_0 r_1 where
  Mk_Fun_archive_2 :: forall r_1 . String -> Rep_Fun_archive_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_archive_0 HtmlAttr
  where alg (Mk_Fun_archive_2 v_3) = archive v_3
instance BoundedArbitrary1 Rep_Fun_archive_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_archive_2) arbitrary
type instance Fun "archive" = Rep_Fun_archive_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_background_0 r_1 where
  Mk_Fun_background_2 :: forall r_1 . String -> Rep_Fun_background_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_background_0 HtmlAttr
  where alg (Mk_Fun_background_2 v_3) = background v_3
instance BoundedArbitrary1 Rep_Fun_background_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_background_2) arbitrary
type instance Fun "background" = Rep_Fun_background_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_base_0 r_1 where
  Mk_Fun_base_2 :: forall r_1 . String -> Rep_Fun_base_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_base_0 HtmlAttr
  where alg (Mk_Fun_base_2 v_3) = base v_3
instance BoundedArbitrary1 Rep_Fun_base_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_base_2) arbitrary
type instance Fun "base" = Rep_Fun_base_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_bgcolor_0 r_1 where
  Mk_Fun_bgcolor_2 :: forall r_1 . String -> Rep_Fun_bgcolor_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_bgcolor_0 HtmlAttr
  where alg (Mk_Fun_bgcolor_2 v_3) = bgcolor v_3
instance BoundedArbitrary1 Rep_Fun_bgcolor_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_bgcolor_2) arbitrary
type instance Fun "bgcolor" = Rep_Fun_bgcolor_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_border_0 r_1 where
  Mk_Fun_border_2 :: forall r_1 . Int -> Rep_Fun_border_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_border_0 HtmlAttr
  where alg (Mk_Fun_border_2 v_3) = border v_3
instance BoundedArbitrary1 Rep_Fun_border_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_border_2) arbitrary
type instance Fun "border" = Rep_Fun_border_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_bordercolor_0 r_1 where
  Mk_Fun_bordercolor_2 :: forall r_1 . String -> Rep_Fun_bordercolor_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_bordercolor_0 HtmlAttr
  where alg (Mk_Fun_bordercolor_2 v_3) = bordercolor v_3
instance BoundedArbitrary1 Rep_Fun_bordercolor_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_bordercolor_2) arbitrary
type instance Fun "bordercolor" = Rep_Fun_bordercolor_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_cellpadding_0 r_1 where
  Mk_Fun_cellpadding_2 :: forall r_1 . Int -> Rep_Fun_cellpadding_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_cellpadding_0 HtmlAttr
  where alg (Mk_Fun_cellpadding_2 v_3) = cellpadding v_3
instance BoundedArbitrary1 Rep_Fun_cellpadding_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_cellpadding_2) arbitrary
type instance Fun "cellpadding" = Rep_Fun_cellpadding_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_cellspacing_0 r_1 where
  Mk_Fun_cellspacing_2 :: forall r_1 . Int -> Rep_Fun_cellspacing_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_cellspacing_0 HtmlAttr
  where alg (Mk_Fun_cellspacing_2 v_3) = cellspacing v_3
instance BoundedArbitrary1 Rep_Fun_cellspacing_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_cellspacing_2) arbitrary
type instance Fun "cellspacing" = Rep_Fun_cellspacing_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_checked_0 r_1 where
  Mk_Fun_checked_2 :: forall r_1 . Rep_Fun_checked_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_checked_0 HtmlAttr
  where alg (Mk_Fun_checked_2) = checked
instance BoundedArbitrary1 Rep_Fun_checked_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_checked_2
type instance Fun "checked" = Rep_Fun_checked_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_clear_0 r_1 where
  Mk_Fun_clear_2 :: forall r_1 . String -> Rep_Fun_clear_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_clear_0 HtmlAttr
  where alg (Mk_Fun_clear_2 v_3) = clear v_3
instance BoundedArbitrary1 Rep_Fun_clear_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_clear_2) arbitrary
type instance Fun "clear" = Rep_Fun_clear_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_code_0 r_1 where
  Mk_Fun_code_2 :: forall r_1 . String -> Rep_Fun_code_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_code_0 HtmlAttr
  where alg (Mk_Fun_code_2 v_3) = code v_3
instance BoundedArbitrary1 Rep_Fun_code_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_code_2) arbitrary
type instance Fun "code" = Rep_Fun_code_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_codebase_0 r_1 where
  Mk_Fun_codebase_2 :: forall r_1 . String -> Rep_Fun_codebase_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_codebase_0 HtmlAttr
  where alg (Mk_Fun_codebase_2 v_3) = codebase v_3
instance BoundedArbitrary1 Rep_Fun_codebase_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_codebase_2) arbitrary
type instance Fun "codebase" = Rep_Fun_codebase_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_color_0 r_1 where
  Mk_Fun_color_2 :: forall r_1 . String -> Rep_Fun_color_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_color_0 HtmlAttr
  where alg (Mk_Fun_color_2 v_3) = color v_3
instance BoundedArbitrary1 Rep_Fun_color_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_color_2) arbitrary
type instance Fun "color" = Rep_Fun_color_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_cols_0 r_1 where
  Mk_Fun_cols_2 :: forall r_1 . String -> Rep_Fun_cols_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_cols_0 HtmlAttr
  where alg (Mk_Fun_cols_2 v_3) = cols v_3
instance BoundedArbitrary1 Rep_Fun_cols_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_cols_2) arbitrary
type instance Fun "cols" = Rep_Fun_cols_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_colspan_0 r_1 where
  Mk_Fun_colspan_2 :: forall r_1 . Int -> Rep_Fun_colspan_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_colspan_0 HtmlAttr
  where alg (Mk_Fun_colspan_2 v_3) = colspan v_3
instance BoundedArbitrary1 Rep_Fun_colspan_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_colspan_2) arbitrary
type instance Fun "colspan" = Rep_Fun_colspan_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_compact_0 r_1 where
  Mk_Fun_compact_2 :: forall r_1 . Rep_Fun_compact_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_compact_0 HtmlAttr
  where alg (Mk_Fun_compact_2) = compact
instance BoundedArbitrary1 Rep_Fun_compact_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_compact_2
type instance Fun "compact" = Rep_Fun_compact_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_content_0 r_1 where
  Mk_Fun_content_2 :: forall r_1 . String -> Rep_Fun_content_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_content_0 HtmlAttr
  where alg (Mk_Fun_content_2 v_3) = content v_3
instance BoundedArbitrary1 Rep_Fun_content_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_content_2) arbitrary
type instance Fun "content" = Rep_Fun_content_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_coords_0 r_1 where
  Mk_Fun_coords_2 :: forall r_1 . String -> Rep_Fun_coords_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_coords_0 HtmlAttr
  where alg (Mk_Fun_coords_2 v_3) = coords v_3
instance BoundedArbitrary1 Rep_Fun_coords_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_coords_2) arbitrary
type instance Fun "coords" = Rep_Fun_coords_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_enctype_0 r_1 where
  Mk_Fun_enctype_2 :: forall r_1 . String -> Rep_Fun_enctype_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_enctype_0 HtmlAttr
  where alg (Mk_Fun_enctype_2 v_3) = enctype v_3
instance BoundedArbitrary1 Rep_Fun_enctype_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_enctype_2) arbitrary
type instance Fun "enctype" = Rep_Fun_enctype_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_face_0 r_1 where
  Mk_Fun_face_2 :: forall r_1 . String -> Rep_Fun_face_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_face_0 HtmlAttr
  where alg (Mk_Fun_face_2 v_3) = face v_3
instance BoundedArbitrary1 Rep_Fun_face_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_face_2) arbitrary
type instance Fun "face" = Rep_Fun_face_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_frameborder_0 r_1 where
  Mk_Fun_frameborder_2 :: forall r_1 . Int -> Rep_Fun_frameborder_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_frameborder_0 HtmlAttr
  where alg (Mk_Fun_frameborder_2 v_3) = frameborder v_3
instance BoundedArbitrary1 Rep_Fun_frameborder_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_frameborder_2) arbitrary
type instance Fun "frameborder" = Rep_Fun_frameborder_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_height_0 r_1 where
  Mk_Fun_height_2 :: forall r_1 . Int -> Rep_Fun_height_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_height_0 HtmlAttr
  where alg (Mk_Fun_height_2 v_3) = height v_3
instance BoundedArbitrary1 Rep_Fun_height_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_height_2) arbitrary
type instance Fun "height" = Rep_Fun_height_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_href_0 r_1 where
  Mk_Fun_href_2 :: forall r_1 . String -> Rep_Fun_href_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_href_0 HtmlAttr
  where alg (Mk_Fun_href_2 v_3) = href v_3
instance BoundedArbitrary1 Rep_Fun_href_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_href_2) arbitrary
type instance Fun "href" = Rep_Fun_href_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_hspace_0 r_1 where
  Mk_Fun_hspace_2 :: forall r_1 . Int -> Rep_Fun_hspace_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_hspace_0 HtmlAttr
  where alg (Mk_Fun_hspace_2 v_3) = hspace v_3
instance BoundedArbitrary1 Rep_Fun_hspace_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_hspace_2) arbitrary
type instance Fun "hspace" = Rep_Fun_hspace_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_httpequiv_0 r_1 where
  Mk_Fun_httpequiv_2 :: forall r_1 . String -> Rep_Fun_httpequiv_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_httpequiv_0 HtmlAttr
  where alg (Mk_Fun_httpequiv_2 v_3) = httpequiv v_3
instance BoundedArbitrary1 Rep_Fun_httpequiv_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_httpequiv_2) arbitrary
type instance Fun "httpequiv" = Rep_Fun_httpequiv_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_identifier_0 r_1 where
  Mk_Fun_identifier_2 :: forall r_1 . String -> Rep_Fun_identifier_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_identifier_0 HtmlAttr
  where alg (Mk_Fun_identifier_2 v_3) = identifier v_3
instance BoundedArbitrary1 Rep_Fun_identifier_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_identifier_2) arbitrary
type instance Fun "identifier" = Rep_Fun_identifier_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_ismap_0 r_1 where Mk_Fun_ismap_2 :: forall r_1 . Rep_Fun_ismap_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_ismap_0 HtmlAttr
  where alg (Mk_Fun_ismap_2) = ismap
instance BoundedArbitrary1 Rep_Fun_ismap_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_ismap_2
type instance Fun "ismap" = Rep_Fun_ismap_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_lang_0 r_1 where
  Mk_Fun_lang_2 :: forall r_1 . String -> Rep_Fun_lang_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_lang_0 HtmlAttr
  where alg (Mk_Fun_lang_2 v_3) = lang v_3
instance BoundedArbitrary1 Rep_Fun_lang_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_lang_2) arbitrary
type instance Fun "lang" = Rep_Fun_lang_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_link_0 r_1 where
  Mk_Fun_link_2 :: forall r_1 . String -> Rep_Fun_link_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_link_0 HtmlAttr
  where alg (Mk_Fun_link_2 v_3) = link v_3
instance BoundedArbitrary1 Rep_Fun_link_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_link_2) arbitrary
type instance Fun "link" = Rep_Fun_link_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_marginheight_0 r_1 where
  Mk_Fun_marginheight_2 :: forall r_1 . Int -> Rep_Fun_marginheight_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_marginheight_0 HtmlAttr
  where alg (Mk_Fun_marginheight_2 v_3) = marginheight v_3
instance BoundedArbitrary1 Rep_Fun_marginheight_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_marginheight_2) arbitrary
type instance Fun "marginheight" = Rep_Fun_marginheight_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_marginwidth_0 r_1 where
  Mk_Fun_marginwidth_2 :: forall r_1 . Int -> Rep_Fun_marginwidth_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_marginwidth_0 HtmlAttr
  where alg (Mk_Fun_marginwidth_2 v_3) = marginwidth v_3
instance BoundedArbitrary1 Rep_Fun_marginwidth_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_marginwidth_2) arbitrary
type instance Fun "marginwidth" = Rep_Fun_marginwidth_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_maxlength_0 r_1 where
  Mk_Fun_maxlength_2 :: forall r_1 . Int -> Rep_Fun_maxlength_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_maxlength_0 HtmlAttr
  where alg (Mk_Fun_maxlength_2 v_3) = maxlength v_3
instance BoundedArbitrary1 Rep_Fun_maxlength_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_maxlength_2) arbitrary
type instance Fun "maxlength" = Rep_Fun_maxlength_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_method_0 r_1 where
  Mk_Fun_method_2 :: forall r_1 . String -> Rep_Fun_method_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_method_0 HtmlAttr
  where alg (Mk_Fun_method_2 v_3) = method v_3
instance BoundedArbitrary1 Rep_Fun_method_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_method_2) arbitrary
type instance Fun "method" = Rep_Fun_method_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_multiple_0 r_1 where
  Mk_Fun_multiple_2 :: forall r_1 . Rep_Fun_multiple_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_multiple_0 HtmlAttr
  where alg (Mk_Fun_multiple_2) = multiple
instance BoundedArbitrary1 Rep_Fun_multiple_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_multiple_2
type instance Fun "multiple" = Rep_Fun_multiple_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_name_0 r_1 where
  Mk_Fun_name_2 :: forall r_1 . String -> Rep_Fun_name_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_name_0 HtmlAttr
  where alg (Mk_Fun_name_2 v_3) = name v_3
instance BoundedArbitrary1 Rep_Fun_name_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_name_2) arbitrary
type instance Fun "name" = Rep_Fun_name_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_nohref_0 r_1 where Mk_Fun_nohref_2 :: forall r_1 . Rep_Fun_nohref_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_nohref_0 HtmlAttr
  where alg (Mk_Fun_nohref_2) = nohref
instance BoundedArbitrary1 Rep_Fun_nohref_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_nohref_2
type instance Fun "nohref" = Rep_Fun_nohref_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_noresize_0 r_1 where
  Mk_Fun_noresize_2 :: forall r_1 . Rep_Fun_noresize_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_noresize_0 HtmlAttr
  where alg (Mk_Fun_noresize_2) = noresize
instance BoundedArbitrary1 Rep_Fun_noresize_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_noresize_2
type instance Fun "noresize" = Rep_Fun_noresize_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_noshade_0 r_1 where
  Mk_Fun_noshade_2 :: forall r_1 . Rep_Fun_noshade_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_noshade_0 HtmlAttr
  where alg (Mk_Fun_noshade_2) = noshade
instance BoundedArbitrary1 Rep_Fun_noshade_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_noshade_2
type instance Fun "noshade" = Rep_Fun_noshade_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_nowrap_0 r_1 where Mk_Fun_nowrap_2 :: forall r_1 . Rep_Fun_nowrap_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_nowrap_0 HtmlAttr
  where alg (Mk_Fun_nowrap_2) = nowrap
instance BoundedArbitrary1 Rep_Fun_nowrap_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_nowrap_2
type instance Fun "nowrap" = Rep_Fun_nowrap_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_rel_0 r_1 where Mk_Fun_rel_2 :: forall r_1 . String -> Rep_Fun_rel_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_rel_0 HtmlAttr
  where alg (Mk_Fun_rel_2 v_3) = rel v_3
instance BoundedArbitrary1 Rep_Fun_rel_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_rel_2) arbitrary
type instance Fun "rel" = Rep_Fun_rel_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_rev_0 r_1 where Mk_Fun_rev_2 :: forall r_1 . String -> Rep_Fun_rev_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_rev_0 HtmlAttr
  where alg (Mk_Fun_rev_2 v_3) = rev v_3
instance BoundedArbitrary1 Rep_Fun_rev_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_rev_2) arbitrary
type instance Fun "rev" = Rep_Fun_rev_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_rows_0 r_1 where
  Mk_Fun_rows_2 :: forall r_1 . String -> Rep_Fun_rows_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_rows_0 HtmlAttr
  where alg (Mk_Fun_rows_2 v_3) = rows v_3
instance BoundedArbitrary1 Rep_Fun_rows_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_rows_2) arbitrary
type instance Fun "rows" = Rep_Fun_rows_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_rowspan_0 r_1 where
  Mk_Fun_rowspan_2 :: forall r_1 . Int -> Rep_Fun_rowspan_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_rowspan_0 HtmlAttr
  where alg (Mk_Fun_rowspan_2 v_3) = rowspan v_3
instance BoundedArbitrary1 Rep_Fun_rowspan_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_rowspan_2) arbitrary
type instance Fun "rowspan" = Rep_Fun_rowspan_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_rules_0 r_1 where
  Mk_Fun_rules_2 :: forall r_1 . String -> Rep_Fun_rules_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_rules_0 HtmlAttr
  where alg (Mk_Fun_rules_2 v_3) = rules v_3
instance BoundedArbitrary1 Rep_Fun_rules_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_rules_2) arbitrary
type instance Fun "rules" = Rep_Fun_rules_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_scrolling_0 r_1 where
  Mk_Fun_scrolling_2 :: forall r_1 . String -> Rep_Fun_scrolling_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_scrolling_0 HtmlAttr
  where alg (Mk_Fun_scrolling_2 v_3) = scrolling v_3
instance BoundedArbitrary1 Rep_Fun_scrolling_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_scrolling_2) arbitrary
type instance Fun "scrolling" = Rep_Fun_scrolling_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_selected_0 r_1 where
  Mk_Fun_selected_2 :: forall r_1 . Rep_Fun_selected_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_selected_0 HtmlAttr
  where alg (Mk_Fun_selected_2) = selected
instance BoundedArbitrary1 Rep_Fun_selected_0
  where liftBoundedGen _gen_3 _depth_4 = pure Mk_Fun_selected_2
type instance Fun "selected" = Rep_Fun_selected_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_shape_0 r_1 where
  Mk_Fun_shape_2 :: forall r_1 . String -> Rep_Fun_shape_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_shape_0 HtmlAttr
  where alg (Mk_Fun_shape_2 v_3) = shape v_3
instance BoundedArbitrary1 Rep_Fun_shape_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_shape_2) arbitrary
type instance Fun "shape" = Rep_Fun_shape_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_size_0 r_1 where
  Mk_Fun_size_2 :: forall r_1 . String -> Rep_Fun_size_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_size_0 HtmlAttr
  where alg (Mk_Fun_size_2 v_3) = size v_3
instance BoundedArbitrary1 Rep_Fun_size_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_size_2) arbitrary
type instance Fun "size" = Rep_Fun_size_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_src_0 r_1 where Mk_Fun_src_2 :: forall r_1 . String -> Rep_Fun_src_0 r_1 deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_src_0 HtmlAttr
  where alg (Mk_Fun_src_2 v_3) = src v_3
instance BoundedArbitrary1 Rep_Fun_src_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_src_2) arbitrary
type instance Fun "src" = Rep_Fun_src_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_start_0 r_1 where
  Mk_Fun_start_2 :: forall r_1 . Int -> Rep_Fun_start_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_start_0 HtmlAttr
  where alg (Mk_Fun_start_2 v_3) = start v_3
instance BoundedArbitrary1 Rep_Fun_start_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_start_2) arbitrary
type instance Fun "start" = Rep_Fun_start_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_target_0 r_1 where
  Mk_Fun_target_2 :: forall r_1 . String -> Rep_Fun_target_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_target_0 HtmlAttr
  where alg (Mk_Fun_target_2 v_3) = target v_3
instance BoundedArbitrary1 Rep_Fun_target_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_target_2) arbitrary
type instance Fun "target" = Rep_Fun_target_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_text_0 r_1 where
  Mk_Fun_text_2 :: forall r_1 . String -> Rep_Fun_text_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_text_0 HtmlAttr
  where alg (Mk_Fun_text_2 v_3) = text v_3
instance BoundedArbitrary1 Rep_Fun_text_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_text_2) arbitrary
type instance Fun "text" = Rep_Fun_text_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_theclass_0 r_1 where
  Mk_Fun_theclass_2 :: forall r_1 . String -> Rep_Fun_theclass_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_theclass_0 HtmlAttr
  where alg (Mk_Fun_theclass_2 v_3) = theclass v_3
instance BoundedArbitrary1 Rep_Fun_theclass_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_theclass_2) arbitrary
type instance Fun "theclass" = Rep_Fun_theclass_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_thestyle_0 r_1 where
  Mk_Fun_thestyle_2 :: forall r_1 . String -> Rep_Fun_thestyle_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_thestyle_0 HtmlAttr
  where alg (Mk_Fun_thestyle_2 v_3) = thestyle v_3
instance BoundedArbitrary1 Rep_Fun_thestyle_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_thestyle_2) arbitrary
type instance Fun "thestyle" = Rep_Fun_thestyle_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_thetype_0 r_1 where
  Mk_Fun_thetype_2 :: forall r_1 . String -> Rep_Fun_thetype_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_thetype_0 HtmlAttr
  where alg (Mk_Fun_thetype_2 v_3) = thetype v_3
instance BoundedArbitrary1 Rep_Fun_thetype_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_thetype_2) arbitrary
type instance Fun "thetype" = Rep_Fun_thetype_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_title_0 r_1 where
  Mk_Fun_title_2 :: forall r_1 . String -> Rep_Fun_title_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_title_0 HtmlAttr
  where alg (Mk_Fun_title_2 v_3) = title v_3
instance BoundedArbitrary1 Rep_Fun_title_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_title_2) arbitrary
type instance Fun "title" = Rep_Fun_title_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_usemap_0 r_1 where
  Mk_Fun_usemap_2 :: forall r_1 . String -> Rep_Fun_usemap_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_usemap_0 HtmlAttr
  where alg (Mk_Fun_usemap_2 v_3) = usemap v_3
instance BoundedArbitrary1 Rep_Fun_usemap_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_usemap_2) arbitrary
type instance Fun "usemap" = Rep_Fun_usemap_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_valign_0 r_1 where
  Mk_Fun_valign_2 :: forall r_1 . String -> Rep_Fun_valign_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_valign_0 HtmlAttr
  where alg (Mk_Fun_valign_2 v_3) = valign v_3
instance BoundedArbitrary1 Rep_Fun_valign_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_valign_2) arbitrary
type instance Fun "valign" = Rep_Fun_valign_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_value_0 r_1 where
  Mk_Fun_value_2 :: forall r_1 . String -> Rep_Fun_value_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_value_0 HtmlAttr
  where alg (Mk_Fun_value_2 v_3) = value v_3
instance BoundedArbitrary1 Rep_Fun_value_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_value_2) arbitrary
type instance Fun "value" = Rep_Fun_value_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_version_0 r_1 where
  Mk_Fun_version_2 :: forall r_1 . String -> Rep_Fun_version_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_version_0 HtmlAttr
  where alg (Mk_Fun_version_2 v_3) = version v_3
instance BoundedArbitrary1 Rep_Fun_version_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_version_2) arbitrary
type instance Fun "version" = Rep_Fun_version_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_vlink_0 r_1 where
  Mk_Fun_vlink_2 :: forall r_1 . String -> Rep_Fun_vlink_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_vlink_0 HtmlAttr
  where alg (Mk_Fun_vlink_2 v_3) = vlink v_3
instance BoundedArbitrary1 Rep_Fun_vlink_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_vlink_2) arbitrary
type instance Fun "vlink" = Rep_Fun_vlink_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_vspace_0 r_1 where
  Mk_Fun_vspace_2 :: forall r_1 . Int -> Rep_Fun_vspace_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_vspace_0 HtmlAttr
  where alg (Mk_Fun_vspace_2 v_3) = vspace v_3
instance BoundedArbitrary1 Rep_Fun_vspace_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_vspace_2) arbitrary
type instance Fun "vspace" = Rep_Fun_vspace_0
[92m[DRAGEN] derived interface function representation:
[0mdata Rep_Fun_width_0 r_1 where
  Mk_Fun_width_2 :: forall r_1 . String -> Rep_Fun_width_0 r_1
  deriving (Show, Functor, Generic)
instance Algebra Rep_Fun_width_0 HtmlAttr
  where alg (Mk_Fun_width_2 v_3) = width v_3
instance BoundedArbitrary1 Rep_Fun_width_0
  where liftBoundedGen _gen_4 _depth_5 = (<*>) (pure Mk_Fun_width_2) arbitrary
type instance Fun "width" = Rep_Fun_width_0
[92m[DRAGEN] derived type instance:
[0mtype instance Rep "(-> HtmlAttr)" = Sum (Term (Fun "emptyAttr"))
                                        (Sum (Term (Fun "intAttr"))
                                             (Sum (Term (Fun "strAttr"))
                                                  (Sum (Term (Fun "action"))
                                                       (Sum (Term (Fun "align"))
                                                            (Sum (Term (Fun "alink"))
                                                                 (Sum (Term (Fun "alt"))
                                                                      (Sum (Term (Fun "altcode"))
                                                                           (Sum (Term (Fun "archive"))
                                                                                (Sum (Term (Fun "background"))
                                                                                     (Sum (Term (Fun "base"))
                                                                                          (Sum (Term (Fun "bgcolor"))
                                                                                               (Sum (Term (Fun "border"))
                                                                                                    (Sum (Term (Fun "bordercolor"))
                                                                                                         (Sum (Term (Fun "cellpadding"))
                                                                                                              (Sum (Term (Fun "cellspacing"))
                                                                                                                   (Sum (Term (Fun "checked"))
                                                                                                                        (Sum (Term (Fun "clear"))
                                                                                                                             (Sum (Term (Fun "code"))
                                                                                                                                  (Sum (Term (Fun "codebase"))
                                                                                                                                       (Sum (Term (Fun "color"))
                                                                                                                                            (Sum (Term (Fun "cols"))
                                                                                                                                                 (Sum (Term (Fun "colspan"))
                                                                                                                                                      (Sum (Term (Fun "compact"))
                                                                                                                                                           (Sum (Term (Fun "content"))
                                                                                                                                                                (Sum (Term (Fun "coords"))
                                                                                                                                                                     (Sum (Term (Fun "enctype"))
                                                                                                                                                                          (Sum (Term (Fun "face"))
                                                                                                                                                                               (Sum (Term (Fun "frameborder"))
                                                                                                                                                                                    (Sum (Term (Fun "height"))
                                                                                                                                                                                         (Sum (Term (Fun "href"))
                                                                                                                                                                                              (Sum (Term (Fun "hspace"))
                                                                                                                                                                                                   (Sum (Term (Fun "httpequiv"))
                                                                                                                                                                                                        (Sum (Term (Fun "identifier"))
                                                                                                                                                                                                             (Sum (Term (Fun "ismap"))
                                                                                                                                                                                                                  (Sum (Term (Fun "lang"))
                                                                                                                                                                                                                       (Sum (Term (Fun "link"))
                                                                                                                                                                                                                            (Sum (Term (Fun "marginheight"))
                                                                                                                                                                                                                                 (Sum (Term (Fun "marginwidth"))
                                                                                                                                                                                                                                      (Sum (Term (Fun "maxlength"))
                                                                                                                                                                                                                                           (Sum (Term (Fun "method"))
                                                                                                                                                                                                                                                (Sum (Term (Fun "multiple"))
                                                                                                                                                                                                                                                     (Sum (Term (Fun "name"))
                                                                                                                                                                                                                                                          (Sum (Term (Fun "nohref"))
                                                                                                                                                                                                                                                               (Sum (Term (Fun "noresize"))
                                                                                                                                                                                                                                                                    (Sum (Term (Fun "noshade"))
                                                                                                                                                                                                                                                                         (Sum (Term (Fun "nowrap"))
                                                                                                                                                                                                                                                                              (Sum (Term (Fun "rel"))
                                                                                                                                                                                                                                                                                   (Sum (Term (Fun "rev"))
                                                                                                                                                                                                                                                                                        (Sum (Term (Fun "rows"))
                                                                                                                                                                                                                                                                                             (Sum (Term (Fun "rowspan"))
                                                                                                                                                                                                                                                                                                  (Sum (Term (Fun "rules"))
                                                                                                                                                                                                                                                                                                       (Sum (Term (Fun "scrolling"))
                                                                                                                                                                                                                                                                                                            (Sum (Term (Fun "selected"))
                                                                                                                                                                                                                                                                                                                 (Sum (Term (Fun "shape"))
                                                                                                                                                                                                                                                                                                                      (Sum (Term (Fun "size"))
                                                                                                                                                                                                                                                                                                                           (Sum (Term (Fun "src"))
                                                                                                                                                                                                                                                                                                                                (Sum (Term (Fun "start"))
                                                                                                                                                                                                                                                                                                                                     (Sum (Term (Fun "target"))
                                                                                                                                                                                                                                                                                                                                          (Sum (Term (Fun "text"))
                                                                                                                                                                                                                                                                                                                                               (Sum (Term (Fun "theclass"))
                                                                                                                                                                                                                                                                                                                                                    (Sum (Term (Fun "thestyle"))
                                                                                                                                                                                                                                                                                                                                                         (Sum (Term (Fun "thetype"))
                                                                                                                                                                                                                                                                                                                                                              (Sum (Term (Fun "title"))
                                                                                                                                                                                                                                                                                                                                                                   (Sum (Term (Fun "usemap"))
                                                                                                                                                                                                                                                                                                                                                                        (Sum (Term (Fun "valign"))
                                                                                                                                                                                                                                                                                                                                                                             (Sum (Term (Fun "value"))
                                                                                                                                                                                                                                                                                                                                                                                  (Sum (Term (Fun "version"))
                                                                                                                                                                                                                                                                                                                                                                                       (Sum (Term (Fun "vlink"))
                                                                                                                                                                                                                                                                                                                                                                                            (Sum (Term (Fun "vspace"))
                                                                                                                                                                                                                                                                                                                                                                                                 (Term (Fun "width")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
[92m[DRAGEN] derived BoundedArbitrary instance:
[0minstance BoundedArbitrary Html
  where boundedArbitrary = genEval @(Lookup Html_S "Html")
[92m[DRAGEN] derived BoundedArbitrary instance:
[0minstance BoundedArbitrary HtmlElement
  where boundedArbitrary = genEval @(Lookup Html_S "HtmlElement")
[92m[DRAGEN] derived BoundedArbitrary instance:
[0minstance BoundedArbitrary HtmlAttr
  where boundedArbitrary = genEval @(Lookup Html_S "HtmlAttr")
Ok, two modules loaded.
Loaded GHCi configuration from /tmp/haskell-stack-ghci/870264d4/ghci-script
Leaving GHCi.
