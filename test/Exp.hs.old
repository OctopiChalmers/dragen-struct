
----------------------------------------
-- | Example

data Exp a
  = Val a
  | Add (Exp a) (Exp a)
  | If (Cond a) (Exp a) (Exp a)
  deriving Show

data Cond a
  = LEq (Exp a) (Exp a)
  | Bool Bool
  deriving Show


data Con_Val  a r = Mk_Val a               deriving (Show, Functor)
data Con_Add  a r = Mk_Add r r             deriving (Show, Functor)
data Con_If   a r = Mk_If  (Cond a) r r    deriving (Show, Functor)
data Con_LEq  a r = Mk_LEq (Exp a) (Exp a) deriving (Show, Functor)
data Con_Bool a r = Mk_Bool Bool           deriving (Show, Functor)

instance Algebra (Con_Val  a) (Exp a)  where alg (Mk_Val x)    = Val x
instance Algebra (Con_Add  a) (Exp a)  where alg (Mk_Add x y)  = Add x y
instance Algebra (Con_If   a) (Exp a)  where alg (Mk_If b x y) = If b x y
instance Algebra (Con_LEq  a) (Cond a) where alg (Mk_LEq x y)  = LEq x y
instance Algebra (Con_Bool a) (Cond a) where alg (Mk_Bool b)   = Bool b

type instance Con "Val"  = Some1 Con_Val
type instance Con "Add"  = Some1 Con_Add
type instance Con "If"   = Some1 Con_If
type instance Con "LEq"  = Some1 Con_LEq
type instance Con "Bool" = Some1 Con_Bool


instance Arbitrary a => BoundedArbitrary1 (Con_Val a) where
  liftBoundedGen _gen _depth
    = Mk_Val <$> arbitrary

instance Arbitrary a => BoundedArbitrary1 (Con_Add a) where
  liftBoundedGen gen depth
    = Mk_Add <$> gen (depth - 1)
             <*> gen (depth - 1)

instance Arbitrary a => BoundedArbitrary1 (Con_If a) where
  liftBoundedGen gen depth
    = Mk_If <$> boundedArbitrary (depth - 1)
            <*> gen (depth - 1)
            <*> gen (depth - 1)

instance Arbitrary a => BoundedArbitrary1 (Con_LEq a) where
  liftBoundedGen _gen depth
    = Mk_LEq <$> boundedArbitrary (depth - 1)
             <*> boundedArbitrary (depth - 1)

instance Arbitrary a => BoundedArbitrary1 (Con_Bool a) where
  liftBoundedGen _gen _depth
    = Mk_Bool <$> arbitrary

type ExpS  = Term (Some1 Con_Val) `Sum` Some1 Con_Add `Sum` Some1 Con_If
type CondS = Some1 Con_LEq `Sum` Term (Some1 Con_Bool)

instance Arbitrary a => BoundedArbitrary (Exp a) where
  boundedArbitrary = genEval @(Apply a ExpS)

instance Arbitrary a => BoundedArbitrary (Cond a) where
  boundedArbitrary = genEval @(Apply a CondS)
